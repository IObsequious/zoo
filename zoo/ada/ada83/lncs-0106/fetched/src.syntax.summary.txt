2.3
identifier ::=letter IIunderscore] letter_or_digitl
letter_or_digit ::= latter I digitietter ::2 upper_case_letter ~ lower_case]attar
2,4numeric_literal	:;= decimal_number I based_numberdecimaLnumber ::= integer ~,intagerl [exponent]integer	::= digit ][underscore] digitlexponent ::= E I+I integer I E - integer
2,4,1based_number ::=
base ~ based_integer [,bessd_Ioteger~ # [exponent]
base ::= integer
based_integer ::=extended_digit I{undersc0re] extended_digit}
extended_dlgit	::= d~g~Itatter
2.6character_string ::= "lcharecterl"
2,8
pragma ::=pragma identifier [(argument I, ergumentl)];
argument ::=[identifier =>] name
I [identifier =>] static expression
3,1
declaration ::=object_declaration
type~declarationl subprogram_dad(station I package_declarationI task_declaration	] exceDtion_.deelarationI renaming_declaration
3,2
I number_declaration
ob~ecLdec|aration ::=identifier_list : Iconmnt] subtype_indication [:= expression];
I idenfifier_tlst : IconMant] array_type_definition [:= expression];number_declaration :;=
identifier_list : eon~ant := literal expression;~dentifier_list ::= identifier ], identifier}
J subtype_declaretion
