2.1
graphic_character ::= basic_graphic_characterI lower_case_letter I other-speciaLcharacter
basic_graphic_character ::=upper_case_letter I digit
1 special_character t space_characterbasic_character ::=
basle_graphic_character j formaLeffector
2.3
identifier ::=letter I[undedine] letter_or_digit}
letter_or_digit ::= letter I digit
letter ::= upper_case_letter t lower_case_letter
2.4
numeric_literal ::= decimal_literal j bssedJiteral
2.4.1
decimal_literal ::= integer [.integer] [exponent]
integer ::= digit t[underline] digit}
exponent ::= E [+l integer I E - integer
2,4.2
based_literal ::=base # based_integer [.based_integerJ # [exponent]
base ::= integer
bassd_integer ::=extended_digit {[undedine] extended_digit}
extended_digit ::= digit I letter2.5character_literal ::= graphic_character'2.6
string_t~tera[ ::= "{graphic_character}"
2.8
pregme ::=pmgma identifier {{argumenLassociation
I, argument_association})];
argumenLassociation ::={argument_identifier =>] name
1 [argument_identifler =>] expression