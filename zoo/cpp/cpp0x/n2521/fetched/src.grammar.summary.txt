Appendix A
(informative)
Grammar summary [gram]
1 This summary of C++ syntax is intended to be an aid to comprehension. It is not an exact statement of the language. In particular, the grammar described here accepts a superset of valid C++ constructs. Disambiguation rules (6.8, 7.1, 10.2) must be applied to distinguish expressions from declarations. Further, access control, ambiguity, and type rules must be used to weed out syntactically valid but meaningless constructs.
A.1 Keywords [gram.key]
1 New context-dependent keywords are introduced into a program by typedef (7.1.3), namespace (7.3.1), class (clause 9), enumeration (7.2), and template (clause 14) declarations.
￼￼typedef-name: identifier
namespace-name: original-namespace-name
namespace-alias original-namespace-name:
identifier namespace-alias:
identifier
class-name: identifier
template-id enum-name:
identifier
template-name: identifier
Note that a typedef-name naming a class is also a class-name (9.1). A.2 Lexical conventions
hex-quad:
hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit
[gram.lex]
A.2 Lexical conventions
universal-character-name: \u hex-quad
\U hex-quad hex-quad
preprocessing-token: header-name
identifier
pp-number
character-literal
string-literal
preprocessing-op-or-punc
each non-white-space character that cannot be one of the above
token:
identifier
keyword literal operator punctuator
header-name:
< h-char-sequence >
" q-char-sequence "
h-char-sequence: h-char
h-char-sequence h-char h-char:
any member of the source character set except new-line and >
q-char-sequence: q-char
q-char-sequence q-char q-char:
any member of the source character set except new-line and "
Grammar summary 1122
￼pp-number: digit
. digit
pp-number digit pp-number nondigit pp-number e sign pp-number E sign pp-number .
identifier: identifier-nondigit
identifier identifier-nondigit identifier digit
identifier-nondigit: nondigit
universal-character-name
other implementation-defined characters
Draft
1123
Grammar summary
nondigit: one of abcdefghijklm nopqrstuvwxyz ABCDEFGHIJKLM NOPQRSTUVWXYZ_
digit: one of 0123456789
A.2 Lexical conventions
￼preprocessing-op-or-punc: one of
{ } [ ] # ## ( )
<: :> <% %> %: %:%: ; : ... new delete ? :: . .* +-*/%^&|∼
! =
^= &=
<= >=
and and_eq or or_eq
literal: integer-literal
character-literal floating-literal string-literal boolean-literal pointer-literal
< > += -= *= /= %= |= << >> >>= <<= == != && || ++ -- , ->* ->
integer-literal:
decimal-literal integer-suffixopt octal-literal integer-suffixopt hexadecimal-literal integer-suffixopt
decimal-literal: nonzero-digit
decimal-literal digit
octal-literal:
0
octal-literal octal-digit
hexadecimal-literal:
0x hexadecimal-digit
0X hexadecimal-digit hexadecimal-literal hexadecimal-digit
nonzero-digit: one of 123456789
octal-digit: one of 01234567
hexadecimal-digit: one of 0123456789
abcdef ABCDEF
bitand bitor xor xor_eq
compl not
not_eq
Draft
A.2 Lexical conventions
integer-suffix:
unsigned-suffix long-suffixopt unsigned-suffix long-long-suffixopt long-suffix unsigned-suffixopt long-long-suffix unsigned-suffixopt
unsigned-suffix: one of uU
long-suffix: one of lL
long-long-suffix: one of ll LL
character-literal:
’ c-char-sequence ’
u’ c-char-sequence ’ U’ c-char-sequence ’ L’ c-char-sequence ’
c-char-sequence: c-char
c-char-sequence c-char
c-char:
any member of the source character set except
the single-quote ’, backslash \, or new-line character
escape-sequence universal-character-name
escape-sequence: simple-escape-sequence
octal-escape-sequence hexadecimal-escape-sequence
simple-escape-sequence: one of \’ \" \? \\
\a \b \f \n \r \t \v
octal-escape-sequence: \ octal-digit
\ octal-digit octal-digit
\ octal-digit octal-digit octal-digit
hexadecimal-escape-sequence: \x hexadecimal-digit
hexadecimal-escape-sequence hexadecimal-digit
floating-literal:
fractional-constant exponent-partopt floating-suffixopt digit-sequence exponent-part floating-suffixopt
Grammar summary 1124
￼fractional-constant:
digit-sequenceopt . digit-sequence digit-sequence .
Draft
1125
Grammar summary
exponent-part:
e signopt digit-sequence
E signopt digit-sequence sign: one of
+-
digit-sequence: digit
digit-sequence digit floating-suffix: one of
flFL
string-literal:
" s-char-sequenceopt "
u8" s-char-sequenceopt " u" s-char-sequenceopt " U" s-char-sequenceopt " L" s-char-sequenceopt " R raw-string
u8R raw-string uR raw-string UR raw-string LR raw-string
s-char-sequence: s-char
s-char-sequence s-char
s-char:
any member of the source character set except
the double-quote ", backslash \, or new-line character
escape-sequence universal-character-name
raw-string:
" d-char-sequenceopt [ r-char-sequenceopt ] d-char-sequenceopt "
r-char-sequence: r-char
r-char-sequence r-char
r-char:
any member of the source character set, except
(1), a backslash \ followed by a u or U, or
(2), a right square bracket ] followed by the initial d-char-sequence (which may be empty) followed by a double quote ".
A.2 Lexical conventions
￼universal-character-name
d-char-sequence: d-char
d-char-sequence d-char
Draft
A.3 Basic concepts
d-char:
any member of the basic source character set except:
space, the left square bracket [, the right square bracket ], and the control characters representing horizontal tab, vertical tab, form feed, and newline.
boolean-literal:
false true
pointer-literal:
nullptr
A.3 Basic concepts
translation-unit: declaration-seqopt
A.4 Expressions
primary-expression: literal
this
( expression )
id-expression id-expression:
unqualified-id
qualified-id unqualified-id:
identifier operator-function-id conversion-function-id ∼ class-name template-id
qualified-id:
::opt nested-name-specifier templateopt unqualified-id :: identifier
:: operator-function-id
:: template-id
nested-name-specifier: type-name ::
namespace-name ::
nested-name-specifier identifier ::
nested-name-specifier templateopt simple-template-id ::
Draft
Grammar summary 1126
￼[gram.basic]
[gram.expr]
1127
Grammar summary
postfix-expression: primary-expression
postfix-expression [ expression ] postfix-expression ( expression-listopt ) simple-type-specifier ( expression-listopt ) typename-specifier ( expression-listopt ) postfix-expression . templateopt id-expression postfix-expression -> templateopt id-expression postfix-expression . pseudo-destructor-name postfix-expression -> pseudo-destructor-name postfix-expression ++
postfix-expression --
dynamic_cast < type-id > ( expression ) static_cast < type-id > ( expression ) reinterpret_cast < type-id > ( expression ) const_cast < type-id > ( expression ) typeid ( expression )
typeid ( type-id )
expression-list:
assignment-expression ...opt
expression-list , assignment-expression ...opt
pseudo-destructor-name:
::opt nested-name-specifieropt type-name :: ∼ type-name
::opt nested-name-specifier template simple-template-id :: ∼ type-name ::opt nested-name-specifieropt ∼ type-name
unary-expression: postfix-expression
++ cast-expression
-- cast-expression unary-operator cast-expression sizeof unary-expression sizeof ( type-id )
sizeof ... ( identifier ) alignof ( type-id ) new-expression delete-expression
unary-operator: one of *&+-!∼
new-expression:
::opt new new-placementopt new-type-id new-initializeropt ::opt new new-placementopt ( type-id ) new-initializeropt
A.4 Expressions
￼new-placement:
( expression-list )
new-type-id:
type-specifier-seq new-declaratoropt
Draft
A.4 Expressions
new-declarator:
ptr-operator new-declaratoropt direct-new-declarator
direct-new-declarator: [ expression ]
direct-new-declarator [ constant-expression ] new-initializer:
( expression-listopt )
delete-expression:
::opt delete cast-expression ::opt delete [ ] cast-expression
cast-expression: unary-expression
( type-id ) cast-expression
pm-expression: cast-expression
pm-expression .* cast-expression pm-expression ->* cast-expression
multiplicative-expression: pm-expression
multiplicative-expression * pm-expression multiplicative-expression / pm-expression multiplicative-expression % pm-expression
additive-expression: multiplicative-expression
additive-expression + multiplicative-expression additive-expression - multiplicative-expression
shift-expression: additive-expression
shift-expression << additive-expression shift-expression >> additive-expression
relational-expression: shift-expression
relational-expression < shift-expression relational-expression > shift-expression relational-expression <= shift-expression relational-expression >= shift-expression
equality-expression: relational-expression
equality-expression == relational-expression equality-expression != relational-expression
Grammar summary 1128
￼Draft
1129
Grammar summary
and-expression: equality-expression
and-expression & equality-expression
exclusive-or-expression: and-expression
exclusive-or-expression ^ and-expression
inclusive-or-expression: exclusive-or-expression
inclusive-or-expression | exclusive-or-expression
logical-and-expression: inclusive-or-expression
logical-and-expression && inclusive-or-expression
logical-or-expression: logical-and-expression
logical-or-expression || logical-and-expression
conditional-expression: logical-or-expression
logical-or-expression ? expression : assignment-expression
assignment-expression: conditional-expression
logical-or-expression assignment-operator assignment-expression throw-expression
A.5 Statements
￼assignment-operator: one of
= *= /= %= += -= >>= <<= &= ^= |=
expression: assignment-expression
expression , assignment-expression constant-expression:
conditional-expression
A.5 Statements
statement: labeled-statement
expression-statement compound-statement selection-statement iteration-statement jump-statement declaration-statement try-block
labeled-statement: identifier : statement
case constant-expression : statement
default : statement
expression-statement: expressionopt ;
[gram.stmt]
Draft
A.6 Declarations
compound-statement:
{ statement-seqopt }
statement-seq: statement
statement-seq statement
selection-statement:
if ( condition ) statement
if ( condition ) statement else statement switch ( condition ) statement
condition: expression
type-specifier-seq declarator = assignment-expression
iteration-statement:
while ( condition ) statement
do statement while ( expression ) ;
for ( for-init-statement conditionopt ; expressionopt ) statement
Grammar summary 1130
￼for-init-statement: expression-statement
simple-declaration
jump-statement:
break ;
continue ;
return expressionopt ; goto identifier ;
declaration-statement: block-declaration
A.6 Declarations
declaration-seq: declaration
declaration-seq declaration
declaration: block-declaration
function-definition template-declaration explicit-instantiation explicit-specialization linkage-specification namespace-definition
[gram.dcl]
Draft
1131
Grammar summary
block-declaration: simple-declaration
asm-definition namespace-alias-definition using-declaration using-directive static_assert-declaration alias-declaration
alias-declaration:
using identifier = type-id
simple-declaration:
decl-specifier-seqopt init-declarator-listopt ;
static_assert-declaration:
static_assert ( constant-expression , string-literal ) ;
A.6 Declarations
￼decl-specifier: storage-class-specifier
type-specifier function-specifier friend
typedef constexpr alignment-specifier
decl-specifier-seq:
decl-specifier-seqopt decl-specifier
storage-class-specifier:
     register
     static
     extern
     mutable
function-specifier:
     inline
     virtual
     explicit
typedef-name: identifier
type-specifier: simple-type-specifier
class-specifier enum-specifier elaborated-type-specifier typename-specifier cv-qualifier
Draft
A.6 Declarations
simple-type-specifier:
::opt nested-name-specifieropt type-name
::opt nested-name-specifier template simple-template-id char
char16_t
char32_t
wchar_t
bool
short
int
long
signed
unsigned
float
double
void
auto
decltype ( expression )
type-name: class-name
enum-name typedef-name
elaborated-type-specifier:
class-key ::opt nested-name-specifieropt identifier
class-key ::opt nested-name-specifieropt templateopt simple-template-id enum-key ::opt nested-name-specifieropt identifier
alignment-specifier:
alignas ( constant-expression ) alignas ( type-id )
enum-name: identifier
enum-specifier:
enum-key identifieropt enum-baseopt { enumerator-listopt } enum-key identifieropt enum-baseopt { enumerator-list , }
Grammar summary 1132
￼enum-key:
     enum
     enum class
     enum struct
enum-base:
: type-specifier-seq
enumerator-list: enumerator-definition
enumerator-list , enumerator-definition enumerator-definition:
enumerator
enumerator = constant-expression enumerator:
identifier
Draft
1133
Grammar summary
namespace-name: original-namespace-name
namespace-alias original-namespace-name:
identifier namespace-definition:
named-namespace-definition
unnamed-namespace-definition named-namespace-definition:
original-namespace-definition
extension-namespace-definition original-namespace-definition:
namespace identifier { namespace-body } extension-namespace-definition:
namespace original-namespace-name { namespace-body } unnamed-namespace-definition:
namespace { namespace-body } namespace-body:
declaration-seqopt
namespace-alias: identifier
namespace-alias-definition:
namespace identifier = qualified-namespace-specifier ;
qualified-namespace-specifier:
::opt nested-name-specifieropt namespace-name
using-declaration:
using typenameopt ::opt nested-name-specifier unqualified-id ; using :: unqualified-id ;
A.7 Declarators
￼using-directive:
using namespace ::opt
asm-definition:
asm ( string-literal ) ;
linkage-specification:
extern string-literal { declaration-seqopt } extern string-literal declaration
A.7 Declarators
init-declarator-list: init-declarator
init-declarator-list , init-declarator init-declarator:
declarator initializeropt
declarator: direct-declarator
ptr-operator declarator
[gram.decl]
nested-name-specifieropt namespace-name ;
Draft
A.7 Declarators
direct-declarator: declarator-id
direct-declarator ( parameter-declaration-clause ) cv-qualifier-seqopt ref-qualifieropt exception-specificationopt
direct-declarator [ constant-expressionopt ]
( declarator ) ptr-operator:
* cv-qualifier-seqopt
&
&&
::opt nested-name-specifier * cv-qualifier-seqopt
cv-qualifier-seq:
cv-qualifier cv-qualifier-seqopt
cv-qualifier:
           const
           volatile
ref-qualifier:
& &&
declarator-id:
...opt id-expression
::opt nested-name-specifieropt class-name type-id:
type-specifier-seq abstract-declaratoropt
type-specifier-seq:
type-specifier type-specifier-seqopt
abstract-declarator:
ptr-operator abstract-declaratoropt direct-abstract-declarator
...
direct-abstract-declarator: direct-abstract-declaratoropt
( parameter-declaration-clause ) cv-qualifier-seqopt direct-abstract-declaratoropt [ constant-expressionopt ]
( abstract-declarator )
parameter-declaration-clause: parameter-declaration-listopt ...opt parameter-declaration-list , ...
parameter-declaration-list: parameter-declaration
parameter-declaration-list , parameter-declaration
Draft
Grammar summary 1134
￼ref-qualifieropt exception-specificationopt
1135
Grammar summary
parameter-declaration:
decl-specifier-seq declarator
decl-specifier-seq declarator = assignment-expression decl-specifier-seq abstract-declaratoropt
decl-specifier-seq abstract-declaratoropt = assignment-expression
function-definition:
decl-specifier-seqopt declarator function-body decl-specifier-seqopt declarator = default ; decl-specifier-seqopt declarator = delete ;
function-body:
ctor-initializeropt compound-statement function-try-block
initializer:
= initializer-clause
( expression-list )
initializer-clause: assignment-expression
{ initializer-list ,opt } {}
initializer-list: initializer-clause ...opt
A.8 Classes
￼initializer-list , initializer-clause ...opt A.8 Classes
class-name: identifier
simple-template-id class-specifier:
class-head { member-specificationopt }
class-head:
class-key identifieropt base-clauseopt
class-key nested-name-specifier identifier base-clauseopt
class-key nested-name-specifieropt simple-template-id base-clauseopt
[gram.class]
class-key:
     class
     struct
     union
member-specification:
member-declaration member-specificationopt access-specifier : member-specificationopt
Draft
A.9
Derived classes
Grammar summary 1136
￼A.9
[gram.derived]
A.10
[gram.special]
member-declaration:
decl-specifier-seqopt member-declarator-listopt ; function-definition ;opt
::opt nested-name-specifier templateopt using-declaration
static_assert-declaration
template-declaration
member-declarator-list: member-declarator
member-declarator-list , member-declarator
member-declarator:
declarator pure-specifieropt
declarator constant-initializeropt identifieropt : constant-expression
pure-specifier:
=0
constant-initializer:
= constant-expression
Derived classes
base-clause:
: base-specifier-list
base-specifier-list: base-specifier ...opt
base-specifier-list , base-specifier ...opt
base-specifier:
::opt nested-name-specifieropt class-name
virtual access-specifieropt ::opt
nested-name-specifieropt class-name nested-name-specifieropt class-name
access-specifier virtualopt
access-specifier:
     private
     protected
     public
Special member functions
::opt
conversion-function-id:
operator conversion-type-id
conversion-type-id:
type-specifier-seq conversion-declaratoropt
conversion-declarator:
ptr-operator conversion-declaratoropt
ctor-initializer:
: mem-initializer-list
unqualified-id ;
Draft
1137
Grammar summary
mem-initializer-list: mem-initializer ...opt
mem-initializer , mem-initializer-list ...opt mem-initializer:
mem-initializer-id ( expression-listopt )
mem-initializer-id:
::opt nested-name-specifieropt class-name identifier
A.11
Overloading
￼A.11 Overloading
operator-function-id: operator operator
[gram.over]
operator: one of
new delete new[]
delete[] +-*/%^&|∼
! = < > += -= *= /= %= ^= &= |= << >> >>= <<= == != <= >= && || ++ -- , ->* -> () []
A.12 Templates
template-declaration:
exportopt template < template-parameter-list > declaration
template-parameter-list: template-parameter
template-parameter-list , template-parameter
template-parameter: type-parameter
parameter-declaration
type-parameter:
class ...opt identifieropt
class identifieropt = type-id
typename ...opt identifieropt
typename identifieropt = type-id
template < template-parameter-list > class ...opt identifieropt template < template-parameter-list > class identifieropt = id-expression
simple-template-id:
template-name < template-argument-listopt >
template-id: simple-template-id
operator-function-id < template-argument-listopt >
[gram.temp]
template-name: identifier
Draft
A.13
Exception handling
template-argument-list: template-argument ...opt
template-argument-list , template-argument ...opt
template-argument: constant-expression
Grammar summary 1138
￼A.13
explicit-instantiation:
externopt template declaration
explicit-specialization:
template < > declaration
Exception handling
try-block:
try compound-statement handler-seq
function-try-block:
try ctor-initializeropt compound-statement handler-seq
handler-seq:
handler handler-seqopt
handler:
catch ( exception-declaration ) compound-statement
[gram.except]
A.14
exception-declaration:
type-specifier-seq declarator type-specifier-seq abstract-declarator type-specifier-seq
...
throw-expression:
throw assignment-expressionopt
exception-specification:
throw ( type-id-listopt )
type-id-list:
type-id ...opt
type-id-list , type-id ...opt Preprocessing directives
preprocessing-file: groupopt
group: group-part
group group-part
[gram.cpp]
type-id id-expression
typename-specifier: typename ::opt typename ::opt
nested-name-specifier identifier nested-name-specifier templateopt
simple-template-id
Draft
1139
Grammar summary
group-part: if-section
control-line text-line
# non-directive
if-section:
if-group elif-groupsopt
if-group:
     # if
     # ifdef
     # ifndef
elif-groups: elif-group
A.14 Preprocessing directives
￼elif-groups elif-group elif-group:
# elif
else-group:
# else
endif-line:
# endif
control-line:
     # include
     # define
     # define
     # define
     # define
     # undef
# line
# error
# pragma # new-line
constant-expression new-line groupopt new-line groupopt
new-line
pp-tokens new-line
identifier replacement-list new-line
identifier lparen identifier-listopt ) replacement-list new-line identifier lparen ... ) replacement-list new-line
else-groupopt
endif-line
constant-expression new-line groupopt identifier new-line groupopt
identifier new-line groupopt
identifier lparen identifier-list, ... identifier new-line
pp-tokens new-line
pp-tokensopt new-line pp-tokensopt new-line
) replacement-list new-line
text-line:
pp-tokensopt new-line
non-directive:
pp-tokensopt new-line
lparen:
a ( character not immediately preceded by white-space
identifier-list: identifier
identifier-list , identifier
replacement-list: pp-tokensopt
Draft
A.14
Preprocessing directives
pp-tokens: preprocessing-token
pp-tokens preprocessing-token
new-line:
the new-line character
Grammar summary 1140