<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cmof="http://schema.omg.org/spec/MOF/2.0/cmof.xml">
	<cmof:Package xmi:id="_0" name="SPEM">
		<ownedComment xmi:type="cmof:Comment" xmi:id="_ownedComment.0" annotatedElement="_0">
			<body>See FTF report for changes since adoption.&#xD;</body>
		</ownedComment>
		<ownedMember xmi:type="cmof:Package" xmi:id="ManagedContent" name="ManagedContent">
			<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-_ownedComment.0" annotatedElement="ManagedContent">
				<body>Development processes are in many cases not only represented as models, but documented and managed as natural language descriptions.  For many software development approaches and methods human consumable documentation providing understandable guidance for best development practices is more important than precise models.  In other words, the practicality of techniques and methods expressed with these practices is in many cases perceived to provide higher value than strict obedience to a formally defined process.  The reasons for this are that many development approaches see software development rather as a creative process that requires constant reevaluation and adoption than a strict sequence of activities.  For example, for modern agile development teams, best practices of software development are communicated through mentoring and short practice descriptions in white paper format, rather than formally defined models.  They assume certain values and a development culture that cannot be formalized with models, but can only be captured in natural language documentation. The Managed Content meta-model package introduced concepts for managing the textual content of such descriptions.  These concepts can either be used standalone or in combination with process structure concepts.  For example, a SPEM 2.0 based process could be solely comprised of a set of instances of the guidance meta-class defining development best practices in whitepaper format. It could also be comprised of a combination of these guidance elements with a process structure using relationships defined in the Managed Content meta-model package that allows associating guidance elements with process structure elements.</body>
			</ownedComment>
			<packageImport xmi:type="cmof:PackageImport" xmi:id="ManagedContent-_packageImport.0" importingNamespace="ManagedContent">
				<importedPackage xmi:type="cmof:Package" href="Infrastructure.cmof#Core-Constructs"/>
			</packageImport>
			<packageMerge xmi:type="cmof:PackageMerge" xmi:id="ManagedContent-_packageMerge.0" mergedPackage="Core" receivingPackage="ManagedContent"/>
			<ownedMember xmi:type="cmof:Class" xmi:id="ManagedContent-ContentDescription" name="ContentDescription">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-ContentDescription-_ownedComment.0" annotatedElement="ManagedContent-ContentDescription">
					<body>Content Description is a Class that is used to store the textual description for a Describable Element.  It defines standard attributes applicable for all Describable Element subtypes.&#xD;
Implementers of this specification can subclass Content Description to define their own matching Content Description subtypes that add user-defined description attributes to all instances of a specific Describable Element’s Content Description.  Additionally, user-defined attributes can be added to individual Content Description instances when the SPEM 2.0 meta-model is instantiated creating UML 2.0 attributes for the Content Description class accessible via the ownedAttribute inherited from Class.  Content Descriptions are typically localized using a resource allocation mechanism for its String type attributes.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ManagedContent-ContentDescription-presentationName" name="presentationName">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-ContentDescription-presentationName-_ownedComment.0" annotatedElement="ManagedContent-ContentDescription-presentationName">
						<body>Every Describable Element described by a Content Description has a name (inherited from Named Element in UML 2.0 Infrastructure), which is used for internal references of the element.  In addition to name every Describable Element can maintain a presentation name as part of the Content Description, which is the externally visible/published name of the element, which might be localized.</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-String"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ManagedContent-ContentDescription-briefDescription" name="briefDescription">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-ContentDescription-briefDescription-_ownedComment.0" annotatedElement="ManagedContent-ContentDescription-briefDescription">
						<body>Every Describable Element shall be briefly described with one or two sentences summarizing the element.</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-String"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ManagedContent-ContentDescription-mainDescription" name="mainDescription">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-ContentDescription-mainDescription-_ownedComment.0" annotatedElement="ManagedContent-ContentDescription-mainDescription">
						<body>This attribute stores the main descriptive text for the Describable Element.  All text that is not part of any of the more specific attributes shall be stored here.  If the description is divided into sections using the Section class, then only the text from the ‘head’ of the content description to the first section will be stored here (similar to a normal document where you can place text between its beginning and its first section heading).</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-String"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ManagedContent-ContentDescription-purpose" name="purpose">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-ContentDescription-purpose-_ownedComment.0" annotatedElement="ManagedContent-ContentDescription-purpose">
						<body>This attribute summarizes the main reason or rationale for having or performing this Describable Element as part of a Process or Method. It describes what is intended to be achieved with it and why the Process Practitioner should include it.</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-String"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ManagedContent-ContentDescription-section" name="section" type="ManagedContent-Section" isOrdered="true" upper="*" lower="0" isComposite="true" association="ManagedContent-A_contentDescription_section">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-ContentDescription-section-_ownedComment.0" annotatedElement="ManagedContent-ContentDescription-section">
						<body>A Content Description can optionally be structured into Sections.  This association is use to decompose the mainDescription attribute into a hierarchy of Sections.  Text stored in mainDescription when Sections are defined represents text presented before the first Section.</body>
					</ownedComment>
					<subsettedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-Namespace-ownedMember"/>
				</ownedAttribute>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Class"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ManagedContent-Guidance" name="Guidance" superClass="ManagedContent-DescribableElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-Guidance-_ownedComment.0" annotatedElement="ManagedContent-Guidance">
					<body>Guidance is a Describable Element that provides additional information related to Describable Elements.  The particular Guidance should be classified with Kinds (Section 8.2) that indicates a specific type of guidance for which perhaps a specific structure and type of content is assumed.  Examples for Kinds for Guidance are Guidelines, Templates, Checklists, Tool Mentors, Estimates, Supporting Materials, Reports, Concepts, etc.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ManagedContent-Category" name="Category" superClass="ManagedContent-DescribableElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-Category-_ownedComment.0" annotatedElement="ManagedContent-Category">
					<body>A Category is a Describable Element used to categorize, i.e. group any number of Describable Elements of any subtype based on user-defined criteria.  Because Categories are Describable Elements themselves they can be used to recursively categorize other Category instances as well.  Categories can also be nested using the subCategory association.&#xD;
Categories can be used to categorize content based on the user's criteria as well as to define whole tree-structures of nested categories allowing the user to systematically navigate and browse method content and processes based on these categories.  For example, one could create a Category to logically organize content relevant for the user's development organization departments; e.g. a &quot;Testing&quot; category that groups together all Roles, Work Products, Tasks, and Guidance elements relevant to testing.  Another example would be Categories that express licensing levels of the content, grouping freely distributable method content versus content that represents intellectual property and requires a purchased license for use.  Whereas Kinds are limited to one Kind instance per meta-model instance and stored as properties of the Extensible Element, Categories store the relationships to Describable Elements.  Describable Elements can be categorized by as many Categories as needed.  Categories can categorize Categories as well as well as can be hierarchical.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ManagedContent-Category-subCategory" name="subCategory" type="ManagedContent-Category" upper="*" lower="0" association="ManagedContent-A_category_subCategory"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ManagedContent-Category-categorizedElement" name="categorizedElement" type="ManagedContent-DescribableElement" upper="*" lower="0" association="ManagedContent-A_category_categorizedElement"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ManagedContent-DescribableElement" name="DescribableElement" isAbstract="true" superClass="Core-ExtensibleElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-DescribableElement-_ownedComment.0" annotatedElement="ManagedContent-DescribableElement">
					<body>Describable Element is a Extensible Element that represents an abstract generalization for all elements in SPEM 2.0 that can be documented with textual descriptions.  Examples for Describable Elements are Roles or Work Products, which have descriptive text associated that textually define the element as well as providing guidance on how to use it.&#xD;
Describable Element is the superclass for elements in Process Structure as well as Method Content for which concrete textual descriptions are being defined in the form of documenting attributes grouped in a matching Content Description instance.  Describable Elements are intended to be published in method or process publications.  Describable Element defines that the element it represents will have content ‘attached’ to it.  Content Description is the abstraction for the actual places in which the content is being represented.  This separation allows a distinction between core model elements describing the structure of the model from the actual description container providing, for example, the documentation of the Describable Element in different alternatives languages, audiences, licensing levels, etc.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ManagedContent-DescribableElement-guidance" name="guidance" type="ManagedContent-Guidance" upper="*" lower="0" association="ManagedContent-A_describableElement_guidance"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ManagedContent-DescribableElement-description" name="description" type="ManagedContent-ContentDescription" lower="0" isComposite="true" association="ManagedContent-A_describableElement_description">
					<subsettedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-Namespace-ownedMember"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ManagedContent-DescribableElement-metric" name="metric" type="ManagedContent-Metric" upper="*" lower="0" association="ManagedContent-A_describableElement_metric"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ManagedContent-ProcessElement" name="ProcessElement" isAbstract="true" superClass="ManagedContent-DescribableElement"/>
			<ownedMember xmi:type="cmof:Class" xmi:id="ManagedContent-Section" name="Section">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-Section-_ownedComment.0" annotatedElement="ManagedContent-Section">
					<body>A Section is a special Class that represents a structural subsection of a Content Description’s mainDescription attribute.  It is used for either large scale documentation of Describable Elements organized into sections as well as to flexibly add new Sections to Describable Elements using contribution variability added to the Section concept for Method Plug-ins.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ManagedContent-Section-sectionName" name="sectionName">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-Section-sectionName-_ownedComment.0" annotatedElement="ManagedContent-Section-sectionName">
						<body>This attributes stores the name or the header of the section.</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-String"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ManagedContent-Section-sectionDescription" name="sectionDescription">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-Section-sectionDescription-_ownedComment.0" annotatedElement="ManagedContent-Section-sectionDescription">
						<body>This attribute stores the description text for a Content Description’s Section.</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-String"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ManagedContent-Section-subSection" name="subSection" type="ManagedContent-Section" isOrdered="true" upper="*" lower="0" isComposite="true" association="ManagedContent-A_section_subSection">
					<subsettedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-Namespace-ownedMember"/>
				</ownedAttribute>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Class"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ManagedContent-Metric" name="Metric" superClass="ManagedContent-DescribableElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-Metric-_ownedComment.0" annotatedElement="ManagedContent-Metric">
					<body>A Metric is special Guidance that contains one or more constraints that provide measurements for any Describable Element. Because Metric is Guidance, different Kinds (Section 8.2) can be defined for Metrics to distinguish different groups of Metrics such as Productivity, Quality, or Scale.&#xD;
A Metric defines a standard measurement for instances of a Describable Element in SPEM 2.0.  For example, a process engineer can define Metrics for Work Definitions such as Activities (estimated effort in man hours), Metrics for Work Products (quality averages such as error per klocs), or Metrics for Roles (costs per hour; cost per delivered results). A Metric is documented with Content Descriptions associated to the Metric as well as formalized using instances of the UML 2.0 Constraint class. Metrics can be qualified with Kinds.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ManagedContent-Metric-expression" name="expression" upper="*" isComposite="true" association="ManagedContent-A_metric_expression">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-Metric-expression-_ownedComment.0" annotatedElement="ManagedContent-Metric-expression">
						<body>A Metric defines one or more Constraints.  The property subsets the inherited ownedRule property from UML 2.0 Infrastructure’s Namespace.</body>
					</ownedComment>
					<type xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-ValueSpecification"/>
					<subsettedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-Namespace-ownedMember"/>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ManagedContent-A_category_subCategory" name="A_category_subCategory" memberEnd="ManagedContent-A_category_subCategory-_ownedEnd.0 ManagedContent-Category-subCategory">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-A_category_subCategory-_ownedComment.0" annotatedElement="ManagedContent-A_category_subCategory">
					<body>A Category can have any number of Categories defined as sub-categories.  Therefore, one could define Categories as n-level hierarchies.  This relationship does not define a strict nesting, i.e. a Category can be a subcategory of many other Categories.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ManagedContent-A_category_subCategory-_ownedEnd.0" type="ManagedContent-Category" upper="*" lower="0" owningAssociation="ManagedContent-A_category_subCategory" association="ManagedContent-A_category_subCategory"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ManagedContent-A_describableElement_guidance" name="A_describableElement_guidance" memberEnd="ManagedContent-A_describableElement_guidance-_ownedEnd.0 ManagedContent-DescribableElement-guidance">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-A_describableElement_guidance-_ownedComment.0" annotatedElement="ManagedContent-A_describableElement_guidance">
					<body>A Describable Element can be related to many Guidance elements.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ManagedContent-A_describableElement_guidance-_ownedEnd.0" type="ManagedContent-DescribableElement" upper="*" lower="0" owningAssociation="ManagedContent-A_describableElement_guidance" association="ManagedContent-A_describableElement_guidance"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ManagedContent-A_describableElement_description" name="A_describableElement_description" memberEnd="ManagedContent-A_describableElement_description-_ownedEnd.0 ManagedContent-DescribableElement-description">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-A_describableElement_description-_ownedComment.0" annotatedElement="ManagedContent-A_describableElement_description">
					<body>A Describable Element can contain one Content Description element that stores textual descriptions for this Describable Element.</body>
				</ownedComment>
				<general xmi:type="cmof:Association" href="Infrastructure.cmof#Core-Constructs-A_ownedMember_namespace"/>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ManagedContent-A_describableElement_description-_ownedEnd.0" type="ManagedContent-DescribableElement" owningAssociation="ManagedContent-A_describableElement_description" association="ManagedContent-A_describableElement_description"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ManagedContent-A_category_categorizedElement" name="A_category_categorizedElement" memberEnd="ManagedContent-Category-categorizedElement ManagedContent-A_category_categorizedElement-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-A_category_categorizedElement-_ownedComment.0" annotatedElement="ManagedContent-A_category_categorizedElement">
					<body>A Category groups together any number of Describable Elements (including other Categories).</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ManagedContent-A_category_categorizedElement-_ownedEnd.0" type="ManagedContent-Category" upper="*" lower="0" owningAssociation="ManagedContent-A_category_categorizedElement" association="ManagedContent-A_category_categorizedElement"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ManagedContent-A_contentDescription_section" name="A_contentDescription_section" memberEnd="ManagedContent-A_contentDescription_section-_ownedEnd.0 ManagedContent-ContentDescription-section">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-A_contentDescription_section-_ownedComment.0" annotatedElement="ManagedContent-A_contentDescription_section">
					<body>A Content Description can optionally be structured into Sections.  This association is use to decompose the mainDescription attribute into a hierarchy of Sections.  Text stored in mainDescription when Sections are defined represents text presented before the first Section.</body>
				</ownedComment>
				<general xmi:type="cmof:Association" href="Infrastructure.cmof#Core-Constructs-A_ownedMember_namespace"/>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ManagedContent-A_contentDescription_section-_ownedEnd.0" type="ManagedContent-ContentDescription" owningAssociation="ManagedContent-A_contentDescription_section" association="ManagedContent-A_contentDescription_section"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ManagedContent-A_section_subSection" name="A_section_subSection" memberEnd="ManagedContent-Section-subSection ManagedContent-A_section_subSection-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-A_section_subSection-_ownedComment.0" annotatedElement="ManagedContent-A_section_subSection">
					<body>Sections can be further decomposed into n levels of sub-sections.</body>
				</ownedComment>
				<general xmi:type="cmof:Association" href="Infrastructure.cmof#Core-Constructs-A_ownedMember_namespace"/>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ManagedContent-A_section_subSection-_ownedEnd.0" type="ManagedContent-Section" owningAssociation="ManagedContent-A_section_subSection" association="ManagedContent-A_section_subSection"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ManagedContent-A_metric_expression" name="A_metric_expression" memberEnd="ManagedContent-Metric-expression ManagedContent-A_metric_expression-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ManagedContent-A_metric_expression-_ownedComment.0" annotatedElement="ManagedContent-A_metric_expression">
					<body>A Metric defines one or more Constraints.  The property subsets the inherited ownedRule property from UML 2.0 Infrastructure’s Namespace.</body>
				</ownedComment>
				<general xmi:type="cmof:Association" href="Infrastructure.cmof#Core-Constructs-A_ownedMember_namespace"/>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ManagedContent-A_metric_expression-_ownedEnd.0" type="ManagedContent-Metric" lower="0" owningAssociation="ManagedContent-A_metric_expression" association="ManagedContent-A_metric_expression"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ManagedContent-A_describableElement_metric" name="A_describableElement_metric" memberEnd="ManagedContent-DescribableElement-metric ManagedContent-A_describableElement_metric-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="ManagedContent-A_describableElement_metric-_ownedEnd.0" type="ManagedContent-DescribableElement" upper="*" lower="0" owningAssociation="ManagedContent-A_describableElement_metric" association="ManagedContent-A_describableElement_metric"/>
			</ownedMember>
		</ownedMember>
		<ownedMember xmi:type="cmof:Package" xmi:id="ProcessBehavior" name="ProcessBehavior">
			<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessBehavior-_ownedComment.0" annotatedElement="ProcessBehavior">
				<body>The concepts of the Process Structure package represent a process as a static breakdown structure allowing nesting of activities and defining predecessor dependencies amongst them.  The Process Behavior meta-model package allows extending these structures with behavioral models. However, it does not define it own behavior modeling approach, but rather provides 'links' to existing externally defined behavior models enabling reuse of these approaches from other OMG or third party specifications.  For example, a process defined with the Process Structure concepts can be linked to UML 2 Activity diagrams that represent the behavior of such process.  Such process models can utilize the SPEM UML 2 Profile for a consistent presentation for such UML 2 models in addition to the 'links' defined in this Process Behavior meta-model package.</body>
			</ownedComment>
			<packageImport xmi:type="cmof:PackageImport" xmi:id="ProcessBehavior-_packageImport.0" importingNamespace="ProcessBehavior">
				<importedPackage xmi:type="cmof:Package" href="Infrastructure.cmof#Core-Constructs"/>
			</packageImport>
			<packageMerge xmi:type="cmof:PackageMerge" xmi:id="ProcessBehavior-_packageMerge.0" mergedPackage="ProcessStructure" receivingPackage="ProcessBehavior"/>
			<packageMerge xmi:type="cmof:PackageMerge" xmi:id="ProcessBehavior-_packageMerge.1" mergedPackage="MethodContent" receivingPackage="ProcessBehavior"/>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessBehavior-A_externalReference_element" name="A_externalReference_element" memberEnd="ProcessBehavior-ExternalReference-reference ProcessBehavior-A_externalReference_element-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessBehavior-A_externalReference_element-_ownedEnd.0" visibility="private" type="ProcessBehavior-ExternalReference" upper="*" lower="0" owningAssociation="ProcessBehavior-A_externalReference_element" association="ProcessBehavior-A_externalReference_element"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessBehavior-State_ext" name="State_ext" superClass="ProcessBehavior-ExternalReference">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessBehavior-State_ext-_ownedComment.0" annotatedElement="ProcessBehavior-State_ext">
					<body>The State_ext represents a reference to a model class in an external behavior model representing a state.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessBehavior-Transition_ext" name="Transition_ext" superClass="ProcessBehavior-ExternalReference">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessBehavior-Transition_ext-_ownedComment.0" annotatedElement="ProcessBehavior-Transition_ext">
					<body>The Transition_ext represents a reference to a model class in an external behavior model representing a transition between states.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessBehavior-ControlFlow_ext" name="ControlFlow_ext" superClass="ProcessBehavior-ExternalReference">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessBehavior-ControlFlow_ext-_ownedComment.0" annotatedElement="ProcessBehavior-ControlFlow_ext">
					<body>The ControlFlow_ext represents a reference to a model class in an external behavior model representing a control flow.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessBehavior-Activity_ext" name="Activity_ext" superClass="ProcessBehavior-ExternalReference">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessBehavior-Activity_ext-_ownedComment.0" annotatedElement="ProcessBehavior-Activity_ext">
					<body>The Activity_ext represents a reference to a model class in an external behavior model representing a definition of behavior.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessBehavior-WorkSequence" name="WorkSequence">
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessBehavior-WorkSequence-workSequenceContext" name="workSequenceContext" type="ProcessBehavior-ControlFlow_ext" upper="*" lower="0" association="ProcessBehavior-A_workSequence_controlFlowContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessBehavior-RoleUse" name="RoleUse">
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessBehavior-RoleUse-roleUseContext" name="roleUseContext" type="ProcessBehavior-Transition_ext" upper="*" lower="0" association="ProcessBehavior-A_roleUse_transitionContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessBehavior-WorkProductUse" name="WorkProductUse">
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessBehavior-WorkProductUse-workProductUseContext" name="workProductUseContext" type="ProcessBehavior-State_ext" upper="*" lower="0" association="ProcessBehavior-A_workProductUse_stateContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessBehavior-WorkDefinition" name="WorkDefinition" isAbstract="true">
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessBehavior-WorkDefinition-workDefinitionActivtyContext" name="workDefinitionActivtyContext" type="ProcessBehavior-Activity_ext" upper="*" lower="0" association="ProcessBehavior-A_workDefinition_activityContext"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessBehavior-WorkDefinition-workDefinitionTransitionContext" name="workDefinitionTransitionContext" type="ProcessBehavior-Transition_ext" upper="*" lower="0" association="ProcessBehavior-A_workDefinition_transisitonContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessBehavior-ExternalReference" name="ExternalReference" isAbstract="true">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessBehavior-ExternalReference-_ownedComment.0" annotatedElement="ProcessBehavior-ExternalReference">
					<body>External Reference is a Classifier that represents an abstract generalization of all classes representing references to external behavior models.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessBehavior-ExternalReference-reference" name="reference" upper="*" association="ProcessBehavior-A_externalReference_element">
					<type xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Element"/>
				</ownedAttribute>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Classifier"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessBehavior-A_workDefinitionParameter_exitState" name="A_workDefinitionParameter_exitState" memberEnd="ProcessBehavior-A_workDefinitionParameter_exitState-_ownedEnd.0 ProcessBehavior-WorkDefinitionParameter-exitState">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessBehavior-A_workDefinitionParameter_exitState-_ownedComment.0" annotatedElement="ProcessBehavior-A_workDefinitionParameter_exitState">
					<body>Given that an instance of Work Product Definition or Work Product Use has been specified as output for a specific Work Definition, then the Exist State attribute specifies the desired state of instances of the referenced work product instances when work on the Work Definition is finished.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessBehavior-A_workDefinitionParameter_exitState-_ownedEnd.0" type="ProcessBehavior-WorkDefinitionParameter" lower="0" owningAssociation="ProcessBehavior-A_workDefinitionParameter_exitState" association="ProcessBehavior-A_workDefinitionParameter_exitState"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessBehavior-A_workDefinitionParameter_entryState" name="A_workDefinitionParameter_entryState" memberEnd="ProcessBehavior-A_workDefinitionParameter_entryState-_ownedEnd.0 ProcessBehavior-WorkDefinitionParameter-entryState">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessBehavior-A_workDefinitionParameter_entryState-_ownedComment.0" annotatedElement="ProcessBehavior-A_workDefinitionParameter_entryState">
					<body>Given that an instance of Work Product Definition or Work Product Use has been specified as an input for a specific Work Definition, then the Entry State attribute specifies the desired state of instances of the referenced work product instance when work on the Work Definition is initiated.&#xD;
For some Work Products Definition or Uses, state is expressed in percentage of completion, compliance to work product checklist, informal state descriptions, etc. Others have very specific states expressed as enumerations such as [identified, briefly described, outlined, detailed] for use cases. Other Work Product states relate to some quality measures or lifecycle states such as [reviewed, implemented, tested].</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessBehavior-A_workDefinitionParameter_entryState-_ownedEnd.0" type="ProcessBehavior-WorkDefinitionParameter" lower="0" owningAssociation="ProcessBehavior-A_workDefinitionParameter_entryState" association="ProcessBehavior-A_workDefinitionParameter_entryState"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessBehavior-A_workProductUse_stateContext" name="A_workProductUse_stateContext" memberEnd="ProcessBehavior-WorkProductUse-workProductUseContext ProcessBehavior-A_workProductUse_stateContext-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessBehavior-A_workProductUse_stateContext-_ownedEnd.0" type="ProcessBehavior-WorkProductUse" lower="0" owningAssociation="ProcessBehavior-A_workProductUse_stateContext" association="ProcessBehavior-A_workProductUse_stateContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessBehavior-A_workDefinition_transisitonContext" name="A_workDefinition_transisitonContext" memberEnd="ProcessBehavior-WorkDefinition-workDefinitionTransitionContext ProcessBehavior-A_workDefinition_transisitonContext-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessBehavior-A_workDefinition_transisitonContext-_ownedEnd.0" type="ProcessBehavior-WorkDefinition" lower="0" owningAssociation="ProcessBehavior-A_workDefinition_transisitonContext" association="ProcessBehavior-A_workDefinition_transisitonContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessBehavior-A_roleUse_transitionContext" name="A_roleUse_transitionContext" memberEnd="ProcessBehavior-RoleUse-roleUseContext ProcessBehavior-A_roleUse_transitionContext-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessBehavior-A_roleUse_transitionContext-_ownedEnd.0" type="ProcessBehavior-RoleUse" lower="0" owningAssociation="ProcessBehavior-A_roleUse_transitionContext" association="ProcessBehavior-A_roleUse_transitionContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessBehavior-A_workSequence_controlFlowContext" name="A_workSequence_controlFlowContext" memberEnd="ProcessBehavior-WorkSequence-workSequenceContext ProcessBehavior-A_workSequence_controlFlowContext-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessBehavior-A_workSequence_controlFlowContext-_ownedEnd.0" type="ProcessBehavior-WorkSequence" owningAssociation="ProcessBehavior-A_workSequence_controlFlowContext" association="ProcessBehavior-A_workSequence_controlFlowContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessBehavior-A_workDefinition_activityContext" name="A_workDefinition_activityContext" memberEnd="ProcessBehavior-WorkDefinition-workDefinitionActivtyContext ProcessBehavior-A_workDefinition_activityContext-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessBehavior-A_workDefinition_activityContext-_ownedEnd.0" type="ProcessBehavior-WorkDefinition" owningAssociation="ProcessBehavior-A_workDefinition_activityContext" association="ProcessBehavior-A_workDefinition_activityContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessBehavior-WorkProductDefinition" name="WorkProductDefinition">
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessBehavior-WorkProductDefinition-workProductDefinitionContext" name="workProductDefinitionContext" visibility="public" type="ProcessBehavior-State_ext" upper="*" lower="0" association="ProcessBehavior-A_workProductDefinition_stateContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessBehavior-RoleDefinition" name="RoleDefinition">
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessBehavior-RoleDefinition-roleDefinitionContext" name="roleDefinitionContext" visibility="public" type="ProcessBehavior-Transition_ext" lower="0" association="ProcessBehavior-A_roleDefinition_transitionContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessBehavior-WorkDefinitionParameter" name="WorkDefinitionParameter">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessBehavior-WorkDefinitionParameter-_ownedComment.0" annotatedElement="ProcessBehavior-WorkDefinitionParameter">
					<body>This package extends the Work Definition Parameter class introduced in the Core package with associations to entry and/or exist states for its Work Product Use or Work Definition parameter values.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessBehavior-WorkDefinitionParameter-exitState" name="exitState" type="ProcessBehavior-State_ext" upper="*" lower="0" isComposite="true" association="ProcessBehavior-A_workDefinitionParameter_exitState">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessBehavior-WorkDefinitionParameter-exitState-_ownedComment.0" annotatedElement="ProcessBehavior-WorkDefinitionParameter-exitState">
						<body>Given that an instance of Work Product Use has been specified as output for a specific Activity, then the Activity Exist State attribute specifies the desired state of instances of the referenced Work Product Use instances when work on the Activity is finished.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessBehavior-WorkDefinitionParameter-entryState" name="entryState" type="ProcessBehavior-State_ext" upper="*" lower="0" isComposite="true" association="ProcessBehavior-A_workDefinitionParameter_entryState">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessBehavior-WorkDefinitionParameter-entryState-_ownedComment.0" annotatedElement="ProcessBehavior-WorkDefinitionParameter-entryState">
						<body>Given that an instance of Work Product Use has been specified as an input for a specific Activity, then the Activity Entry State attribute specifies the desired state of instances of the referenced Work Product Use instance when work on the Activity is initiated.  &#xD;
For some Work Products Uses state is expressed in percentage of completion, compliance to work product checklist, informal state descriptions, etc.  Others have very specific states expressed as enumerations such as [identified, briefly described, outlined, detailed] for use cases.  Other Work Product states relate to some quality measures or lifecycle states such as [reviewed, implemented, tested].</body>
					</ownedComment>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessBehavior-A_workProductDefinition_stateContext" name="A_workProductDefinition_stateContext" memberEnd="ProcessBehavior-WorkProductDefinition-workProductDefinitionContext ProcessBehavior-A_workProductDefinition_stateContext-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessBehavior-A_workProductDefinition_stateContext-_ownedEnd.0" name="" visibility="private" type="ProcessBehavior-WorkProductDefinition" lower="0" owningAssociation="ProcessBehavior-A_workProductDefinition_stateContext" association="ProcessBehavior-A_workProductDefinition_stateContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessBehavior-A_roleDefinition_transitionContext" name="A_roleDefinition_transitionContext" memberEnd="ProcessBehavior-RoleDefinition-roleDefinitionContext ProcessBehavior-A_roleDefinition_transitionContext-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessBehavior-A_roleDefinition_transitionContext-_ownedEnd.0" name="" visibility="private" type="ProcessBehavior-RoleDefinition" upper="*" lower="0" owningAssociation="ProcessBehavior-A_roleDefinition_transitionContext" association="ProcessBehavior-A_roleDefinition_transitionContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessBehavior-Default_ResponsibilityAssignment" name="Default_ResponsibilityAssignment">
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessBehavior-Default_ResponsibilityAssignment-defaultResponsibilityContext" name="defaultResponsibilityContext" visibility="public" type="ProcessBehavior-State_ext" upper="*" lower="0" association="ProcessBehavior-A_defaultResponsibilityAssignment_stateContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessBehavior-ProcessResponsibilityAssignment" name="ProcessResponsibilityAssignment">
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessBehavior-ProcessResponsibilityAssignment-processResponsibilityContext" name="processResponsibilityContext" visibility="public" type="ProcessBehavior-State_ext" upper="*" lower="0" association="ProcessBehavior-A_processResponsibilityAssignment_stateContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessBehavior-A_defaultResponsibilityAssignment_stateContext" name="A_defaultResponsibilityAssignment_stateContext" memberEnd="ProcessBehavior-Default_ResponsibilityAssignment-defaultResponsibilityContext ProcessBehavior-A_defaultResponsibilityAssignment_stateContext-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessBehavior-A_defaultResponsibilityAssignment_stateContext-_ownedEnd.0" name="" visibility="private" type="ProcessBehavior-Default_ResponsibilityAssignment" lower="0" owningAssociation="ProcessBehavior-A_defaultResponsibilityAssignment_stateContext" association="ProcessBehavior-A_defaultResponsibilityAssignment_stateContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessBehavior-A_processResponsibilityAssignment_stateContext" name="A_processResponsibilityAssignment_stateContext" memberEnd="ProcessBehavior-ProcessResponsibilityAssignment-processResponsibilityContext ProcessBehavior-A_processResponsibilityAssignment_stateContext-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessBehavior-A_processResponsibilityAssignment_stateContext-_ownedEnd.0" name="" visibility="private" type="ProcessBehavior-ProcessResponsibilityAssignment" lower="0" owningAssociation="ProcessBehavior-A_processResponsibilityAssignment_stateContext" association="ProcessBehavior-A_processResponsibilityAssignment_stateContext"/>
			</ownedMember>
		</ownedMember>
		<ownedMember xmi:type="cmof:Package" xmi:id="ProcessStructure" name="ProcessStructure">
			<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-_ownedComment.0" annotatedElement="ProcessStructure">
				<body>This package defines the base for all process models.  It supports the creation of simple and flexible process models.  Its core data structure is a breakdown or decomposition of nested Activities that maintain lists of references to performing Role classes as well as input and output Work Product classes for each Activity.  In addition it provides mechanism for process reuse such as the dynamic binding of process patterns that allow users assembling processes with sets of dynamically linked Activities.  These structures are used to represent high-level and basic processes that are not textually documented and ideal for the ad-hoc assembly of processes especially the representation of agile processes and self-organizing team approaches.</body>
			</ownedComment>
			<packageImport xmi:type="cmof:PackageImport" xmi:id="ProcessStructure-_packageImport.0" importingNamespace="ProcessStructure">
				<importedPackage xmi:type="cmof:Package" href="Infrastructure.cmof#Core-Constructs"/>
			</packageImport>
			<packageMerge xmi:type="cmof:PackageMerge" xmi:id="ProcessStructure-_packageMerge.0" mergedPackage="Core" receivingPackage="ProcessStructure"/>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessStructure-ProcessElement" name="ProcessElement" isAbstract="true" superClass="Core-ExtensibleElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-ProcessElement-_ownedComment.0" annotatedElement="ProcessStructure-ProcessElement">
					<body>Process Elements is an Extensible Element that represents abstract generalization for all elements that are part of a SPEM 2.0 Process.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessStructure-BreakdownElement" name="BreakdownElement" isAbstract="true" superClass="ProcessStructure-ProcessElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-BreakdownElement-_ownedComment.0" annotatedElement="ProcessStructure-BreakdownElement">
					<body>Breakdown Element is an abstract generalization for any type of Process Element that is part of a breakdown structure.  It defines a set of properties available to all of its specializations.  Any of its concrete subclasses can be ‘placed inside’ an Activity (via the nested Breakdown Element association) to become part of a breakdown of Activities as well as the Activities namespace.  As Activities are Breakdown Elements themselves and therefore can be nested inside other activities, an n-level breakdown structure is defined by n nested Activities.  In addition to Activities other Breakdown Elements can be nested inside Activities as leaf elements of the breakdown.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-BreakdownElement-hasMultipleOccurrences" name="hasMultipleOccurrences" default="false">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-BreakdownElement-hasMultipleOccurrences-_ownedComment.0" annotatedElement="ProcessStructure-BreakdownElement-hasMultipleOccurrences">
						<body>The hasMultipleOccurrences attribute expresses that if set to ‘true’ then when the process is enacted that the respective Breakdown Element typically will occur in more than one instance (i.e. more than one instance for the Breakdown Element instance).&#xD;
This might provide important guidance for creating plans from a Process.  For example, a Work Definition such as “Detail Use Case” would be performed for every use case identified for a particular Iteration or Activity.  Generating a plan would list one Work Definition instance per use case each listing a different use case instance as the input/output.  In contrast to the isRepeatable attribute defined for Work Breakdown Element the hasMultipleOccurrences attribute does not assume any dependencies amongst the occurrences of the Breakdown Element.  For example, the “Detail Use Case” Work Definition occurrences mentioned above can be performed in parallel as well as one after the other.</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-BreakdownElement-isOptional" name="isOptional" default="false">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-BreakdownElement-isOptional-_ownedComment.0" annotatedElement="ProcessStructure-BreakdownElement-isOptional">
						<body>The isOptional attribute indicates that the Breakdown Element describes work, a work product, or even work performer, which inclusion is not mandatory when performing a project that is planned based on a process containing this element.</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessStructure-Activity" name="Activity" superClass="Core-WorkDefinition ProcessStructure-WorkBreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-Activity-_ownedComment.0" annotatedElement="ProcessStructure-Activity">
					<body>An Activity is a Work Breakdown Element and Work Definition that defines basic units of work within a Process. It relates to Work Product Use instances via instances of the Process Parameter class and Role Use instances via Process Performer instances.&#xD;
Activity supports the nesting and logical grouping of related Breakdown Elements forming breakdown structures.  The concrete breakdown structure an Activity defines (i.e. its contained elements) can be reused by another Activity via the used Activity association, which allows the second Activity to inherit its complete sub-structure.&#xD;
Activity is a concrete Work Definition that represents a general unit of work assignable to specific performers represented by Role Use.  An Activity can rely on inputs and produce outputs represented by Work Product Uses.  Activity also represents a grouping element for other Breakdown Elements such as Activities, Method Content Uses, Milestones, etc.  It is not per-se a ‘high-level’ grouping of only work as in other meta-models, but groups any kind of Breakdown Elements.  For example, one can define valid Activities that group only Work Product Uses without any matching Role Uses or Parameters.  Such a structure expresses the information that the Activity requires work on these Work Products, without specifying how and who providing the flexibility required for modeling partial or Agile processes. Activity instances can inherit, contribute, or replace properties from other reused activities.  The semantics for the three kinds of reuse defined are specified for Activity Use Kind.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-Activity-useKind" name="useKind" type="ProcessStructure-ActivityUseKind" default="na">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-Activity-useKind-_ownedComment.0" annotatedElement="ProcessStructure-Activity-useKind">
						<body>This attribute is set to a value of the enumeration Activity Use Kind other than its default &quot;na&quot; when the Activity instance is associated to another Activity via the useActivity association for reuse. The value of the attribute of the Activity of the to-many end defines the semantics of the association according to the definitions in Activity Use Kind.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-Activity-nestedBreakdownElement" name="nestedBreakdownElement" type="ProcessStructure-BreakdownElement" isOrdered="true" upper="*" lower="0" isComposite="true" association="ProcessStructure-A_activity_nestedBreakdownElement">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-Activity-nestedBreakdownElement-_ownedComment.0" annotatedElement="ProcessStructure-Activity-nestedBreakdownElement">
						<body>This association represents breakdown structure nesting.  It defines an n-level hierarchy of Activities grouping together other Breakdown Elements such as other Activities, Milestones, etc.</body>
					</ownedComment>
					<subsettedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-Namespace-ownedMember"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-Activity-usedActivity" name="usedActivity" type="ProcessStructure-Activity" lower="0" association="ProcessStructure-A_activity_usedActivity">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-Activity-usedActivity-_ownedComment.0" annotatedElement="ProcessStructure-Activity-usedActivity">
						<body>This association defines a reuse generalization for Activities according to the semantics defined for Activity Use Kind. Activity instances on the to-many end of the association can reuse properties of the Activity instance on the to-one end (base) of the association.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-Activity-ownedProcessParameter" name="ownedProcessParameter" type="ProcessStructure-ProcessParameter" isOrdered="true" upper="*" lower="0" isComposite="true" subsettedProperty="Core-WorkDefinition-ownedParameter" association="ProcessStructure-A_activity_ownedParameter">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-Activity-ownedProcessParameter-_ownedComment.0" annotatedElement="ProcessStructure-Activity-ownedProcessParameter">
						<body>The association property subsets the ownedWorkDefinitionParamter of Work Definition.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-Activity-suppressedBreakdownElement" name="suppressedBreakdownElement" type="ProcessStructure-BreakdownElement" upper="*" lower="0" association="ProcessStructure-A_activity_suppressedBreakdownElement">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-Activity-suppressedBreakdownElement-_ownedComment.0" annotatedElement="ProcessStructure-Activity-suppressedBreakdownElement">
						<body>The suppressed association allows hiding any Breakdown Element from the interpretation of a process structure.  It is used in combination with the usedActivity association for elements that are inherited by usedActivity.  The reusing activity can define its own local elements that refer to the base activity’s element to denote the suppression (see Activity Use for more details).</body>
					</ownedComment>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessStructure-Milestone" name="Milestone" superClass="ProcessStructure-WorkBreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-Milestone-_ownedComment.0" annotatedElement="ProcessStructure-Milestone">
					<body>A Milestone describes a significant event in a development project, such as a major decision, completion of a deliverable, or meeting of a major dependency (like completion of a project phase).  Because, Milestone is commonly used to refer to both the event itself and the point in time at which the event is scheduled to happen, it is modeled as a Breakdown Element (i.e. it appears as part of a breakdown structure).</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-Milestone-requiredResults" name="requiredResults" type="ProcessStructure-WorkProductUse" upper="*" lower="0" association="ProcessStructure-A_milestone_requiredResults"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessStructure-RoleUse" name="RoleUse" superClass="ProcessStructure-BreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-RoleUse-_ownedComment.0" annotatedElement="ProcessStructure-RoleUse">
					<body>A Role Use is a special Breakdown Element that either represents a performer of an Activity or a participant of the Activity.  If it is a performer the Role Use and Activity need to be related via a Process Performer.  If it is a participant then the Role Use is stored in the nestedBreakdownElement composition of the Activity and might be used by one of the sub-activities as a performer and/or a Process Responsibility Assignment.  Role Uses are only valid within and specific to the context of an Activity and not to be reused across activities.&#xD;
A Role Use represents an activity specific occurrence of an activity performer or participant.  A Role Use is an Activity specific object and not a general reusable definition of an organizational role. (The meta-model package Method Content defines a concepts call Role Definition for that).  A Role Use represents the occurrence of a real person performing activity-specific work and having activity-specific responsibilities.  A Role Use participant stored with an Activity can be only accessed and reused by the Activity’s sub-Activities and not by any parent or sibling Activities in the Activity breakdown structure.  This scoping of Role Use in the local namespace of Activities allows to model different Performers as well as different Responsibility Assignments for every Activity, which reflects the fact that work product responsibilities and performance of activities might change throughout the development lifecycle.  In other words, Role Use instances with the same name can be created in different Activities, which all have different responsibilities and perform different work.&#xD;
Many processes do not comprise of Role Definitions and just define the occurrence of a role and imply that all team members know what the Role Use represents (e.g. by just interpreting the Role Use name).  In these situations fitting individuals for the Role Uses are assigned when the process is enacted.  Assigning Role Uses in such a way is also often referred to as ‘self-organizing’ teams in which team members choose by themselves or via their managers which roles they play during development.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessStructure-WorkProductUse" name="WorkProductUse" superClass="ProcessStructure-BreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-WorkProductUse-_ownedComment.0" annotatedElement="ProcessStructure-WorkProductUse">
					<body>A Work Product Use is a special Breakdown Element that either represents an input and/or output type for an Activity or represents a general participant of the Activity.  If it is an input/output then the Work Product Use needs to be related to the Activity via the Process Parameter class.  If it is a participant then the Work Product Use is stored in the nestedBreakdownElement composition of the Activity and might be used by one of the sub-activities as an input/output and/or be related to a Role Use via a Process Responsibility Assignment.  Role Use instances are only valid within and specific to the context of an Activity and not to be reused across activities.&#xD;
A Work Product Use represents an activity specific occurrence of a Work Product input/output type or an Activity participant.  A Work Product Use instance is an Activity specific object and not a general reusable definition of a work product. (The meta-model package Method Content defines a concepts call Work Product Definition for that).  A Work Product Use represents the occurrence of a real Work Product in the context of an activity.   A Work Product Use participant stored with an Activity can only be accessed and reused by the Activity’s sub-Activities and not by any parent or sibling Activities in the Activity breakdown structure.  This scoping of Work Product Use in the local namespace of Activities allows to model different Responsibility Assignments for every Activity, which reflects the fact that work product responsibilities might change throughout the development lifecycle.  In other words, Role Use instances with the same name can be created in different Activities, which all have different Work Product Use responsibilities.&#xD;
Many processes do not comprise of Work Product Definitions and just define the occurrence of a work product and imply that all team members know what the Work Product Use represents (e.g. by just interpreting the Work Product Use name).  For example a process might define that Stakeholder Requests need to be captured, but does not formally define what a Stakeholder Request is nor prescribes any templates or forms for them.  Team members could choose by themselves which form of representation they choose as well as shift responsibilities for the Work Product during the lifecycle phases (i.e. activities).</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessStructure-WorkSequence" name="WorkSequence" superClass="ProcessStructure-BreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-WorkSequence-_ownedComment.0" annotatedElement="ProcessStructure-WorkSequence">
					<body>Work Sequence is a Breakdown Element that represents a relationship between two Work Breakdown Elements in which one Work Breakdown Elements depends on the start or finish of another Work Breakdown Elements in order to begin or end.&#xD;
The Work Sequence class defines predecessor and successor relations amongst Work Breakdown Elements.  This information is in particular critical for use of the process in planning applications.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-WorkSequence-linkKind" name="linkKind" type="ProcessStructure-WorkSequenceKind" default="finishToStart">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-WorkSequence-linkKind-_ownedComment.0" annotatedElement="ProcessStructure-WorkSequence-linkKind">
						<body>This attribute expresses the type of the Work Sequence relationship by assigning a value from the Work Sequence Kind enumeration.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-WorkSequence-successor" name="successor" type="ProcessStructure-WorkBreakdownElement" association="ProcessStructure-A_successor_linkToPredecessor"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-WorkSequence-predecessor" name="predecessor" type="ProcessStructure-WorkBreakdownElement" association="ProcessStructure-A_predecessor_linkToSuccessor"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessStructure-WorkBreakdownElement" name="WorkBreakdownElement" isAbstract="true" superClass="ProcessStructure-BreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-WorkBreakdownElement-_ownedComment.0" annotatedElement="ProcessStructure-WorkBreakdownElement">
					<body>A Work Breakdown Element is a special Breakdown Element that provides specific properties for Breakdown Elements that represent work.  The properties are specific to breakdown structures and do not apply to all Work Definition subclasses, though.&#xD;
Work Breakdown Element represents a work specific breakdown element to be used in a work breakdown structure.&#xD;
</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-WorkBreakdownElement-linkToPredecessor" name="linkToPredecessor" type="ProcessStructure-WorkSequence" upper="*" lower="0" association="ProcessStructure-A_successor_linkToPredecessor"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-WorkBreakdownElement-linkToSuccessor" name="linkToSuccessor" type="ProcessStructure-WorkSequence" upper="*" lower="0" association="ProcessStructure-A_predecessor_linkToSuccessor"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-WorkBreakdownElement-isRepeatable" name="isRepeatable" default="false">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-WorkBreakdownElement-isRepeatable-_ownedComment.0" annotatedElement="ProcessStructure-WorkBreakdownElement-isRepeatable">
						<body>This attribute is used to define repetition of work, e.g. iterations.  A Work Breakdown Element with this attribute set to True shall be repeated more than once on the same set of artifacts.  For example, if one wants to model that a specific Activity instance shall represent an iteration in a process then this attribute shall be set to true indicating that the Activity and therefore all of its sub-Activities will be performed more than once.&#xD;
The difference to the hasMultipleOccurrences attribute defined for Breakdown Element is that Work Breakdown Elements with the isRepeatable flag will be performed one after the other (i.e. not in parallel).  For Breakdown Elements with hasMultipleOccurrences set to true this is undefined and up to the project planner.  If both attributes are set to true then isRepeatable takes precedence.</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-WorkBreakdownElement-isOngoing" name="isOngoing" default="false">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-WorkBreakdownElement-isOngoing-_ownedComment.0" annotatedElement="ProcessStructure-WorkBreakdownElement-isOngoing">
						<body>If the isOngoing attribute is set to true for a Work Breakdown Element instance, then the element describes an ongoing piece of work without a fixed duration or end state.  For example, the Work Breakdown Element could represent work of an administrator continuously (e.g. 3h a day) working to ensure that systems are kept in a certain state.  Another example would be program management work overseeing many different projects being scheduled for one particular project at specific reoccurring intervals during the whole lifecycle of the project.</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-WorkBreakdownElement-isEventDriven" name="isEventDriven" default="false">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-WorkBreakdownElement-isEventDriven-_ownedComment.0" annotatedElement="ProcessStructure-WorkBreakdownElement-isEventDriven">
						<body>The isEventDriven attribute indicates that the Work Breakdown Element describes an instance of work which is not started because it has been scheduled to start at a certain point of time, because preceding work is being completed, or input work products are available, but because another specific event has occurred.&#xD;
Examples for such events are exceptions or problem situations which require specific work to be performed as a result.  Also change management work can be modeled as event driven work analyzing a change request or defect and allocating work dynamically to resources to deal with it following the work described with such Work Breakdown Element.  The events themselves are not modeled in this version of the specification.  They shall be described as part of the normal descriptions fields available.&#xD;
&#xD;
&#xD;
&#xD;
</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessStructure-ProcessParameter" name="ProcessParameter" superClass="Core-WorkDefinitionParameter ProcessStructure-BreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-ProcessParameter-_ownedComment.0" annotatedElement="ProcessStructure-ProcessParameter">
					<body>A Process Parameter is a Work Definition Parameter used for process definitions.  It defines input and output meta-types to be Work Product Uses.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-ProcessParameter-parameterType" name="parameterType" type="ProcessStructure-WorkProductUse" lower="0" association="ProcessStructure-A_processParameter_parameterType">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-ProcessParameter-parameterType-_ownedComment.0" annotatedElement="ProcessStructure-ProcessParameter-parameterType">
						<body>This association links zero or one Work Product Use instances to a parameter.  Processes could leave the type specification open and not specify a concrete Work Product Use.</body>
					</ownedComment>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessStructure-ProcessPerformer" name="ProcessPerformer" superClass="Core-WorkDefinitionPerformer ProcessStructure-BreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-ProcessPerformer-_ownedComment.0" annotatedElement="ProcessStructure-ProcessPerformer">
					<body>A Process Performer is a Breakdown Element and Work Definition Performer that represents a relationship between Activity instances and Role Use instances. An instance of Process Performer links one or more Role Use instances to one Activity. (Modeled as 0..1 Activities because the Process with Methods meta-model package will add an alternative class to Activity.)&#xD;
The Process Performer links Role Uses to Activities indicating that the Role Use participated in the work defined by the activity in one or another way.  The kind of involvement of the Role Use in the Activity needs to be defined by a Kind class instances that qualifies the Process Performer instances.  Typical examples for Kinds of Process Performers would be Primary Performer, Additional Performer, Assisting Performer, Supervising Performer, Consulted Performer, etc.  The popular RACI-VS diagram defines another set of commonly used Kinds for the Process Performer: Responsible, Accountable, Consulted, Informed, Verifies and Signs.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-ProcessPerformer-linkedRoleUse" name="linkedRoleUse" type="ProcessStructure-RoleUse" upper="*" association="ProcessStructure-A_processPerformer_linkedRoleUse"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-ProcessPerformer-linkedActivity" name="linkedActivity" type="ProcessStructure-Activity" lower="0" subsettedProperty="Core-WorkDefinitionPerformer-linkedWorkDefinition" association="ProcessStructure-A_processPerformer_linkedActivity">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-ProcessPerformer-linkedActivity-_ownedComment.0" annotatedElement="ProcessStructure-ProcessPerformer-linkedActivity">
						<body>A Process Performer links to zero or one Activity via this association. The linked Activity property subsets the linked Work Definition property from the Work Definition Performer defined in Core.</body>
					</ownedComment>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessStructure-ProcessResponsibilityAssignment" name="ProcessResponsibilityAssignment" superClass="ProcessStructure-BreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-ProcessResponsibilityAssignment-_ownedComment.0" annotatedElement="ProcessStructure-ProcessResponsibilityAssignment">
					<body>A Process Responsibility Assignment is a Breakdown Element that represents a relationship between instances of Role Use and Work Product Use.  An instance of the Process Responsibility Assignment links one or more Role Use instances to exactly one Work Product Use.&#xD;
The Process Responsibility Assignment links Role Uses to Work Product Uses indicating that the Role Use has a responsibility relationship with the Work Product Use.  The Kind of responsibility of the Role Use for the Work Product Use needs to be defined by Kind class instances that qualify the Process Responsibility Assignment. The popular RACI-VS diagram defines a set of commonly used Kinds which cannot only be applied for the Process Performer, but also often used for work product responsibility: Responsible, Accountable, Consulted, Informed, Verifies and Signs.&#xD;
Note, that for many processes the Process Performer and Process Responsibility represent two quite different sets of information as a Role Use can be involved in an Activity that modifies a work product without being responsible for the Work Product itself and vice versa: A Role Use can be responsible for a Work Product Use without participating an all the Activities that modify it.  Other processes might chose to only use one of these relationships.  For example, there are processes for self-organizing teams that actually do not define detailed Activities describing which Role Use performs which work.  These approaches might just utilize the Process Responsibility Assignment to express that a Role Use has a certain responsibility, but that the process does not prescribe how that responsibility is achieved.  In such a case the Kinds defined might express work product states such as ‘detailed’, ‘implemented’, ‘documented’, ‘reviewed’ and so on.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-ProcessResponsibilityAssignment-linkedWorkProductUse" name="linkedWorkProductUse" type="ProcessStructure-WorkProductUse" association="ProcessStructure-A_processResponsibilityAssignment_linkedWorkProductUse">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-ProcessResponsibilityAssignment-linkedWorkProductUse-_ownedComment.0" annotatedElement="ProcessStructure-ProcessResponsibilityAssignment-linkedWorkProductUse">
						<body>A Process Responsibility Assignment links to exactly one Work Product Use.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-ProcessResponsibilityAssignment-linkedRoleUse" name="linkedRoleUse" type="ProcessStructure-RoleUse" upper="*" association="ProcessStructure-A_processResponsibilityAssignment_linkedRoleUse">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-ProcessResponsibilityAssignment-linkedRoleUse-_ownedComment.0" annotatedElement="ProcessStructure-ProcessResponsibilityAssignment-linkedRoleUse">
						<body>A Process Responsibility Assignment links to one or more Role Use.</body>
					</ownedComment>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessStructure-WorkProductUseRelationship" name="WorkProductUseRelationship" superClass="ProcessStructure-BreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-WorkProductUseRelationship-_ownedComment.0" annotatedElement="ProcessStructure-WorkProductUseRelationship">
					<body>A Work Product Use Relationship expresses a general relationship amongst work products.  Kind class instances shall be used to specify the nature of this relationship.&#xD;
The Work Product Use Relationship can be used to express different kinds of relationships amongst Work Products Uses.  Typical Kinds are ‘composition’ expressing that a work product use instance of an instance is part of another work product instance of an instance. For example, an instance of Actor is part of an instance of Use Case Model.  In contrast to composition another Kind could express ‘aggregation’ indicating that a Work Product Use is used with another Work Product Use.  For example, a customer design deliverable could be defined as a compilation of different other work product uses that are assemble as a report that is delivered to the customer for review.  A third key Kind is ‘dependency’ indicating that a work product use impacts another work product use.  For example, if a use case model work product changes the use case realization work product needs to be updated with these changes.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-WorkProductUseRelationship-target" name="target" type="ProcessStructure-WorkProductUse" upper="*" association="ProcessStructure-A_workProductUseRelationship_target"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessStructure-WorkProductUseRelationship-source" name="source" type="ProcessStructure-WorkProductUse" association="ProcessStructure-A_workProductUseRelationship_source"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Enumeration" xmi:id="ProcessStructure-WorkSequenceKind" name="WorkSequenceKind">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-WorkSequenceKind-_ownedComment.0" annotatedElement="ProcessStructure-WorkSequenceKind">
					<body>Work Sequence represents a relationship between two Work Breakdown Element in which one Work Breakdown Element (referred to as (B) below) depends on the start or finish of another Work Breakdown Element (referred to as (A) below) in order to begin or end. This enumeration defines the different kinds of Work Sequence relationships available in SPEM 2.0 and is used to provide values for Work Sequence's linkKind attribute.</body>
				</ownedComment>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="ProcessStructure-WorkSequenceKind-finishToStart" name="finishToStart" enumeration="ProcessStructure-WorkSequenceKind">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-WorkSequenceKind-finishToStart-_ownedComment.0" annotatedElement="ProcessStructure-WorkSequenceKind-finishToStart">
						<body>Work Breakdown Element (B) cannot start until Work Breakdown Element (A) finishes. For example, if you have two Work Breakdown Elements, &quot;Construct fence&quot; and &quot;Paint fence,&quot; &quot;Paint fence&quot; can't start until &quot;Construct fence&quot; finishes. This is the most common type of dependency and the default for a new Work Sequence instance.
</body>
					</ownedComment>
				</ownedLiteral>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="ProcessStructure-WorkSequenceKind-finishToFinish" name="finishToFinish" enumeration="ProcessStructure-WorkSequenceKind">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-WorkSequenceKind-finishToFinish-_ownedComment.0" annotatedElement="ProcessStructure-WorkSequenceKind-finishToFinish">
						<body>Breakdown Element (B) cannot finish until Work Breakdown Element (A) finishes. For example, if you have two Work Breakdown Elements, &quot;Add wiring&quot; and &quot;Inspect electrical,&quot; &quot;Inspect electrical&quot; can't finish until &quot;Add wiring&quot; finishes.
</body>
					</ownedComment>
				</ownedLiteral>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="ProcessStructure-WorkSequenceKind-startToStart" name="startToStart" enumeration="ProcessStructure-WorkSequenceKind">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-WorkSequenceKind-startToStart-_ownedComment.0" annotatedElement="ProcessStructure-WorkSequenceKind-startToStart">
						<body>Breakdown Element (B) cannot start until Work Breakdown Element (A) starts. For example, if you have two Work Breakdown Elements, &quot;Pour foundation&quot; and &quot;Level concrete,&quot; &quot;Level concrete&quot; can't begin until &quot;Pour foundation&quot; begins.
</body>
					</ownedComment>
				</ownedLiteral>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="ProcessStructure-WorkSequenceKind-startToFinish" name="startToFinish" enumeration="ProcessStructure-WorkSequenceKind">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-WorkSequenceKind-startToFinish-_ownedComment.0" annotatedElement="ProcessStructure-WorkSequenceKind-startToFinish">
						<body>Breakdown Element (B) cannot finish until Work Breakdown Element (A) starts. This dependency type can be used for just-in-time scheduling up to a milestone or the project finish date to minimize the risk of a Work Breakdown Element finishing late if its dependent Work Breakdown Elements slip. If a related Work Breakdown Element needs to finish before the milestone or project finish date, but it doesn't matter exactly when and you don't want a late finish to affect the just-in-time Work Breakdown Element, you can create an SF dependency between the Work Breakdown Element you want scheduled just in time (the predecessor) and its related Work Breakdown Element (the successor). Then if you update progress on the successor Work Breakdown Element, it won't affect the scheduled dates of the predecessor Work Breakdown Element.</body>
					</ownedComment>
				</ownedLiteral>
			</ownedMember>
			<ownedMember xmi:type="cmof:Enumeration" xmi:id="ProcessStructure-ActivityUseKind" name="ActivityUseKind">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-ActivityUseKind-_ownedComment.0" annotatedElement="ProcessStructure-ActivityUseKind">
					<body>This enumeration defines the nature of the reuse for an Activity that relates to exactly one other Activity via the used Activity association.  Activity Use in SPEM defines the ability to reuse the structures defined for one Activity via its nested Breakdown Element composition in a second Activity without the need to physically copy these structures.  Instead Activity Use defines a way to dynamically inherit these structures from the referenced the activity.  Such reuse is typically established via an Extension relationship and then further refined using additional local Contribution and local Replacement relationships amongst substructure elements of the extending activities.</body>
				</ownedComment>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="ProcessStructure-ActivityUseKind-na" name="na" enumeration="ProcessStructure-ActivityUseKind">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-ActivityUseKind-na-_ownedComment.0" annotatedElement="ProcessStructure-ActivityUseKind-na">
						<body>This is the default value for Activities that do not instantiate the usedActivity association.</body>
					</ownedComment>
				</ownedLiteral>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="ProcessStructure-ActivityUseKind-extension" name="extension" enumeration="ProcessStructure-ActivityUseKind">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-ActivityUseKind-extension-_ownedComment.0" annotatedElement="ProcessStructure-ActivityUseKind-extension">
						<body>Extends provides a mechanism for dynamically reusing Activity substructures (elements contained via the nested Breakdown Element composition) in other Activities. Typical applications of Extension are to represent reusable process patterns as activities, which are then dynamically bound to different activities via the Extension use Kind in a larger process.  An Activity is linked via extension by defining a usedActivity association instance from an Activity within the Processes to the Activity representing the process pattern and setting the useKind attribute to the Extension value.  The source Activity inherits all association instances and sub-structures from the base Activity and the Activity appears to be part of the resulting Process after interpretation of the used Activity association.</body>
					</ownedComment>
				</ownedLiteral>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="ProcessStructure-ActivityUseKind-localContribution" name="localContribution" enumeration="ProcessStructure-ActivityUseKind">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-ActivityUseKind-localContribution-_ownedComment.0" annotatedElement="ProcessStructure-ActivityUseKind-localContribution">
						<body>Local Contribution defines a mechanism for defining specific local additions (or contributions) to breakdown elements inherited via the extension Activity Use Kind within the context of the reusing Activity.  Hence, usedActivity relationships of this kind are used in addition to a usedActivity relationship of the kind Extension.  For example, an Activity could be defined as a child of a second Activity which defines an extension relationship to a third Activity adding additional new sub-elements (such as new sub-Activities) to the set of sub-elements the second Activity inherited from the third Activity via the extension relationship.</body>
					</ownedComment>
				</ownedLiteral>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="ProcessStructure-ActivityUseKind-localReplacement" name="localReplacement" enumeration="ProcessStructure-ActivityUseKind">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-ActivityUseKind-localReplacement-_ownedComment.0" annotatedElement="ProcessStructure-ActivityUseKind-localReplacement">
						<body>Local Replace defines a mechanism for defining local replacements to specific breakdown elements inherited via the Extension Activity Use Kind in the context of the reusing Activity.  UsedActivity relationships of this kind are used in addition to a usedActivity relationship of the kind Extension.  Instances of this type replace inherited Activity sub-elements with their own sub-elements.  For example, an Activity could be defined as a child of a second Activity which defines an extension relationship to a third Activity replacing the inherited sub-elements (such as its sub-Activities), that the second Activity inherited from the third Activity via the extension relationship, with its own set of sub-elements.</body>
					</ownedComment>
				</ownedLiteral>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessStructure-A_activity_nestedBreakdownElement" name="A_activity_nestedBreakdownElement" memberEnd="ProcessStructure-Activity-nestedBreakdownElement ProcessStructure-A_activity_nestedBreakdownElement-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-A_activity_nestedBreakdownElement-_ownedComment.0" annotatedElement="ProcessStructure-A_activity_nestedBreakdownElement">
					<body>This association represents breakdown structure nesting.  It defines an n-level hierarchy of Activities grouping together other Breakdown Elements such as other Activities, Milestones, etc.</body>
				</ownedComment>
				<general xmi:type="cmof:Association" href="Infrastructure.cmof#Core-Constructs-A_ownedMember_namespace"/>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessStructure-A_activity_nestedBreakdownElement-_ownedEnd.0" type="ProcessStructure-Activity" lower="0" owningAssociation="ProcessStructure-A_activity_nestedBreakdownElement" association="ProcessStructure-A_activity_nestedBreakdownElement"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessStructure-A_processResponsibilityAssignment_linkedRoleUse" name="A_processResponsibilityAssignment_linkedRoleUse" memberEnd="ProcessStructure-A_processResponsibilityAssignment_linkedRoleUse-_ownedEnd.0 ProcessStructure-ProcessResponsibilityAssignment-linkedRoleUse">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-A_processResponsibilityAssignment_linkedRoleUse-_ownedComment.0" annotatedElement="ProcessStructure-A_processResponsibilityAssignment_linkedRoleUse">
					<body>A Process Responsibility Assignment links to one or more Role Use.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessStructure-A_processResponsibilityAssignment_linkedRoleUse-_ownedEnd.0" type="ProcessStructure-ProcessResponsibilityAssignment" upper="*" lower="0" owningAssociation="ProcessStructure-A_processResponsibilityAssignment_linkedRoleUse" association="ProcessStructure-A_processResponsibilityAssignment_linkedRoleUse"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessStructure-A_milestone_requiredResults" name="A_milestone_requiredResults" memberEnd="ProcessStructure-Milestone-requiredResults ProcessStructure-A_milestone_requiredResults-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-A_milestone_requiredResults-_ownedComment.0" annotatedElement="ProcessStructure-A_milestone_requiredResults">
					<body>This association links the Work Product Uses instances to a Milestone instance that need to be produced for that Milestone.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessStructure-A_milestone_requiredResults-_ownedEnd.0" type="ProcessStructure-Milestone" upper="*" lower="0" owningAssociation="ProcessStructure-A_milestone_requiredResults" association="ProcessStructure-A_milestone_requiredResults"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessStructure-A_successor_linkToPredecessor" name="A_successor_linkToPredecessor" memberEnd="ProcessStructure-WorkSequence-successor ProcessStructure-WorkBreakdownElement-linkToPredecessor">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-A_successor_linkToPredecessor-_ownedComment.0" annotatedElement="ProcessStructure-A_successor_linkToPredecessor">
					<body>This association links a Work Breakdown Element to its predecessor.  Every Work Breakdown Element can have predecessor information associated to it.  This predecessor information is stored in instances of the class Work Sequence, which defines the kind of predecessor another Work Breakdown Element represents for another.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessStructure-A_predecessor_linkToSuccessor" name="A_predecessor_linkToSuccessor" memberEnd="ProcessStructure-WorkSequence-predecessor ProcessStructure-WorkBreakdownElement-linkToSuccessor">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-A_predecessor_linkToSuccessor-_ownedComment.0" annotatedElement="ProcessStructure-A_predecessor_linkToSuccessor">
					<body>This association links a Work Breakdown Element to its successor.  Every Work Breakdown Element can have successor information associated to it.  This successor information is stored in instances of the class Work Sequence, which defines the kind of successor another Work Breakdown Element represents for another.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessStructure-A_processPerformer_linkedRoleUse" name="A_processPerformer_linkedRoleUse" memberEnd="ProcessStructure-ProcessPerformer-linkedRoleUse ProcessStructure-A_processPerformer_linkedRoleUse-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-A_processPerformer_linkedRoleUse-_ownedComment.0" annotatedElement="ProcessStructure-A_processPerformer_linkedRoleUse">
					<body>A Process Performer links to one or more Role Use via this association.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessStructure-A_processPerformer_linkedRoleUse-_ownedEnd.0" type="ProcessStructure-ProcessPerformer" upper="*" lower="0" owningAssociation="ProcessStructure-A_processPerformer_linkedRoleUse" association="ProcessStructure-A_processPerformer_linkedRoleUse"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessStructure-A_processParameter_parameterType" name="A_processParameter_parameterType" memberEnd="ProcessStructure-A_processParameter_parameterType-_ownedEnd.0 ProcessStructure-ProcessParameter-parameterType">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-A_processParameter_parameterType-_ownedComment.0" annotatedElement="ProcessStructure-A_processParameter_parameterType">
					<body>This association links zero or one Work Product Use instances to a parameter.  Processes could leave the type specification open and not specify a concrete Work Product Use.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessStructure-A_processParameter_parameterType-_ownedEnd.0" type="ProcessStructure-ProcessParameter" owningAssociation="ProcessStructure-A_processParameter_parameterType" association="ProcessStructure-A_processParameter_parameterType"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessStructure-A_activity_usedActivity" name="A_activity_usedActivity" memberEnd="ProcessStructure-Activity-usedActivity ProcessStructure-A_activity_usedActivity-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-A_activity_usedActivity-_ownedComment.0" annotatedElement="ProcessStructure-A_activity_usedActivity">
					<body>This association defines a reuse generalization for Activities according to the semantics defined for Activity Use Kind. Activity instances on the to-many end of the association can reuse properties of the Activity instance on the to-one end (base) of the association.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessStructure-A_activity_usedActivity-_ownedEnd.0" type="ProcessStructure-Activity" upper="*" lower="0" owningAssociation="ProcessStructure-A_activity_usedActivity" association="ProcessStructure-A_activity_usedActivity"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessStructure-A_processResponsibilityAssignment_linkedWorkProductUse" name="A_processResponsibilityAssignment_linkedWorkProductUse" memberEnd="ProcessStructure-ProcessResponsibilityAssignment-linkedWorkProductUse ProcessStructure-A_processResponsibilityAssignment_linkedWorkProductUse-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-A_processResponsibilityAssignment_linkedWorkProductUse-_ownedComment.0" annotatedElement="ProcessStructure-A_processResponsibilityAssignment_linkedWorkProductUse">
					<body>A Process Responsibility Assignment links to exactly one Work Product Use.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessStructure-A_processResponsibilityAssignment_linkedWorkProductUse-_ownedEnd.0" visibility="private" type="ProcessStructure-ProcessResponsibilityAssignment" upper="*" lower="0" owningAssociation="ProcessStructure-A_processResponsibilityAssignment_linkedWorkProductUse" association="ProcessStructure-A_processResponsibilityAssignment_linkedWorkProductUse"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessStructure-A_workProductUseRelationship_target" name="A_workProductUseRelationship_target" memberEnd="ProcessStructure-WorkProductUseRelationship-target ProcessStructure-A_workProductUseRelationship_target-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessStructure-A_workProductUseRelationship_target-_ownedEnd.0" visibility="private" type="ProcessStructure-WorkProductUseRelationship" upper="*" lower="0" owningAssociation="ProcessStructure-A_workProductUseRelationship_target" association="ProcessStructure-A_workProductUseRelationship_target"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessStructure-A_workProductUseRelationship_source" name="A_workProductUseRelationship_source" memberEnd="ProcessStructure-WorkProductUseRelationship-source ProcessStructure-A_workProductUseRelationship_source-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessStructure-A_workProductUseRelationship_source-_ownedEnd.0" visibility="private" type="ProcessStructure-WorkProductUseRelationship" upper="*" lower="0" owningAssociation="ProcessStructure-A_workProductUseRelationship_source" association="ProcessStructure-A_workProductUseRelationship_source"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessStructure-A_processPerformer_linkedActivity" name="A_processPerformer_linkedActivity" general="Core-A_workDefinitionPerformer_WorkDefinition" memberEnd="ProcessStructure-ProcessPerformer-linkedActivity ProcessStructure-A_processPerformer_linkedActivity-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-A_processPerformer_linkedActivity-_ownedComment.0" annotatedElement="ProcessStructure-A_processPerformer_linkedActivity">
					<body>A Process Performer links to zero or one Activity via this association.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessStructure-A_processPerformer_linkedActivity-_ownedEnd.0" type="ProcessStructure-ProcessPerformer" upper="*" lower="0" owningAssociation="ProcessStructure-A_processPerformer_linkedActivity" association="ProcessStructure-A_processPerformer_linkedActivity"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessStructure-A_activity_ownedParameter" name="A_activity_ownedParameter" general="Core-A_workDefinition_ownedParameter" memberEnd="ProcessStructure-Activity-ownedProcessParameter ProcessStructure-A_activity_ownedParameter-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-A_activity_ownedParameter-_ownedComment.0" annotatedElement="ProcessStructure-A_activity_ownedParameter">
					<body>This composition association manages a list of ordered ProcessParameters for an Activity instance.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessStructure-A_activity_ownedParameter-_ownedEnd.0" type="ProcessStructure-Activity" owningAssociation="ProcessStructure-A_activity_ownedParameter" association="ProcessStructure-A_activity_ownedParameter"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessStructure-A_activity_suppressedBreakdownElement" name="A_activity_suppressedBreakdownElement" memberEnd="ProcessStructure-Activity-suppressedBreakdownElement ProcessStructure-A_activity_suppressedBreakdownElement-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessStructure-A_activity_suppressedBreakdownElement-_ownedComment.0" annotatedElement="ProcessStructure-A_activity_suppressedBreakdownElement">
					<body>The suppressed association allows hiding any Breakdown Element from the interpretation of a process structure.  It is used in combination with the usedActivity association for elements that are inherited by usedActivity.  The reusing activity can define its own local elements that refer to the base activity’s element to denote the suppression (see Activity Use for more details).</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessStructure-A_activity_suppressedBreakdownElement-_ownedEnd.0" visibility="private" type="ProcessStructure-Activity" lower="0" owningAssociation="ProcessStructure-A_activity_suppressedBreakdownElement" association="ProcessStructure-A_activity_suppressedBreakdownElement"/>
			</ownedMember>
		</ownedMember>
		<ownedMember xmi:type="cmof:Package" xmi:id="MethodPlugin" name="MethodPlugin">
			<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-_ownedComment.0" annotatedElement="MethodPlugin">
				<body>The Method Plug-in meta-model package introduces concepts for 'designing' and managing maintainable, large scale, reusable, and configurable libraries or repositories of method content and processes.   The concepts introduced in this package allow arranging different parts of such a library based on different layers of concern similar to layered software architectures.  With concepts such as Method Plug-in, Process Component, and Variability one can define processes that are granularly extended with more and more capabilities.  Users can then select the process capabilities they are interested in by defining so-called method configurations.  Only those selected capabilities will then be surfaced within these configurations to the end-user allowing process authors to define consistent and maintainable processes for different audiences that are configurable for specific end-user needs.</body>
			</ownedComment>
			<packageImport xmi:type="cmof:PackageImport" xmi:id="MethodPlugin-_packageImport.0" importingNamespace="MethodPlugin">
				<importedPackage xmi:type="cmof:Package" href="Infrastructure.cmof#Core-Constructs"/>
			</packageImport>
			<packageMerge xmi:type="cmof:PackageMerge" xmi:id="MethodPlugin-_packageMerge.0" mergedPackage="ProcessStructure" receivingPackage="MethodPlugin"/>
			<packageMerge xmi:type="cmof:PackageMerge" xmi:id="MethodPlugin-_packageMerge.1" mergedPackage="ProcessWithMethods" receivingPackage="MethodPlugin"/>
			<packageMerge xmi:type="cmof:PackageMerge" xmi:id="MethodPlugin-_packageMerge.2" mergedPackage="MethodContent" receivingPackage="MethodPlugin"/>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodPlugin-MethodPlugin" name="MethodPlugin" superClass="MethodLibraryPackageableElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-MethodPlugin-_ownedComment.0" annotatedElement="MethodPlugin-MethodPlugin">
					<body>A Method Plugin is a Package that represents a physical container for Content and Process Packages.  It defines a granularity level for the modularization and organization of method content and processes.  A Method Plugin can extend many other Method Plugins and it can be extended by many Method Plugins.  It can also be used stand-alone, i.e. with no Extension relationship to other plug-ins.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodPlugin-userChangeable" name="userChangeable" default="false">
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodPlugin-basePlugin" name="basePlugin" type="MethodPlugin-MethodPlugin" upper="*" lower="0" association="MethodPlugin-A_extendingPlugin_basePlugin"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodPlugin-ownedMethodContentPackage" name="ownedMethodContentPackage" type="ProcessWithMethods-MethodContentPackage" upper="*" lower="0" isDerived="true" isComposite="true" subsettedProperty="MethodPlugin-MethodPlugin-packagedElement" association="MethodPlugin-A_methodPlugin_ownedMethodContentPackage"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodPlugin-ownedProcessPackage" name="ownedProcessPackage" type="ProcessWithMethods-ProcessPackage" upper="*" lower="0" isDerived="true" isComposite="true" subsettedProperty="MethodPlugin-MethodPlugin-packagedElement" association="MethodPlugin-A_methodPlugin_ownedProcessPackage"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodPlugin-packagedElement" name="packagedElement" type="MethodPlugin-MethodPluginPackageableElement" upper="*" lower="0" isComposite="true" association="MethodPlugin-A_owningMethodPlugin_packagedElement">
					<redefinedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-Package-packagedElement"/>
				</ownedAttribute>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Package"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodPlugin-MethodContentElement" name="MethodContentElement" isAbstract="true" superClass="MethodPlugin-VariabilityElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-MethodContentElement-_ownedComment.0" annotatedElement="MethodPlugin-MethodContentElement">
					<body>Content Element in the package Method Plugin inherits from Variability Element and not directly from Method Element anymore.  This is achieved using UML 2.0 package merge semantics.  Only if an adopter of this meta-model decides to realize Method Plugins, he would get the variability and extension capabilities for all Content Elements.
Content Element inherits the semantics of Variability Element.
</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodContentElement-suppressedMethodContentElement" name="suppressedMethodContentElement" type="MethodPlugin-MethodContentElement" upper="*" lower="0" association="MethodPlugin-A_methodContentElement_suppressedMethodContentElement"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodPlugin-VariabilityElement" name="VariabilityElement" isAbstract="true">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-VariabilityElement-_ownedComment.0" annotatedElement="MethodPlugin-VariabilityElement">
					<body>Variability Element is an abstract class derived from Classifier that provides capabilities for content variation and extension to a specific list of SPEM 2.0 classes.  It defines a superclass for Activity (Section 9.1), and Section Section (11.6), and Method Content Element (Section 12.4) in the overall SPEM 2.0 taxonomy of classes using the UML 2 package merge mechanism.  The association Variability Specialization shall only be instantiated between two subclasses of Variability Element of the same concrete type.  The element on varaibilitySpecialElement side of the relationship defines a value for the attribute variabilityType defining the nature of the relationship using a literal from the enumeration Variability Type.&#xD;
Variability Element of the meta-model package Method Plugins adds the capabilities of variation and extension to SPEM Elements that derive from it.  Variability provides a mechanism for customizing Variability Elements without actually directly modifying their original structures or textual content, but by just being able to describe with separate objects the differences (additions, changes, omissions) relative to the original.  This Method Plugin concept allows users to factor their method content and processes in interrelated units and even to architect method content and processes in layers that extend each other with new capabilities.  The resulting method and process design can be dynamically combined and applied on demand using the interpretation rules defined for Variability Element Specializations assembling for process practitioners the most accurate method and process descriptions possible.  It also allows process practitioners to extend and tailor method content and processes they do not own and to easily upgrade to newer versions by simply reapply their personal changes to these upgrades.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-VariabilityElement-variabilityType" name="variabilityType" type="MethodPlugin-VariabilityType" default="na">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-VariabilityElement-variabilityType-_ownedComment.0" annotatedElement="MethodPlugin-VariabilityElement-variabilityType">
						<body>If in instance of the variabilitySpecialization association between two Variability Elements of the same type exists, then the variabilityType attribute specifies how the element at the variabilitySpecialElement end of the association changes the Content Element at the variabilityBasedOnElement end. See the Variability Type enumeration class for definitions for the different types of variability.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-VariabilityElement-variabilityBasedOnElement" name="variabilityBasedOnElement" type="MethodPlugin-VariabilityElement" association="MethodPlugin-A_variabilitySpecialElement_variabilityBasedOnElement"/>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Classifier"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodPlugin-Section" name="Section" superClass="MethodPlugin-VariabilityElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-Section-_ownedComment.0" annotatedElement="MethodPlugin-Section">
					<body>Section in the package Method Plugin inherits from Variability Element and extends Section defined in Managed Content (Section 11.6) with new capabilities for variability.&#xD;
For example, when a Task Definition contributes to another Task Definition its description association is contributed including its Sections (i.e. its Steps), which are modeled as parts of the Content Description instance.  Sections can be nested and therefore the Task Definition’s descriptions can be flexibly organized in Steps with sub-Steps.  Sections are Variability Elements themselves, so they can contribute to each other.  For example, one could model a Task Definition Step as a Section instance without relating it to a Task Definition’s Content Description that directly contributes to (or replaces) another Section which is part of a Content Description.  This contribution (or replacement) would add new description text to the original step description (or replace the original step description).  Another example would be to contribute to Guidance; for example contribute new check list items organized as Sections to an existing check list guidance element.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-Section-predecessor" name="predecessor" type="MethodPlugin-Section" lower="0" association="MethodPlugin-A_section_predecessor">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-Section-predecessor-_ownedComment.0" annotatedElement="MethodPlugin-Section-predecessor">
						<body>This association defines the predecessor for contributed Sections to be inserted into an existing list of Sections of a Content Description.</body>
					</ownedComment>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodPlugin-Activity" name="Activity" superClass="MethodPlugin-VariabilityElement ProcessWithMethods-WorkBreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-Activity-_ownedComment.0" annotatedElement="MethodPlugin-Activity">
					<body>Activity in the package Method Plugin inherits from Variability Element to extend Activity with new capabilities for variability. &#xD;
Activity inherits the semantics of Variability Element which provides key mechanism to enable dynamic modification of Activities in a process from a Method Plugin.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-Activity-validContext" name="validContext" type="MethodPlugin-MethodConfiguration" upper="*" lower="0" association="MethodPlugin-A_process_validContext"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-Activity-defaultContext" name="defaultContext" type="MethodPlugin-MethodConfiguration" lower="0" association="MethodPlugin-A_process_defaultContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodPlugin-MethodLibrary" name="MethodLibrary">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-MethodLibrary-_ownedComment.0" annotatedElement="MethodPlugin-MethodLibrary">
					<body>A Method Library is a physical container for Method Plugins and Method Configuration definitions.  All Method Elements are stored in a Method Library.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodLibrary-predefinedConfiguration" name="predefinedConfiguration" type="MethodPlugin-MethodConfiguration" upper="*" lower="0" isDerived="true" isComposite="true" subsettedProperty="MethodPlugin-MethodLibrary-packagedElement" association="MethodPlugin-A_predefinedConfiguration_methodLibrary"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodLibrary-ownedMethodPlugin" name="ownedMethodPlugin" type="MethodPlugin-MethodPlugin" upper="*" lower="0" isDerived="true" isComposite="true" subsettedProperty="MethodPlugin-MethodLibrary-packagedElement" association="MethodPlugin-A_methodLibrary_ownedMethodPlugin"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodLibrary-packagedElement" name="packagedElement" type="MethodPlugin-MethodLibraryPackageableElement" upper="*" lower="0" isComposite="true" association="MethodPlugin-A_owningMethodLibrary_packagedElement">
					<redefinedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-Package-packagedElement"/>
				</ownedAttribute>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Package"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodPlugin-MethodConfiguration" name="MethodConfiguration" superClass="MethodPlugin-MethodLibraryPackageableElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-MethodConfiguration-_ownedComment.0" annotatedElement="MethodPlugin-MethodConfiguration">
					<body>A Method Configuration is a collection of selected Method Plugins, as well as sub-sets of Method Content Packages and Process Packages of respective Method Plugins.  The definition of a configuration can be further refined by subtraction of all Content Elements categorized by a Category associated via the subtracted Category association.&#xD;
</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodConfiguration-baseConfiguration" name="baseConfiguration" type="MethodPlugin-MethodConfiguration" upper="*" lower="0" association="MethodPlugin-A_methodConfiguration_baseConfiguration"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodConfiguration-defaultView" name="defaultView" type="ManagedContent-Category" association="MethodPlugin-A_methodConfiguration_defaultView"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodConfiguration-processView" name="processView" type="ManagedContent-Category" upper="*" lower="0" association="MethodPlugin-A_methodConfiguration_processView"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodConfiguration-methodPluginSelection" name="methodPluginSelection" type="MethodPlugin-MethodPlugin" upper="*" isDerived="true" association="MethodPlugin-A_methodConfiguration_methodPluginSelection"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodConfiguration-substractedCategory" name="substractedCategory" type="ManagedContent-Category" upper="*" lower="0" association="MethodPlugin-A_methodConfiguration_substractedCategory"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodConfiguration-processPackageSelection" name="processPackageSelection" type="ProcessWithMethods-ProcessPackage" upper="*" lower="0" association="MethodPlugin-A_methodConfiguration_processPackageSelection"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-MethodConfiguration-contentPackageSelection" name="contentPackageSelection" type="ProcessWithMethods-MethodContentPackage" upper="*" lower="0" association="MethodPlugin-A_methodConfiguration_contentPackageSelection"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodPlugin-ProcessComponent" name="ProcessComponent" superClass="ProcessWithMethods-ProcessPackage">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-ProcessComponent-_ownedComment.0" annotatedElement="MethodPlugin-ProcessComponent">
					<body>A Process Component is a special Process Package that applies the principles of encapsulation.  A Process Component contains exactly one Process and defines a set of Work Product Ports that define the inputs and outputs for a Process Component.  There might be many components defining the same Work Product Ports, but using different techniques (i.e. Process) to achieve similar outputs for similar inputs.  Whereas the Work Product Port represents the component specifications (black box view on the component), good candidates for component realizations can be found in Capability Patterns (white box descriptions for the component).&#xD;
SPEM 2.0 supports replaceable and reusable Process Components realizing the principles of encapsulation. Certain situations in a software development project might require that concrete realizations of parts of the process remain undecided or will be decided by the executing team itself (e.g. in outsourcing situations).  Process components support an assembly mechanism that provides that is based on the &quot;black box&quot; principle. At any point during a project the component &quot;realization&quot; detailing the work can be added to the process.  The component approach also allows that different styles or techniques of doing work can be replaced with one another.  For example, a software code output of a component could be produced with a model-driven development or a code-centric technique.  The component concept encapsulates the actual work and lets the development team choose the appropriate technique and fill the component's realization with their choice of Activities that produce the required outputs.&#xD;
</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-ProcessComponent-ownedPort" name="ownedPort" type="MethodPlugin-WorkProductPort" upper="*" lower="0" isComposite="true" association="MethodPlugin-A_processComponent_ownedPort"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-ProcessComponent-process" name="process" type="ProcessStructure-Activity" isComposite="true" association="MethodPlugin-A_processComponent_process"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodPlugin-ProcessComponentUse" name="ProcessComponentUse" superClass="ProcessWithMethods-MethodContentUse">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-ProcessComponentUse-_ownedComment.0" annotatedElement="MethodPlugin-ProcessComponentUse">
					<body>A Process Component Use represents a Process Component application in a Process, i.e. the breakdown structure defining the Process.  The Process Component Use is used to encapsulate the details of the component in a breakdown structure and to provide its own set of relationships such as it own predecessors and successors.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-ProcessComponentUse-usedPort" name="usedPort" type="MethodPlugin-WorkProductPort" upper="*" lower="0" isComposite="true" association="MethodPlugin-A_processComponentUse_workProductPort">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-ProcessComponentUse-usedPort-_ownedComment.0" annotatedElement="MethodPlugin-ProcessComponentUse-usedPort">
						<body>This association links the Process Component Use to used Work Product Ports of the Process Component.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-ProcessComponentUse-processComponent" name="processComponent" type="MethodPlugin-ProcessComponent" association="MethodPlugin-A_processComponentUse_processComponent"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodPlugin-WorkProductPort" name="WorkProductPort" superClass="ProcessWithMethods-ProcessElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-WorkProductPort-_ownedComment.0" annotatedElement="MethodPlugin-WorkProductPort">
					<body>A Work Product Port defines the work products input and outputs for a Process Component.  It is defined based on exactly one type of Work Product and defines for exactly one Process Component if this Work Product type is to be expected as a required (input) or supplied (output) by the Process Component.  It also specifies if this input or output is optional or not. </body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-WorkProductPort-portKind" name="portKind" type="Core-ParameterDirectionKind" default="inout">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-WorkProductPort-portKind-_ownedComment.0" annotatedElement="MethodPlugin-WorkProductPort-portKind">
						<body>This attribute defines if the port represents and input or output Work Product.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-WorkProductPort-isOptional" name="isOptional" default="false">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-WorkProductPort-isOptional-_ownedComment.0" annotatedElement="MethodPlugin-WorkProductPort-isOptional">
						<body>This attribute specifies if the port represents a mandatory or optional Work Product input or output.</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-WorkProductPort-portType" name="portType" type="MethodContent-WorkProductDefinition" lower="0" association="MethodPlugin-A_workProductPort_portType"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodPlugin-WorkProductPortConnector" name="WorkProductPortConnector" superClass="ProcessWithMethods-BreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-WorkProductPortConnector-_ownedComment.0" annotatedElement="MethodPlugin-WorkProductPortConnector">
					<body>A Work Product Port Connector is used to connect Work Product Ports for assembling Process Components.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodPlugin-WorkProductPortConnector-connectedPort" name="connectedPort" type="MethodPlugin-WorkProductPort" upper="*" lower="0" association="MethodPlugin-A_workProductPortConnector_workProductPort">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-WorkProductPortConnector-connectedPort-_ownedComment.0" annotatedElement="MethodPlugin-WorkProductPortConnector-connectedPort">
						<body>This association connects many Work Product Ports with many other Work Product Ports.</body>
					</ownedComment>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodPlugin-MethodLibraryPackageableElement" name="MethodLibraryPackageableElement" isAbstract="true">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-MethodLibraryPackageableElement-_ownedComment.0" annotatedElement="MethodPlugin-MethodLibraryPackageableElement">
					<body>Method Library Element is an abstract generalization for Method Plugin and Method Configuration supporting the redefinition of the packagedElement association of Method Library inherited from the UML 2 class.&#xD;
Method Library Packageable Element represents an element that can be packaged in a Method Library.  It prevents SPEM 2.0 user from nesting Method Libraries.</body>
				</ownedComment>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-PackageableElement"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodPlugin-MethodPluginPackageableElement" name="MethodPluginPackageableElement" isAbstract="true">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-MethodPluginPackageableElement-_ownedComment.0" annotatedElement="MethodPlugin-MethodPluginPackageableElement">
					<body>Method Plugin Element is an abstract generalization for Method Content Package and Process Package supporting the redefinition of the packagedElement association of Method Plugin inherited from the UML 2 class.&#xD;
Method Plugin Packageable Element represents an element that can be packaged in a Method Plugin.  It prevents SPEM 2.0 user from nesting Method Plugins.</body>
				</ownedComment>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-PackageableElement"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Enumeration" xmi:id="MethodPlugin-VariabilityType" name="VariabilityType">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-VariabilityType-_ownedComment.0" annotatedElement="MethodPlugin-VariabilityType">
					<body>Variability Type is an Enumeration used for values for instances of Variability Element's attribute variabilityType.  It defines the nature of how a Variability Element extends another Variability Element. See enumeration literals for definitions for each type.</body>
				</ownedComment>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MethodPlugin-VariabilityType-na" name="na" enumeration="MethodPlugin-VariabilityType">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-VariabilityType-na-_ownedComment.0" annotatedElement="MethodPlugin-VariabilityType-na">
						<body>This is the default &quot;not assigned&quot; value of a Variabillity Element's variabilityType attribute which is set in the case no variability association is present between the Variability Element and other Variability Elements.
</body>
					</ownedComment>
				</ownedLiteral>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MethodPlugin-VariabilityType-contributes" name="contributes" enumeration="MethodPlugin-VariabilityType">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-VariabilityType-contributes-_ownedComment.0" annotatedElement="MethodPlugin-VariabilityType-contributes">
						<body>Contributes provides a way for instances of Variability Elements to contribute their properties into their base Variability Element without directly altering any of its existing properties, i.e. in an additive fashion.  Properties contributed are: attribute values and association instances.  The effect after interpretation of contribution is that the base Variability Element is logically replaced with an augmented variant of the element that combines attribute values and association instances.  The way this combination is realized depends on the type of the attribute or association.  For example, String attributes are concatenated resolving embedded commands for dependent text or merging text fragments (e.g. descriptions for content elements).  Additional elements in to-many associations are added (e.g. additional Guidance elements or Task Descriptors of an Activity).  Different elements in to-one associations are ignored (e.g. the one Primary Performer of a Task).  Multiple Content Elements can contribute to the same base element and all of these contributions properties are added to the base in the same fashion. The following table provides the detailed list of interpretation rules:&#xD;
&#xD;
attribute values:	String values from the special Variability Element are concatenated with values from the based-on Variability Element.  Other values from the special Variability Element of any other type such as Integer, Date are ignored.&#xD;
The identifying attributes guid and name of Method Element are exempt from this rule and will not be modified.&#xD;
0..1-association instances:	The one association instance of the based-on Variability Element is kept and any association from the contributing special Variability Element is ignored.&#xD;
0..n-association instances:	Association instances of the special Variability Element are added to the already existing association instances of the based-on element.  If both Variability Elements refer to the same object then only one instance of the association will remain.&#xD;
</body>
					</ownedComment>
				</ownedLiteral>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MethodPlugin-VariabilityType-extends" name="extends" enumeration="MethodPlugin-VariabilityType">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-VariabilityType-extends-_ownedComment.0" annotatedElement="MethodPlugin-VariabilityType-extends">
						<body>Extension allows Method Plugins to easily reuse elements from a Base Plugin by providing a kind of inheritance for the special Variability Element.  Attribute values and Association instances are inherited from the based-on Variability Element to the special Variability Element.  The result of interpretation is that the special element has the same properties as the based-on has, but might override the inherited properties with its own values.  Hence extends is not used to modify content of the base Plugin, but to provide the ability for the extending Plugin to define its own content which is a variant of content already defined (e.g. a special version of a generic Review Record for a specific type of review).  The effect of this is that the base Variability Element and any number of extending Variability Elements can be used side by side, but refer to each other via the extends relationship.  Extends also provides the key mechanism for binding Capability Patterns to Processes: A pattern is applied by defining an extends relationships from an Activity of the applying Processes to the Pattern.  The Activity inherits associations instances from the pattern and the pattern appears to be part of the resulting Process after Interpretation.&#xD;
&#xD;
attribute values:	Values from the based-on Variability element are inherited and used to populate the special Variability Elements attributes.  If the special element attributes are already populated the inherited values are ignored.  &#xD;
The identifying attributes guid and name of Method Element are exempt from this rule and will not be modified.&#xD;
0..1-association instances:	The one association instance of the based-on Variability Element is inherited to the special Variability Element.  If the special Variability Element defines its own association instance then the inherited one is ignored.&#xD;
0..n-association instances:	Association instances defined for the based-on Variability Element are inherited to the special Variability Element.  If the special Variability Element defines its own association instances, then the inherited ones are ignored.&#xD;
&#xD;
</body>
					</ownedComment>
				</ownedLiteral>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MethodPlugin-VariabilityType-replaces" name="replaces" enumeration="MethodPlugin-VariabilityType">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-VariabilityType-replaces-_ownedComment.0" annotatedElement="MethodPlugin-VariabilityType-replaces">
						<body>Replaces provides a way for Variability Elements to replace a base Variability Element without directly changing any of its existing properties.  This is in most cases used for Method Plugins that aim to replace specific Content Elements such as Roles, Task, or Activities with either a complete new variant or to change fundamental relationships of these elements (e.g. Role-Artifact responsibility).  Properties replaced are attribute values and association instances.  The effect of this is that the base Content Element is logically replaced with this new variant of the element to which all incoming associations still point as before, but which has potentially new attribute values and outgoing association properties.  This provides a very powerful mechanism to replace, for example, whole Activities in a Process with complete new realizations of the Activity.  For instance, replacing an Activity doing use case-based design with an activity doing agile code-centric development doing the same work using a different development technique utilizing different Roles, Tasks, etc.  Another example, would be to replace an Activity that describes database design for an RDBMS with an Activity that describes database design for an OODBMS.  A Variability Element can only be replaced by one other element at a time.  For example, if two Method Plugins replace the same element only one Method Plugin can be used for interpretation (see concept of Method Configuration for more details on how to resolve such conflicts).  The following table provides the detailed list of interpretation rules:&#xD;
&#xD;
attribute values:	Values from the special Variability Element are replaced with values from the based-on Variability Element including unassigned values.&#xD;
The identifying attributes guid and name of Method Element are exempt from this rule and will not be modified.&#xD;
0..1-association instances:	The one association instance of the based-on Variability Element is replaced with the association instance from the replacing special Variability Element.  If the special Variability Element does not have an association instance then resulting element will also not have an association.&#xD;
0..n-association instances:	Association instances of the special Variability Element replace all association instances of the based-on Variability Element.&#xD;
&#xD;
</body>
					</ownedComment>
				</ownedLiteral>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MethodPlugin-VariabilityType-extends-replaces" name="extends-replaces" enumeration="MethodPlugin-VariabilityType">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-VariabilityType-extends-replaces-_ownedComment.0" annotatedElement="MethodPlugin-VariabilityType-extends-replaces">
						<body>Extends-replaces combines the effects of extends and replace variability into one new variability type. Whereas the replaces variability completely replaces all attributes and outgoing association instances of the base variability element with new values and instances, or removes all values or association instances if the replacing element does not define any. Extends-replaces variability only replaces the values that have been redefined and leaves all other values of the base element as is.  In other words, extends-replace allows selectively replacing only parts of the base elements attributes and association instances. This type of variability can be used for method plug-ins that, for example, would like to rename elements or replace some descriptions with new ones without completely remodeling all other relationships and attributes it needs to keep intact.&#xD;
&#xD;
attribute values:	Values from the special Variability Element are replaced with values from the based-on Variability Element not including unassigned values. This rule also applies to identifying attributes. In other words, after the replacements the resulting object has the object id of the extends-replaces element.&#xD;
0..1-association instances	: A to-one association instance of the based-on Variability Element is replaced with the association instance from the replacing special Variability Element.  If the special Variability Element does not have an association instance, then resulting element will keep its association instance from the base element.&#xD;
0..n-association instances: Association instances of the special Variability Element replace all association instances of the based-on Variability Element.  If the replacing special Variability Element does not define any association instances, but the base element does, then the resulting element will keep these association instances.&#xD;
&#xD;
&#xD;
</body>
					</ownedComment>
				</ownedLiteral>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_extendingPlugin_basePlugin" name="A_extendingPlugin_basePlugin" memberEnd="MethodPlugin-A_extendingPlugin_basePlugin-extendingPlugin MethodPlugin-MethodPlugin-basePlugin">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_extendingPlugin_basePlugin-_ownedComment.0" annotatedElement="MethodPlugin-A_extendingPlugin_basePlugin">
					<body>This association defines that Method Plugins could extend many other Method Plugins.  The extending plug-in contains new SPEM Elements, extends existing SPEM Elements and processes using Variability (e.g. contribution, replace, etc.), provides additional Processes, etc.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_extendingPlugin_basePlugin-extendingPlugin" name="extendingPlugin" type="MethodPlugin-MethodPlugin" upper="*" lower="0" owningAssociation="MethodPlugin-A_extendingPlugin_basePlugin" association="MethodPlugin-A_extendingPlugin_basePlugin"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_variabilitySpecialElement_variabilityBasedOnElement" name="A_variabilitySpecialElement_variabilityBasedOnElement" memberEnd="MethodPlugin-A_variabilitySpecialElement_variabilityBasedOnElement-variabilitySpecialElement MethodPlugin-VariabilityElement-variabilityBasedOnElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_variabilitySpecialElement_variabilityBasedOnElement-_ownedComment.0" annotatedElement="MethodPlugin-A_variabilitySpecialElement_variabilityBasedOnElement">
					<body>This 1-to-many association defines in combination with the variabilityType attribute that a number of special Variability Elements of the same type represent a variation of exactly one other Variability Element.  See the Variability Type enumeration class for definitions for the different types of variability.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_variabilitySpecialElement_variabilityBasedOnElement-variabilitySpecialElement" name="variabilitySpecialElement" type="MethodPlugin-VariabilityElement" upper="*" lower="0" owningAssociation="MethodPlugin-A_variabilitySpecialElement_variabilityBasedOnElement" association="MethodPlugin-A_variabilitySpecialElement_variabilityBasedOnElement"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_section_predecessor" name="A_section_predecessor" memberEnd="MethodPlugin-Section-predecessor MethodPlugin-A_section_predecessor-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_section_predecessor-_ownedComment.0" annotatedElement="MethodPlugin-A_section_predecessor">
					<body>This association defines the predecessor for contributed Sections to be inserted into an existing list of Sections of a Content Description.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_section_predecessor-_ownedEnd.0" type="MethodPlugin-Section" upper="*" lower="0" owningAssociation="MethodPlugin-A_section_predecessor" association="MethodPlugin-A_section_predecessor"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_methodConfiguration_baseConfiguration" name="A_methodConfiguration_baseConfiguration" memberEnd="MethodPlugin-MethodConfiguration-baseConfiguration MethodPlugin-A_methodConfiguration_baseConfiguration-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_methodConfiguration_baseConfiguration-_ownedComment.0" annotatedElement="MethodPlugin-A_methodConfiguration_baseConfiguration">
					<body>The definition of a configuration can be based on the definitions of other configurations.  For example, a configuration A could be defined as the superset of configurations B, C, and D plus add more selected Plugins and Packages.  In such a case A would list B, C, and D as its baseConfigurations.  If any of these base configurations changes all updates would be automatically valid for A as well reducing maintainability overhead for overlapping/dependent configurations. </body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_methodConfiguration_baseConfiguration-_ownedEnd.0" type="MethodPlugin-MethodConfiguration" upper="*" lower="0" owningAssociation="MethodPlugin-A_methodConfiguration_baseConfiguration" association="MethodPlugin-A_methodConfiguration_baseConfiguration"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_methodConfiguration_defaultView" name="A_methodConfiguration_defaultView" memberEnd="MethodPlugin-MethodConfiguration-defaultView MethodPlugin-A_methodConfiguration_defaultView-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_methodConfiguration_defaultView-_ownedEnd.0" type="MethodPlugin-MethodConfiguration" upper="*" lower="0" owningAssociation="MethodPlugin-A_methodConfiguration_defaultView" association="MethodPlugin-A_methodConfiguration_defaultView"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_methodConfiguration_processView" name="A_methodConfiguration_processView" memberEnd="MethodPlugin-A_methodConfiguration_processView-_ownedEnd.0 MethodPlugin-MethodConfiguration-processView">
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_methodConfiguration_processView-_ownedEnd.0" type="MethodPlugin-MethodConfiguration" upper="*" lower="0" owningAssociation="MethodPlugin-A_methodConfiguration_processView" association="MethodPlugin-A_methodConfiguration_processView"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_process_validContext" name="A_process_validContext" memberEnd="MethodPlugin-A_process_validContext-_ownedEnd.0 MethodPlugin-Activity-validContext">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_process_validContext-_ownedComment.0" annotatedElement="MethodPlugin-A_process_validContext">
					<body>A Process can have many additional configurations that have been verified to also produce valid results.  Process Elements (e.g. Descriptors) that refer to content packages that are defined outside the scope of such a configuration would not be shown in the process when published or used under such a configuration.  This allows to easily remove content from a process by removing content packages to from the related configuration.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_process_validContext-_ownedEnd.0" type="MethodPlugin-Activity" upper="*" lower="0" owningAssociation="MethodPlugin-A_process_validContext" association="MethodPlugin-A_process_validContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_process_defaultContext" name="A_process_defaultContext" memberEnd="MethodPlugin-A_process_defaultContext-_ownedEnd.0 MethodPlugin-Activity-defaultContext">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_process_defaultContext-_ownedComment.0" annotatedElement="MethodPlugin-A_process_defaultContext">
					<body>A Process has exactly on default configuration.  This is in most cases the configuration in which the process has been created.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_process_defaultContext-_ownedEnd.0" type="MethodPlugin-Activity" upper="*" lower="0" owningAssociation="MethodPlugin-A_process_defaultContext" association="MethodPlugin-A_process_defaultContext"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_predefinedConfiguration_methodLibrary" name="A_predefinedConfiguration_methodLibrary" general="MethodPlugin-A_owningMethodLibrary_packagedElement" memberEnd="MethodPlugin-MethodLibrary-predefinedConfiguration MethodPlugin-A_predefinedConfiguration_methodLibrary-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_predefinedConfiguration_methodLibrary-_ownedComment.0" annotatedElement="MethodPlugin-A_predefinedConfiguration_methodLibrary">
					<body>A Method Library stores a set of predefined Method Configurations that are regularly used by the library authors (e.g. the configurations that they ship to their users).</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_predefinedConfiguration_methodLibrary-_ownedEnd.0" type="MethodPlugin-MethodLibrary" owningAssociation="MethodPlugin-A_predefinedConfiguration_methodLibrary" association="MethodPlugin-A_predefinedConfiguration_methodLibrary">
					<redefinedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-A_member_namespace-_ownedEnd.0"/>
				</ownedEnd>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_methodLibrary_ownedMethodPlugin" name="A_methodLibrary_ownedMethodPlugin" general="MethodPlugin-A_owningMethodLibrary_packagedElement" memberEnd="MethodPlugin-A_methodLibrary_ownedMethodPlugin-_ownedEnd.0 MethodPlugin-MethodLibrary-ownedMethodPlugin">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_methodLibrary_ownedMethodPlugin-_ownedComment.0" annotatedElement="MethodPlugin-A_methodLibrary_ownedMethodPlugin">
					<body>A Method Library physically comprises of Method Plugins.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_methodLibrary_ownedMethodPlugin-_ownedEnd.0" type="MethodPlugin-MethodLibrary" owningAssociation="MethodPlugin-A_methodLibrary_ownedMethodPlugin" association="MethodPlugin-A_methodLibrary_ownedMethodPlugin">
					<redefinedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-A_member_namespace-_ownedEnd.0"/>
				</ownedEnd>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_methodConfiguration_methodPluginSelection" name="A_methodConfiguration_methodPluginSelection" memberEnd="MethodPlugin-A_methodConfiguration_methodPluginSelection-_ownedEnd.0 MethodPlugin-MethodConfiguration-methodPluginSelection" isDerived="true">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_methodConfiguration_methodPluginSelection-_ownedComment.0" annotatedElement="MethodPlugin-A_methodConfiguration_methodPluginSelection">
					<body>This derived association includes all Method Plugin that own packages that have been selected as part of the Method configuration using the methodPackageSelection association.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_methodConfiguration_methodPluginSelection-_ownedEnd.0" type="MethodPlugin-MethodConfiguration" upper="*" lower="0" owningAssociation="MethodPlugin-A_methodConfiguration_methodPluginSelection" association="MethodPlugin-A_methodConfiguration_methodPluginSelection"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_methodPlugin_ownedMethodContentPackage" name="A_methodPlugin_ownedMethodContentPackage" general="MethodPlugin-A_owningMethodPlugin_packagedElement" memberEnd="MethodPlugin-MethodPlugin-ownedMethodContentPackage MethodPlugin-A_methodPlugin_ownedMethodContentPackage-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_methodPlugin_ownedMethodContentPackage-_ownedComment.0" annotatedElement="MethodPlugin-A_methodPlugin_ownedMethodContentPackage">
					<body>This composition association represents that every Content Package is part of exactly one Method Plugin. This property subsets the redefined packagedElement.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_methodPlugin_ownedMethodContentPackage-_ownedEnd.0" type="MethodPlugin-MethodPlugin" owningAssociation="MethodPlugin-A_methodPlugin_ownedMethodContentPackage" association="MethodPlugin-A_methodPlugin_ownedMethodContentPackage"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_methodPlugin_ownedProcessPackage" name="A_methodPlugin_ownedProcessPackage" general="MethodPlugin-A_owningMethodPlugin_packagedElement" memberEnd="MethodPlugin-MethodPlugin-ownedProcessPackage MethodPlugin-A_methodPlugin_ownedProcessPackage-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_methodPlugin_ownedProcessPackage-_ownedComment.0" annotatedElement="MethodPlugin-A_methodPlugin_ownedProcessPackage">
					<body>This composition association represents that every Process Package is part of exactly one Method Plugin. This property subsets the redefined packagedElement.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_methodPlugin_ownedProcessPackage-_ownedEnd.0" type="MethodPlugin-MethodPlugin" owningAssociation="MethodPlugin-A_methodPlugin_ownedProcessPackage" association="MethodPlugin-A_methodPlugin_ownedProcessPackage"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_methodConfiguration_substractedCategory" name="A_methodConfiguration_substractedCategory" memberEnd="MethodPlugin-MethodConfiguration-substractedCategory MethodPlugin-A_methodConfiguration_substractedCategory-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_methodConfiguration_substractedCategory-_ownedEnd.0" type="MethodPlugin-MethodConfiguration" upper="*" lower="0" owningAssociation="MethodPlugin-A_methodConfiguration_substractedCategory" association="MethodPlugin-A_methodConfiguration_substractedCategory"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_methodConfiguration_processPackageSelection" name="A_methodConfiguration_processPackageSelection" memberEnd="MethodPlugin-MethodConfiguration-processPackageSelection MethodPlugin-A_methodConfiguration_processPackageSelection-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_methodConfiguration_processPackageSelection-_ownedEnd.0" type="MethodPlugin-MethodConfiguration" upper="*" lower="0" owningAssociation="MethodPlugin-A_methodConfiguration_processPackageSelection" association="MethodPlugin-A_methodConfiguration_processPackageSelection"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_methodConfiguration_contentPackageSelection" name="A_methodConfiguration_contentPackageSelection" memberEnd="MethodPlugin-MethodConfiguration-contentPackageSelection MethodPlugin-A_methodConfiguration_contentPackageSelection-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_methodConfiguration_contentPackageSelection-_ownedEnd.0" type="MethodPlugin-MethodConfiguration" upper="*" lower="0" owningAssociation="MethodPlugin-A_methodConfiguration_contentPackageSelection" association="MethodPlugin-A_methodConfiguration_contentPackageSelection"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_processComponent_process" name="A_processComponent_process" memberEnd="MethodPlugin-ProcessComponent-process MethodPlugin-A_processComponent_process-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_processComponent_process-_ownedComment.0" annotatedElement="MethodPlugin-A_processComponent_process">
					<body>A Process Component contains exactly one Process (e.g. a Capability Pattern or a Delivery Process) that is being physically encapsulated by the component.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_processComponent_process-_ownedEnd.0" type="MethodPlugin-ProcessComponent" lower="0" owningAssociation="MethodPlugin-A_processComponent_process" association="MethodPlugin-A_processComponent_process"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_processComponentUse_processComponent" name="A_processComponentUse_processComponent" memberEnd="MethodPlugin-ProcessComponentUse-processComponent MethodPlugin-A_processComponentUse_processComponent-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_processComponentUse_processComponent-_ownedComment.0" annotatedElement="MethodPlugin-A_processComponentUse_processComponent">
					<body>This association represents the reference from the Method Content Use to the Process Component it refers to.  A Process Component Use represents exactly one Process Component.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_processComponentUse_processComponent-_ownedEnd.0" type="MethodPlugin-ProcessComponentUse" upper="*" lower="0" owningAssociation="MethodPlugin-A_processComponentUse_processComponent" association="MethodPlugin-A_processComponentUse_processComponent"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_processComponent_ownedPort" name="A_processComponent_ownedPort" memberEnd="MethodPlugin-ProcessComponent-ownedPort MethodPlugin-A_processComponent_ownedPort-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_processComponent_ownedPort-_ownedComment.0" annotatedElement="MethodPlugin-A_processComponent_ownedPort">
					<body>This association defines the ports required or provided by the Process Component. They define work product types used, produced, or changed by the process component.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_processComponent_ownedPort-_ownedEnd.0" type="MethodPlugin-ProcessComponent" lower="0" owningAssociation="MethodPlugin-A_processComponent_ownedPort" association="MethodPlugin-A_processComponent_ownedPort"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_processComponentUse_workProductPort" name="A_processComponentUse_workProductPort" memberEnd="MethodPlugin-ProcessComponentUse-usedPort MethodPlugin-A_processComponentUse_workProductPort-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_processComponentUse_workProductPort-_ownedComment.0" annotatedElement="MethodPlugin-A_processComponentUse_workProductPort">
					<body>This association links the Process Component Use to used Work Product Ports of the Process Component.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_processComponentUse_workProductPort-_ownedEnd.0" type="MethodPlugin-ProcessComponentUse" owningAssociation="MethodPlugin-A_processComponentUse_workProductPort" association="MethodPlugin-A_processComponentUse_workProductPort"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_workProductPortConnector_workProductPort" name="A_workProductPortConnector_workProductPort" memberEnd="MethodPlugin-WorkProductPortConnector-connectedPort MethodPlugin-A_workProductPortConnector_workProductPort-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_workProductPortConnector_workProductPort-_ownedComment.0" annotatedElement="MethodPlugin-A_workProductPortConnector_workProductPort">
					<body>This association connects many Work Product Ports with many other Work Product Ports.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_workProductPortConnector_workProductPort-_ownedEnd.0" type="MethodPlugin-WorkProductPortConnector" upper="*" lower="0" owningAssociation="MethodPlugin-A_workProductPortConnector_workProductPort" association="MethodPlugin-A_workProductPortConnector_workProductPort"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_workProductPort_portType" name="A_workProductPort_portType" memberEnd="MethodPlugin-WorkProductPort-portType MethodPlugin-A_workProductPort_portType-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_workProductPort_portType-_ownedComment.0" annotatedElement="MethodPlugin-A_workProductPort_portType">
					<body>This association defines the exact type of the Work Product Port.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_workProductPort_portType-_ownedEnd.0" type="MethodPlugin-WorkProductPort" owningAssociation="MethodPlugin-A_workProductPort_portType" association="MethodPlugin-A_workProductPort_portType"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_owningMethodLibrary_packagedElement" name="A_owningMethodLibrary_packagedElement" memberEnd="MethodPlugin-MethodLibrary-packagedElement MethodPlugin-A_owningMethodLibrary_packagedElement-owningMethodLibrary">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_owningMethodLibrary_packagedElement-_ownedComment.0" annotatedElement="MethodPlugin-A_owningMethodLibrary_packagedElement">
					<body>This association redefines the association from UML Infrastructure Package to only allow MethodLibraryPackageableElements.</body>
				</ownedComment>
				<general xmi:type="cmof:Association" href="Infrastructure.cmof#Core-Constructs-A_packagedElement_owningPackage"/>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_owningMethodLibrary_packagedElement-owningMethodLibrary" name="owningMethodLibrary" type="MethodPlugin-MethodLibrary" lower="0" owningAssociation="MethodPlugin-A_owningMethodLibrary_packagedElement" association="MethodPlugin-A_owningMethodLibrary_packagedElement"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_owningMethodPlugin_packagedElement" name="A_owningMethodPlugin_packagedElement" memberEnd="MethodPlugin-MethodPlugin-packagedElement MethodPlugin-A_owningMethodPlugin_packagedElement-owningMethodPlugin">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_owningMethodPlugin_packagedElement-_ownedComment.0" annotatedElement="MethodPlugin-A_owningMethodPlugin_packagedElement">
					<body>This association redefines the association from UML Infrastructure Package to only allow MethodPluginPackageableElements.</body>
				</ownedComment>
				<general xmi:type="cmof:Association" href="Infrastructure.cmof#Core-Constructs-A_packagedElement_owningPackage"/>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_owningMethodPlugin_packagedElement-owningMethodPlugin" name="owningMethodPlugin" type="MethodPlugin-MethodPlugin" lower="0" owningAssociation="MethodPlugin-A_owningMethodPlugin_packagedElement" association="MethodPlugin-A_owningMethodPlugin_packagedElement"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodPlugin-A_methodContentElement_suppressedMethodContentElement" name="A_methodContentElement_suppressedMethodContentElement" memberEnd="MethodPlugin-MethodContentElement-suppressedMethodContentElement MethodPlugin-A_methodContentElement_suppressedMethodContentElement-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodPlugin-A_methodContentElement_suppressedMethodContentElement-_ownedComment.0" annotatedElement="MethodPlugin-A_methodContentElement_suppressedMethodContentElement">
					<body>If a Variability Element is derived from another Variability Element using the Extends Variability Specialization then this association can be used to suppress inherited Method Elements that were part of the based-on Variability Element, which can be any type of Method Element.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodPlugin-A_methodContentElement_suppressedMethodContentElement-_ownedEnd.0" visibility="private" type="MethodPlugin-MethodContentElement" lower="0" owningAssociation="MethodPlugin-A_methodContentElement_suppressedMethodContentElement" association="MethodPlugin-A_methodContentElement_suppressedMethodContentElement"/>
			</ownedMember>
		</ownedMember>
		<ownedMember xmi:type="cmof:Package" xmi:id="MethodContent" name="MethodContent">
			<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-_ownedComment.0" annotatedElement="MethodContent">
				<body>The Method Content meta-model package provides the concepts for SPEM 2.0 users and organization to build up a development knowledgebase that is independent of any specific processes and development projects.  It adds concepts for defining lifecycle and process-independent reusable method content elements that provide a base of documented knowledge of software development methods, techniques, and concrete realizations of best practices.  Method Content comprises of textual step-by-step explanations, describing how specific fine-granular development goals are achieved by which roles with which resources and results, independent of the placement of these steps within a specific development lifecycle. Processes would reuse these method content elements and relate them into semi-ordered sequences that are customized to specific types of projects.  A SPEM 2.0 user can define Method Content as general guidance and build up a knowledge base of development methods without ever creating a process, but adding a little bit more structure for her content as provided by the generic meta-classes defined in the Managed Content package.  These structures selected for the Method Content package have been derived from best practices in the industry.  Development processes can be based on reusable method content (as defined in the Process with Methods meta-model package), but they can also be independent of method content (by just using the Process Structure meta-model package) defining ad-hoc processes that are not based on such reusable methods.</body>
			</ownedComment>
			<packageImport xmi:type="cmof:PackageImport" xmi:id="MethodContent-_packageImport.0" importingNamespace="MethodContent">
				<importedPackage xmi:type="cmof:Package" href="Infrastructure.cmof#Core-Constructs"/>
			</packageImport>
			<packageMerge xmi:type="cmof:PackageMerge" xmi:id="MethodContent-_packageMerge.0" mergedPackage="ManagedContent" receivingPackage="MethodContent"/>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodContent-MethodContentElement" name="MethodContentElement" isAbstract="true" superClass="ManagedContent-DescribableElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-MethodContentElement-_ownedComment.0" annotatedElement="MethodContent-MethodContentElement">
					<body>Method Content Element is an abstract Describable Element that represents an abstract generalization for all Method Content Elements in SPEM 2.0.  Because Method Content Element derives from Describable Element it contains textual descriptions.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodContent-Default_TaskDefinitionParameter" name="Default_TaskDefinitionParameter" superClass="Core-WorkDefinitionParameter MethodContent-MethodContentElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-Default_TaskDefinitionParameter-_ownedComment.0" annotatedElement="MethodContent-Default_TaskDefinitionParameter">
					<body>A Task Definition Parameter is a special Work Definition Parameter that uses Work Product Definitions as well as adds an Optionalilty attribute.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodContent-Default_TaskDefinitionParameter-optionality" name="optionality" type="MethodContent-OptionalityKind">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-Default_TaskDefinitionParameter-optionality-_ownedComment.0" annotatedElement="MethodContent-Default_TaskDefinitionParameter-optionality">
						<body>This attribute represents if the input or output parameter is optional, i.e. mandatory to provide to the Task Definition or to be produced by the Task Definition respectively.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodContent-Default_TaskDefinitionParameter-paramterType" name="paramterType" type="MethodContent-WorkProductDefinition" lower="0" association="MethodContent-A_taskDefinitionParameter_paramterType">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-Default_TaskDefinitionParameter-paramterType-_ownedComment.0" annotatedElement="MethodContent-Default_TaskDefinitionParameter-paramterType">
						<body>This association links zero or one Work Product Definitions instances to a parameter.  Task Definitions can leave the type specification open and not specify a concrete Work Product Definition at all.</body>
					</ownedComment>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodContent-RoleDefinition" name="RoleDefinition" superClass="MethodContent-MethodContentElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-RoleDefinition-_ownedComment.0" annotatedElement="MethodContent-RoleDefinition">
					<body>A Role Definition is a Method Content Element that defines a set of related skills, competencies, and responsibilities.  Roles are used by Task Definitions to define who performs them as well as define a set of Work Product Definitions they are responsible for.&#xD;
A Role Definition defines a set of related skills, competencies, and responsibilities of an individual or a set of individuals.  Roles are not individuals or resources.  Individual members of the development organization will wear different hats, or perform different roles. The mapping from individual to Role, performed by the project manager when planning and staffing for a project, allows different individuals to act as several different roles, and for a role to be played by several individuals (also refer to Composite Role).</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodContent-RoleDefinition-providedQualification" name="providedQualification" type="MethodContent-Qualification" upper="*" lower="0" association="MethodContent-A_roleDefinition_providedQualification">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-RoleDefinition-providedQualification-_ownedComment.0" annotatedElement="MethodContent-RoleDefinition-providedQualification">
						<body>Provides a list of Qualifications required for instances of instances of Role Definitions to fulfill.</body>
					</ownedComment>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodContent-Step" name="Step" superClass="ManagedContent-Section Core-WorkDefinition">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-Step-_ownedComment.0" annotatedElement="MethodContent-Step">
					<body>A Step is a Section and Work Definition that is used to organize a Task Definition’s Content Description into parts or subunits of work.  Steps inherit the subSection decomposition from Section and can therefore describe sub-Steps nested into Steps.&#xD;
A Step describes a meaningful and consistent part of the overall work described for a Task Definition.  The collection of Steps defined for a Task Definition represents all the work that should be done to achieve the overall development goal of the Task Definition.  Not all steps are necessarily performed each time a Task is invoked in a Process (see Task Use defined Section 13.6), so they can also be expressed in the form of alternate ‘flows’ of work.  Different ways of achieving the same development goal can then be ‘assembled’ by selecting different combinations of steps when applying the Task Definition in a Process.  Typical kinds of steps a Task Definition author should consider are: Thinking steps: where the individual roles understand the nature of the task, gathers and examines the input artifacts, and formulates the outcome. Performing steps: where the individual roles create or update some artifacts. Reviewing steps: where the individual roles inspects the results against some criteria.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodContent-TaskDefinition" name="TaskDefinition" superClass="MethodContent-MethodContentElement Core-WorkDefinition">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-TaskDefinition-_ownedComment.0" annotatedElement="MethodContent-TaskDefinition">
					<body>A Task Definition is a Method Content Element and a Work Definition that defines work being performed by Roles Definition instances.  A Task is associated to input and output Work Products.  Inputs are differentiated in mandatory versus optional inputs.  The relationships to Work Products via Work Definition Parameters are not instantiatable/variable-like parameters.  They rather express (hyper-)links to the descriptions of the work products types that are related to the Task as inputs and outputs.  In other words, these associations are not intended to be used to capture which concrete instances will be passed when instantiating the method in a project.  All of the Task Definition’s default associations and Parameters can be overridden in an actual process definition.&#xD;
A Task Definition describes an assignable unit of work.  Every Task Definition is assigned to specific Role Definitions.  The granularity of a Task Definition is generally a few hours to a few days.  It usually affects one or only a small number of work products. A Task Definition is used as an element of defining a process. Tasks Definition are further used for planning and tracking progress; therefore, if they are defined too fine-grained, they will be neglected, and if they are too large, progress would have to be expressed in terms of a Task Definition’s parts (e.g. Steps, which is not recommended).&#xD;
A Task Definition has a clear purpose in which the performing roles achieve a well defined goal.  It provides complete step-by-step explanations of doing all the work that needs to be done to achieve this goal.  This description is complete, independent of when in a process lifecycle the work would actually be done.  It therefore does not describe when you do what work at what point of time, but describes all the work that gets done throughout the development lifecycle that contributes to the achievement of this goal.  When the Task Definition instance is being applied in a process then this process application (defined as Task Use) provides the information of which pieces of the Task Definition will actually be performed at any particular point in time. This assumes that the Task Definition will be performed in the process over and over again, but each time with a slightly different emphasis on different steps or aspects of the task description. &#xD;
For example, a Task Definition such as “Develop Use Case Model” describes all the work that needs to be done to develop a complete use case model. This would comprise of the identification and naming of use cases and actors, the writing of a brief description, the modeling of use cases and their relationships in diagrams, the detailed description of a basic flow, the detailed description of alternatives flows, performing of walkthroughs workshops and reviews, etc.  All of these parts contribute to the development goal of developing the use case model, but the parts will be performed at different points in time in a process.  Identification, naming, and brief descriptions would be performed early in a typical development process versus the writing of detailed alternative flows which would be performed much later.  All these parts or steps within the same Task define the “method” of Developing a Use Case Model.  Applying such a method in a lifecycle (i.e. in a process) is defining which steps are done when going from one iteration to the next.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodContent-TaskDefinition-step" name="step" type="MethodContent-Step" isOrdered="true" upper="*" lower="0" isDerived="true" isComposite="true" association="MethodContent-A_taskDefinition_step">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-TaskDefinition-step-_ownedComment.0" annotatedElement="MethodContent-TaskDefinition-step">
						<body>This derived association is a shortcut for navigation along the association properties self.description.section.</body>
					</ownedComment>
					<subsettedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-Namespace-ownedMember"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodContent-TaskDefinition-usedTool" name="usedTool" type="MethodContent-ToolDefinition" upper="*" lower="0" association="MethodContent-A_taskDefinition_usedTool">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-TaskDefinition-usedTool-_ownedComment.0" annotatedElement="MethodContent-TaskDefinition-usedTool">
						<body>A Task Definition can recommend a specific set of tools to be used to support the Task.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodContent-TaskDefinition-ownedTaskDefinitionParameter" name="ownedTaskDefinitionParameter" type="MethodContent-Default_TaskDefinitionParameter" isOrdered="true" upper="*" lower="0" isComposite="true" subsettedProperty="Core-WorkDefinition-ownedParameter" association="MethodContent-A_taskDefinition_ownedTaskDefinitionParameter"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodContent-TaskDefinition-requiredQualification" name="requiredQualification" visibility="public" type="MethodContent-Qualification" upper="*" lower="0" association="MethodContent-A_taskDefinition_requiredQualification"/>
				<ownedOperation xmi:type="cmof:Operation" xmi:id="MethodContent-TaskDefinition-step.1" name="step" class="MethodContent-TaskDefinition" isQuery="true" bodyCondition="MethodContent-TaskDefinition-step.1-_ownedRule.0">
					<ownedRule xmi:type="cmof:Constraint" xmi:id="MethodContent-TaskDefinition-step.1-_ownedRule.0" constrainedElement="MethodContent-TaskDefinition-step.1" namespace="MethodContent-TaskDefinition-step.1">
						<specification xmi:type="cmof:OpaqueExpression" xmi:id="MethodContent-TaskDefinition-step.1-_ownedRule.0-_specification">
							<language>OCL</language>
							<body>result = self.description.section</body>
						</specification>
					</ownedRule>
					<ownedParameter xmi:type="cmof:Parameter" xmi:id="MethodContent-TaskDefinition-step.1-_ownedParameter.0" type="MethodContent-Step" direction="return"/>
				</ownedOperation>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodContent-ToolDefinition" name="ToolDefinition" superClass="MethodContent-MethodContentElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-ToolDefinition-_ownedComment.0" annotatedElement="MethodContent-ToolDefinition">
					<body>A Tool Definition is a special Method Content Element that can be used to specify a tool's participation in a Task Definition.&#xD;
A Tool Definition describes the capabilities of a CASE tool, general purpose tool, or any other automation unit that supports the associated instances of Role Definitions in performing the work defined by a Task Definition.  A Tool Definition can represent a resource useful, recommended, or necessary for a task’s completion.  The Task Definition can refer to the associated list of Tool Definitions to clarify their role. </body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodContent-ToolDefinition-managedWorkProduct" name="managedWorkProduct" type="MethodContent-WorkProductDefinition" upper="*" lower="0" association="MethodContent-A_toolDefinition_managedWorkProduct"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodContent-WorkProductDefinition" name="WorkProductDefinition" superClass="MethodContent-MethodContentElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-WorkProductDefinition-_ownedComment.0" annotatedElement="MethodContent-WorkProductDefinition">
					<body>Work Product Definition is Method Content Element that is used, modified, and produced by Task Definitions.  Work Product Definitions can be related to other Work Product Definitions via the Work Product Definition Relationship.&#xD;
Work Products are in most cases tangible work products consumed, produced, or modified by Tasks.   They may serve as a basis for defining reusable assets.  Roles use Work Products to perform Tasks and produce Work Products in the course of performing Tasks.  Work Products are the responsibility of Role Definitions, making responsibility easy to identify and understand, and promoting the idea that every piece of information produced in the method requires the appropriate set of skills. Even though one Role Definition might &quot;own&quot; a specific type of Work Product, other roles can still use the Work Product for their work, and perhaps even update them if the Role Definition instance instance has been given permission to do so.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodContent-WorkProductDefinitionRelationship" name="WorkProductDefinitionRelationship" superClass="MethodContent-MethodContentElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-WorkProductDefinitionRelationship-_ownedComment.0" annotatedElement="MethodContent-WorkProductDefinitionRelationship">
					<body>A Work Product Definition Relationship expresses a general relationship amongst Work Products Definitions.  Kind class instances shall be used to specify the nature of this relationship.&#xD;
The Work Product Definition Relationship can be used to express different kinds of relationships amongst Work Product Definition.  Typical Kinds are ‘composition’ expressing that a Work Product Definition instance of an instance is part of another Work Product Definition instance of an instance. For example, an instance of Actor is part of an instance of Use Case Model.  In contrast to composition another Kind could express ‘aggregation’ indicating that a Work Product Definition is used with another Work Product Definition.  For example, a customer design deliverable could be defined as a compilation of different other work product uses that are assemble as a report that is delivered to the customer for review.  A third key Kind is ‘dependency’ indicating that a Work Product Definition impacts another Work Product Definition.  For example, if a use case model Work Product Definition changes the use case realization Work Product Definition needs to be updated with these changes.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodContent-WorkProductDefinitionRelationship-source" name="source" type="MethodContent-WorkProductDefinition" association="MethodContent-A_workProductDefinitionRealtionship_source">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-WorkProductDefinitionRelationship-source-_ownedComment.0" annotatedElement="MethodContent-WorkProductDefinitionRelationship-source">
						<body>This association links to the exact one source of the Work Product Definition Relationship.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodContent-WorkProductDefinitionRelationship-target" name="target" type="MethodContent-WorkProductDefinition" upper="*" association="MethodContent-A_workProductDefinitionRelationship_target">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-WorkProductDefinitionRelationship-target-_ownedComment.0" annotatedElement="MethodContent-WorkProductDefinitionRelationship-target">
						<body>This association links to one or more targets of the Work Product Definition Relationship.</body>
					</ownedComment>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodContent-Guidance" name="Guidance" superClass="MethodContent-MethodContentElement"/>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodContent-Category" name="Category" superClass="MethodContent-MethodContentElement"/>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodContent-Default_TaskDefinitionPerformer" name="Default_TaskDefinitionPerformer" superClass="Core-WorkDefinitionPerformer MethodContent-MethodContentElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-Default_TaskDefinitionPerformer-_ownedComment.0" annotatedElement="MethodContent-Default_TaskDefinitionPerformer">
					<body>A Default Task Definition Performer is a Work Definition Performer that represents a relationship between Task Definition instances and Role Definition instances. An instance of Default Task Definition Performer links one or more Role Definition instances to one Task Definition instance.&#xD;
The Default Task Definition Performer links Role Definition to Task Definitions indicating that these Role Definition instances participate in the work defined by the Task Definition in one or another way.  The kind of involvement of the Role Definition in the Task Definition needs to be defined by Kind class instances that qualify the Default Task Definition Performer instances.  Typical examples for Kinds of Default Task Definition Performers would be Primary Performer, Additional Performer, Assisting Performer, Supervising Performer, Consulted Performer, etc.  The popular RACI-VS diagram defines another set of commonly used Kinds for the Default Task Definition Performer: Responsible, Accountable, Consulted, Informed, Verifies and Signs.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodContent-Default_TaskDefinitionPerformer-linkedRoleDefinition" name="linkedRoleDefinition" type="MethodContent-RoleDefinition" upper="*" association="MethodContent-A_taskDefinitionPerformer_linkedRoleDefinition"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodContent-Default_TaskDefinitionPerformer-linkedTaskDefinition" name="linkedTaskDefinition" type="MethodContent-TaskDefinition" subsettedProperty="Core-WorkDefinitionPerformer-linkedWorkDefinition" association="MethodContent-A_taskDefinitionPerformer_linkedTaskDefinition"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodContent-Default_ResponsibilityAssignment" name="Default_ResponsibilityAssignment" superClass="MethodContent-MethodContentElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-Default_ResponsibilityAssignment-_ownedComment.0" annotatedElement="MethodContent-Default_ResponsibilityAssignment">
					<body>A Default Responsibility Assignment is a Method Content Element that represents a relationship between instances of Role Definition and Work Product Definition.  An instance of the Default Responsibility Assignment links one or more Role Definition instances to exactly one Work Product Definition.&#xD;
The Process Responsibility Assignment links Role Definitions to Work Product Definitions indicating that the Role Definition has a responsibility relationship with the Work Product Definition.  The Kind of responsibility of the Role Definition for the Work Product Definition needs to be defined by Kind class instances that qualify the Default Responsibility Assignment. The popular RACI-VS diagram defines a set of commonly used Kinds which cannot only be applied for the Default Task Definition Performer, but also often used for work product responsibility: Responsible, Accountable, Consulted, Informed, Verifies and Signs.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodContent-Default_ResponsibilityAssignment-linkedRoleDefinition" name="linkedRoleDefinition" type="MethodContent-RoleDefinition" upper="*" association="MethodContent-A_responsibilityAssignment_linkedRoleDefinition"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="MethodContent-Default_ResponsibilityAssignment-linkedWorkproductDefinition" name="linkedWorkproductDefinition" type="MethodContent-WorkProductDefinition" association="MethodContent-A_responsibilityAssignment_linkedWorkProductDefinition"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="MethodContent-Qualification" name="Qualification">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-Qualification-_ownedComment.0" annotatedElement="MethodContent-Qualification">
					<body>Qualification is a Method Content Element that documents zero or more required qualifications, skills, or competencies for Role Definitions.  In addition to informally describing the qualification using its Content Element documentation properties, Qualification can be further categorized by defining specific Kinds.&#xD;
A Qualification documents one specific skill or competency that is used to model and represent the qualifications provided by instances of a Role Definition and/or the qualifications required for the performance of a Task.  These qualifications can be used to find and map roles for tasks when assembling method content and assigning organization specific roles to these tasks dynamically.  Qualifications can also be used to find individuals (i.e. people) as instances of the Role Definition instances.  For example, Qualifications of the Kind &quot;Soft Skills&quot; associated to the &quot;System Analyst&quot; Role Definition could be &quot;captures stakeholder needs&quot;, &quot;selects elicitation techniques&quot;, &quot;adapts elicitation techniques&quot;, &quot;negotiates scope&quot;, etc.   &#xD;
A Role Use can select a sub-set of valid Qualifications for the use of the Role Definitions in the context of a particular Activity.  One can then express that for the Role Use within a particular Activity only the “selects elicitation techniques” Qualification of the “System Analyst” Role Definition is required.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Enumeration" xmi:id="MethodContent-OptionalityKind" name="OptionalityKind">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-OptionalityKind-_ownedComment.0" annotatedElement="MethodContent-OptionalityKind">
					<body>This enumeration provides the values for the Task Definition Parameter attribute optionality.</body>
				</ownedComment>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MethodContent-OptionalityKind-mandatory" name="mandatory" enumeration="MethodContent-OptionalityKind">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-OptionalityKind-mandatory-_ownedComment.0" annotatedElement="MethodContent-OptionalityKind-mandatory">
						<body>It is mandatory to provide the Work Product Definition specified in this parameter as input or to provide an instance of the Work Product Definition as output respectively.</body>
					</ownedComment>
				</ownedLiteral>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="MethodContent-OptionalityKind-optional" name="optional" enumeration="MethodContent-OptionalityKind">
					<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-OptionalityKind-optional-_ownedComment.0" annotatedElement="MethodContent-OptionalityKind-optional">
						<body>It is optional to provide the Work Product Definition specified in this parameter as input or to provide an instance of the Work Product Definition as output respectively.</body>
					</ownedComment>
				</ownedLiteral>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodContent-A_taskDefinitionParameter_paramterType" name="A_taskDefinitionParameter_paramterType" memberEnd="MethodContent-Default_TaskDefinitionParameter-paramterType MethodContent-A_taskDefinitionParameter_paramterType-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-A_taskDefinitionParameter_paramterType-_ownedComment.0" annotatedElement="MethodContent-A_taskDefinitionParameter_paramterType">
					<body>This association links zero or one Work Product Definitions instances to a parameter.  Task Definitions can leave the type specification open and not specify a concrete Work Product Definition at all.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodContent-A_taskDefinitionParameter_paramterType-_ownedEnd.0" type="MethodContent-Default_TaskDefinitionParameter" owningAssociation="MethodContent-A_taskDefinitionParameter_paramterType" association="MethodContent-A_taskDefinitionParameter_paramterType"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodContent-A_taskDefinition_step" name="A_taskDefinition_step" memberEnd="MethodContent-TaskDefinition-step MethodContent-A_taskDefinition_step-_ownedEnd.0" isDerived="true">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-A_taskDefinition_step-_ownedComment.0" annotatedElement="MethodContent-A_taskDefinition_step">
					<body>This derived association is a shortcut for navigation along the association properties self.description.section.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodContent-A_taskDefinition_step-_ownedEnd.0" type="MethodContent-TaskDefinition" owningAssociation="MethodContent-A_taskDefinition_step" association="MethodContent-A_taskDefinition_step"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodContent-A_taskDefinition_usedTool" name="A_taskDefinition_usedTool" memberEnd="MethodContent-TaskDefinition-usedTool MethodContent-A_taskDefinition_usedTool-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-A_taskDefinition_usedTool-_ownedComment.0" annotatedElement="MethodContent-A_taskDefinition_usedTool">
					<body>A Task Definition can recommend a specific set of tools to be used to support the Task.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodContent-A_taskDefinition_usedTool-_ownedEnd.0" type="MethodContent-TaskDefinition" upper="*" lower="0" owningAssociation="MethodContent-A_taskDefinition_usedTool" association="MethodContent-A_taskDefinition_usedTool"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodContent-A_toolDefinition_managedWorkProduct" name="A_toolDefinition_managedWorkProduct" memberEnd="MethodContent-ToolDefinition-managedWorkProduct MethodContent-A_toolDefinition_managedWorkProduct-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-A_toolDefinition_managedWorkProduct-_ownedComment.0" annotatedElement="MethodContent-A_toolDefinition_managedWorkProduct">
					<body>A Tool can manage instances of one or more Work Product Definitions. For example a Tool can be modeled that specializes in managing Use Case Models or another Tool that manages Analysis and Design Models.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodContent-A_toolDefinition_managedWorkProduct-_ownedEnd.0" type="MethodContent-ToolDefinition" upper="*" lower="0" owningAssociation="MethodContent-A_toolDefinition_managedWorkProduct" association="MethodContent-A_toolDefinition_managedWorkProduct"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodContent-A_workProductDefinitionRealtionship_source" name="A_workProductDefinitionRealtionship_source" memberEnd="MethodContent-WorkProductDefinitionRelationship-source MethodContent-A_workProductDefinitionRealtionship_source-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-A_workProductDefinitionRealtionship_source-_ownedComment.0" annotatedElement="MethodContent-A_workProductDefinitionRealtionship_source">
					<body>This association links to the exact one source of the Work Product Definition Relationship.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodContent-A_workProductDefinitionRealtionship_source-_ownedEnd.0" type="MethodContent-WorkProductDefinitionRelationship" upper="*" lower="0" owningAssociation="MethodContent-A_workProductDefinitionRealtionship_source" association="MethodContent-A_workProductDefinitionRealtionship_source"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodContent-A_workProductDefinitionRelationship_target" name="A_workProductDefinitionRelationship_target" memberEnd="MethodContent-WorkProductDefinitionRelationship-target MethodContent-A_workProductDefinitionRelationship_target-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-A_workProductDefinitionRelationship_target-_ownedComment.0" annotatedElement="MethodContent-A_workProductDefinitionRelationship_target">
					<body>This association links to one or more targets of the Work Product Definition Relationship.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodContent-A_workProductDefinitionRelationship_target-_ownedEnd.0" type="MethodContent-WorkProductDefinitionRelationship" upper="*" lower="0" owningAssociation="MethodContent-A_workProductDefinitionRelationship_target" association="MethodContent-A_workProductDefinitionRelationship_target"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodContent-A_taskDefinition_ownedTaskDefinitionParameter" name="A_taskDefinition_ownedTaskDefinitionParameter" general="Core-A_workDefinition_ownedParameter" memberEnd="MethodContent-TaskDefinition-ownedTaskDefinitionParameter MethodContent-A_taskDefinition_ownedTaskDefinitionParameter-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-A_taskDefinition_ownedTaskDefinitionParameter-_ownedComment.0" annotatedElement="MethodContent-A_taskDefinition_ownedTaskDefinitionParameter">
					<body>This ordered association subsets ownedParamter from Work Definition.  Tasks Definitions manage Task Definition Parameter instances which are subclasses of the Work Definition Parameters adding the optionality property of a parameter.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodContent-A_taskDefinition_ownedTaskDefinitionParameter-_ownedEnd.0" type="MethodContent-TaskDefinition" owningAssociation="MethodContent-A_taskDefinition_ownedTaskDefinitionParameter" association="MethodContent-A_taskDefinition_ownedTaskDefinitionParameter"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodContent-A_taskDefinitionPerformer_linkedRoleDefinition" name="A_taskDefinitionPerformer_linkedRoleDefinition" memberEnd="MethodContent-Default_TaskDefinitionPerformer-linkedRoleDefinition MethodContent-A_taskDefinitionPerformer_linkedRoleDefinition-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-A_taskDefinitionPerformer_linkedRoleDefinition-_ownedComment.0" annotatedElement="MethodContent-A_taskDefinitionPerformer_linkedRoleDefinition">
					<body>A Default Task Definition Performer links to one or more Role Definition.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodContent-A_taskDefinitionPerformer_linkedRoleDefinition-_ownedEnd.0" type="MethodContent-Default_TaskDefinitionPerformer" upper="*" lower="0" owningAssociation="MethodContent-A_taskDefinitionPerformer_linkedRoleDefinition" association="MethodContent-A_taskDefinitionPerformer_linkedRoleDefinition"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodContent-A_taskDefinitionPerformer_linkedTaskDefinition" name="A_taskDefinitionPerformer_linkedTaskDefinition" general="Core-A_workDefinitionPerformer_WorkDefinition" memberEnd="MethodContent-Default_TaskDefinitionPerformer-linkedTaskDefinition MethodContent-A_taskDefinitionPerformer_linkedTaskDefinition-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-A_taskDefinitionPerformer_linkedTaskDefinition-_ownedComment.0" annotatedElement="MethodContent-A_taskDefinitionPerformer_linkedTaskDefinition">
					<body>A Default Task Definition Performer links to exactly one Task Definition.  The linked Task Definition property subsets the linkedWorkDefinition property from the Work Definition Performer defined in Core.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodContent-A_taskDefinitionPerformer_linkedTaskDefinition-_ownedEnd.0" type="MethodContent-Default_TaskDefinitionPerformer" upper="*" lower="0" owningAssociation="MethodContent-A_taskDefinitionPerformer_linkedTaskDefinition" association="MethodContent-A_taskDefinitionPerformer_linkedTaskDefinition"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodContent-A_responsibilityAssignment_linkedRoleDefinition" name="A_responsibilityAssignment_linkedRoleDefinition" memberEnd="MethodContent-Default_ResponsibilityAssignment-linkedRoleDefinition MethodContent-A_responsibilityAssignment_linkedRoleDefinition-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-A_responsibilityAssignment_linkedRoleDefinition-_ownedComment.0" annotatedElement="MethodContent-A_responsibilityAssignment_linkedRoleDefinition">
					<body>A Process Responsibility Assignment links to one or more Role Definition.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodContent-A_responsibilityAssignment_linkedRoleDefinition-_ownedEnd.0" type="MethodContent-Default_ResponsibilityAssignment" upper="*" lower="0" owningAssociation="MethodContent-A_responsibilityAssignment_linkedRoleDefinition" association="MethodContent-A_responsibilityAssignment_linkedRoleDefinition"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodContent-A_responsibilityAssignment_linkedWorkProductDefinition" name="A_responsibilityAssignment_linkedWorkProductDefinition" memberEnd="MethodContent-Default_ResponsibilityAssignment-linkedWorkproductDefinition MethodContent-A_responsibilityAssignment_linkedWorkProductDefinition-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-A_responsibilityAssignment_linkedWorkProductDefinition-_ownedComment.0" annotatedElement="MethodContent-A_responsibilityAssignment_linkedWorkProductDefinition">
					<body>A Process Responsibility Assignment links to exactly one Work Product Definition.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodContent-A_responsibilityAssignment_linkedWorkProductDefinition-_ownedEnd.0" type="MethodContent-Default_ResponsibilityAssignment" upper="*" lower="0" owningAssociation="MethodContent-A_responsibilityAssignment_linkedWorkProductDefinition" association="MethodContent-A_responsibilityAssignment_linkedWorkProductDefinition"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodContent-A_roleDefinition_providedQualification" name="A_roleDefinition_providedQualification" memberEnd="MethodContent-RoleDefinition-providedQualification MethodContent-A_roleDefinition_providedQualification-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-A_roleDefinition_providedQualification-_ownedComment.0" annotatedElement="MethodContent-A_roleDefinition_providedQualification">
					<body>Provides a list of qualifications that the role typically provides.  This list can be mapped against the required qualifications list defined for Task Definitions. The qualifications need to be present by individual that are represented as instances of instances of the Role Definitions.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodContent-A_roleDefinition_providedQualification-_ownedEnd.0" visibility="private" type="MethodContent-RoleDefinition" upper="*" lower="0" owningAssociation="MethodContent-A_roleDefinition_providedQualification" association="MethodContent-A_roleDefinition_providedQualification"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="MethodContent-A_taskDefinition_requiredQualification" name="A_taskDefinition_requiredQualification" memberEnd="MethodContent-TaskDefinition-requiredQualification MethodContent-A_taskDefinition_requiredQualification-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="MethodContent-A_taskDefinition_requiredQualification-_ownedComment.0" annotatedElement="MethodContent-A_taskDefinition_requiredQualification">
					<body>Provides a list of qualifications that the task typically requires to be performed by one or more roles.  This list can be mapped against the provided qualifications list defined for Role Definitions.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="MethodContent-A_taskDefinition_requiredQualification-_ownedEnd.0" name="" visibility="private" type="MethodContent-TaskDefinition" upper="*" lower="0" owningAssociation="MethodContent-A_taskDefinition_requiredQualification" association="MethodContent-A_taskDefinition_requiredQualification"/>
			</ownedMember>
		</ownedMember>
		<ownedMember xmi:type="cmof:Package" xmi:id="ProcessWithMethods" name="ProcessWithMethods">
			<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-_ownedComment.0" annotatedElement="ProcessWithMethods">
				<body>The Process with Methods meta-model package defines new and redefines existing structures for integrating processes defined with the concepts from the Process Structure meta-model package with instances of concepts from the Method Content meta-model package.  Whereas Method Content defines fundamental methods and techniques for software development, processes place these methods and techniques into the context of a lifecycle model comprising, for example, of phases and milestones.  When applying method content such as Tasks, Roles, and Work Products to specific parts of the process reference classes (referred to as Method Content Use in this specification) are created that can store individual changes to their referenced Method Content classes expressing how and which parts of the method will be applied in that particular point in the process.</body>
			</ownedComment>
			<packageMerge xmi:type="cmof:PackageMerge" xmi:id="ProcessWithMethods-_packageMerge.0" mergedPackage="ProcessStructure" receivingPackage="ProcessWithMethods"/>
			<packageMerge xmi:type="cmof:PackageMerge" xmi:id="ProcessWithMethods-_packageMerge.1" mergedPackage="MethodContent" receivingPackage="ProcessWithMethods"/>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-ProcessKind" name="ProcessKind" superClass="Core-Kind ProcessWithMethods-ProcessElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-ProcessKind-_ownedComment.0" annotatedElement="ProcessWithMethods-ProcessKind">
					<body>Process Kind is a Kind and Process Element that represent a process specific refinement of the Kind class defined in Core.  Only Process Elements can be used for Process Kinds.  It can be packaged in Process Packages.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-MethodContentKind" name="MethodContentKind" superClass="ProcessWithMethods-MethodContentElement Core-Kind">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-MethodContentKind-_ownedComment.0" annotatedElement="ProcessWithMethods-MethodContentKind">
					<body>Method Content Kind is a Kind and Method Content Element that represent a method content specific refinement of the Kind class defined in Core.  Only Method Content Elements can be used for Method Content Kinds.  It can be packaged in Method Content Packages.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-MethodContentPackage" name="MethodContentPackage" superClass="MethodContentPackageableElement MethodPluginPackageableElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-MethodContentPackage-_ownedComment.0" annotatedElement="ProcessWithMethods-MethodContentPackage">
					<body>A Method Content Package is a Method Content Packageable Element and Package that contains Method Content Elements only.  Examples for Method Content Element are Work Product Definition, Task Definition, Role Definition, etc.&#xD;
A key separation of concerns in SPEM 2.0 is the distinction between Method Content and Process.  This separation is enforced by special package types, which do not allow the mixing of method content with processes.  Method Content Elements are organized in Method Content Packages to structure large scales of method content as well as to define a mechanism for reuse.  Method Content Elements from one package can reuse element from other packages by defining an imports dependency (defined in the UML 2 Infrastructure) between them.  For example, a Work Product Definition defined in one package can be used as an input for Task Definitions defined in other packages.  By reusing it from one common place (i.e. the package in which it has been defined) ensures that no redundant definitions of the same elements are required.  Also maintenance of method content is greatly improved as changes can be performed in only one place.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-MethodContentPackage-ownedMethodContentMember" name="ownedMethodContentMember" type="ProcessWithMethods-MethodContentPackageableElement" upper="*" lower="0" isComposite="true" association="ProcessWithMethods-A_owningMethodContentPackage_ownedMethodContentMember">
					<redefinedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-Package-packagedElement"/>
				</ownedAttribute>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Package"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-MethodContentPackageableElement" name="MethodContentPackageableElement" isAbstract="true">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-MethodContentPackageableElement-_ownedComment.0" annotatedElement="ProcessWithMethods-MethodContentPackageableElement">
					<body>Method Content Packageable Element is an abstract generalization for Method Content Package and Method Content Element supporting the redefinition of the packagedElement association of Method Content Package inherited from the UML 2 class.</body>
				</ownedComment>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-PackageableElement"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-ProcessPackage" name="ProcessPackage" superClass="ProcessPackageableElement MethodPluginPackageableElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-ProcessPackage-_ownedComment.0" annotatedElement="ProcessWithMethods-ProcessPackage">
					<body>Process Package is a special Package that can only contain Process Elements and UML 2 Diagram Interchange Diagrams.  It redefines the packagedElement and ownedMembers association to only allow elements of these two types.&#xD;
A process package can only contain Process Elements and Diagrams.  A key separation of concerns in SPEM 2.0 is the distinction between Method Content and Process.  This separation is enforced by special package types, which do not allow the mixing of method content with processes.  Method Content is managed in Method Content Packages.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-ProcessPackage-ownedProcessMember" name="ownedProcessMember" type="ProcessWithMethods-ProcessPackageableElement" upper="*" lower="0" isComposite="true" association="ProcessWithMethods-A_owningProcessPackage_ownedProcessMember">
					<redefinedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-Package-packagedElement"/>
				</ownedAttribute>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Package"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-ProcessPackageableElement" name="ProcessPackageableElement" isAbstract="true">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-ProcessPackageableElement-_ownedComment.0" annotatedElement="ProcessWithMethods-ProcessPackageableElement">
					<body>Process Packageable Element is an abstract generalization for Process Package and Process Element supporting the redefinition of the packagedElement association of Process inherited from the UML 2 class.</body>
				</ownedComment>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-PackageableElement"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-BreakdownElement" name="BreakdownElement" isAbstract="true" superClass="ProcessWithMethods-ProcessElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-BreakdownElement-_ownedComment.0" annotatedElement="ProcessWithMethods-BreakdownElement">
					<body>Breakdown Element is an abstract generalization for any type of Process Element that is part of a breakdown structure.  It defines a set of properties available to all of its specializations.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-BreakdownElement-planningData" name="planningData" type="ProcessWithMethods-PlanningData" lower="0" isComposite="true" association="ProcessWithMethods-A_breakdownElement_planningData">
					<subsettedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-Element-ownedElement"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-BreakdownElement-isPlanned" name="isPlanned" default="true">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-BreakdownElement-isPlanned-_ownedComment.0" annotatedElement="ProcessWithMethods-BreakdownElement-isPlanned">
						<body>A key application for Development Processes expressed with Breakdown structures is to generate a project plan from it.  A process as defined in SPEM 2.0 is a multi-dimensional structure defining what work is being performed at what time by which roles using which input and producing what outputs.  A project plan as it is represented in project planning tools such as IBM Rational Portfolio Manager or Microsoft Project normally does not need all this information and is normally limited to just representing a subset.  For example, a typical MS Project plan only represents the work breakdown consisting of Tasks and Activities (sometimes referred to as summary tasks).  It does not show the input and output Work Products for a Task, but it can show which roles shall be staffed for performing the Task.  However, such role allocation need to be replaced with concrete resources when instantiating the plan for a concrete project.  Sometimes project plans can then again be organized differently by organizing work by deliverables in which Work Products are mapped to the plan's summary tasks and Task that have these work products as output mapped below such as summary task.  Therefore, a process can make recommendations about which elements to include and which to exclude when generating a plan.  When the isPlanned attribute is set to False for an instance of a Breakdown Element, then this element shall not be not included when a concrete project plan is being generated from the breakdown structure that contains this element.&#xD;
&#xD;
&#xD;
</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-CompositeRole" name="CompositeRole" superClass="ProcessWithMethods-RoleUse">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-CompositeRole-_ownedComment.0" annotatedElement="ProcessWithMethods-CompositeRole">
					<body>A Composite Role is a special Role Use that relates to more than one Role Definition.  It represents a grouping of Roles Definition references with the main purpose of simplification, i.e. reducing the number of roles defined in method content for a process.&#xD;
A Composite Role is a grouping of Role Definitions that can be used in an Activity or Process to reduce the number of Roles.  A typical application would be a process for a small team in which a standard set of roles from the method content would be all performed by one or more resource.  By using Composite Roles the process would suggest a typical clustering of Roles to Resources.  A Composite Role could perform all Tasks Definitions defined for the Roles Definition it refers to.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-CompositeRole-aggregatedRole" name="aggregatedRole" type="MethodContent-RoleDefinition" upper="*" lower="0" association="ProcessWithMethods-A_compositeRole_aggregatedRole">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-CompositeRole-aggregatedRole-_ownedComment.0" annotatedElement="ProcessWithMethods-CompositeRole-aggregatedRole">
						<body>This association lists all the Roles Definitions represented by the Composite Role.</body>
					</ownedComment>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-MethodContentUse" name="MethodContentUse" isAbstract="true" superClass="ProcessWithMethods-BreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-MethodContentUse-_ownedComment.0" annotatedElement="ProcessWithMethods-MethodContentUse">
					<body>A Method Content Use is an abstract generalization for special Breakdown Elements that references one concrete Method Content Element.  A Method Content Use provides a proxy-like representation of a Method Content Element within breakdown structures.  In addition to just referencing Method Content Elements it allows overriding the Method Content Elements structural relationships by defining its own sets of associations and adding its own Content Description.&#xD;
Method Content Uses are the key concept for realizing the separation of processes from method content.  A Method Content Use can be characterized as a reference object for one particular Method Content Element, which has its own relationships and properties.  When a Method Content Use is created it shall be provided with congruent copies of the relationships defined for the referenced content element.  However, a user can modify these relationships for the particular process situation for which the Method Content Use has been created. </body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-MethodContentUse-isSynchronizedWithSource" name="isSynchronizedWithSource" default="true">
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-Boolean"/>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-PlanningData" name="PlanningData" superClass="ProcessWithMethods-ProcessElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-PlanningData-_ownedComment.0" annotatedElement="ProcessWithMethods-PlanningData">
					<body>Planning Data is a Process Element that adds planning data to Breakdown Elements when it is used for generating project plans from a process.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-PlanningData-startDate" name="startDate">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-PlanningData-startDate-_ownedComment.0" annotatedElement="ProcessWithMethods-PlanningData-startDate">
						<body>Defines the absolute start date for the Breakdown Element.</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-String"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-PlanningData-finishDate" name="finishDate">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-PlanningData-finishDate-_ownedComment.0" annotatedElement="ProcessWithMethods-PlanningData-finishDate">
						<body>Defines the absolute finish date for the Breakdown Element.</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-String"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-PlanningData-rank" name="rank">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-PlanningData-rank-_ownedComment.0" annotatedElement="ProcessWithMethods-PlanningData-rank">
						<body>Defines the ranking of the Breakdown Element relative to other Breakdown Elements in same Activity.</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-Integer"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-PlanningData-duration" name="duration">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-PlanningData-duration-_ownedComment.0" annotatedElement="ProcessWithMethods-PlanningData-duration">
						<body>Duration of a Breakdown Element.  Could be an exact recommended duration, or a ratio.</body>
					</ownedComment>
					<type xmi:type="cmof:PrimitiveType" href="Infrastructure.cmof#Core-PrimitiveTypes-String"/>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-RoleUse" name="RoleUse" superClass="ProcessWithMethods-MethodContentUse">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-RoleUse-_ownedComment.0" annotatedElement="ProcessWithMethods-RoleUse">
					<body>A Role Use represents a Role in the context of one specific Activity.  Every breakdown structure can define different relationships of Role Uses to Task Uses and Work Product Uses.  Therefore one role can be represented by many Role Uses each within the context of an Activity with its own set of relationships.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-RoleUse-role" name="role" type="MethodContent-RoleDefinition" lower="0" association="ProcessWithMethods-A_roleUse_role">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-RoleUse-role-_ownedComment.0" annotatedElement="ProcessWithMethods-RoleUse-role">
						<body>This association represents the reference from the Method Content Use to the method content element it refers to.  Every Role Use can reference only one Role Definition.  However, a Role Definition can be represented by many Role Uses.  In the SPEM 2.0 Profile this association is instantiated by a dependency relationship with a trace stereotype.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-RoleUse-appliedQualification" name="appliedQualification" visibility="public" type="MethodContent-Qualification" upper="*" lower="0" association="ProcessWithMethods-A_roleUse_appliedQualification"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-TaskUse" name="TaskUse" superClass="ProcessWithMethods-MethodContentUse ProcessWithMethods-WorkBreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-TaskUse-_ownedComment.0" annotatedElement="ProcessWithMethods-TaskUse">
					<body>A Task Use is a Method Content Use and Work Breakdown Element that represents a proxy for a Task Definition in the context of one specific Activity.  Every breakdown structure can define different relationships of Task Uses to Work Product Uses and Role Uses. Therefore one Task Definition can be represented by many Task Uses each within the context of an Activity with its own set of relationships.&#xD;
A key difference between Method Content and Process is that a Method Content Element such as Task Definition describes all aspects of doing work defined around this task.  This description is managed in steps, which are modeled as Sections of the Task Definitions’ Content Descriptions.  When applying a Task Definition in a Process’ Activity with a Task Use a Process Engineer needs to indicate that at that particular point in time in the Process definition for which the Task Use has been created, only a subset of steps shall be performed.  She defines this selection using the selectedSteps association depicted in Figure 59.  If she wants to add steps to a Task Use, she can describe these either pragmatically in the refinedDescription attribute or ‘properly’ create a contributing Task Definition to the Task the Task Use refers to (see Section 14.2 on Contribution).&#xD;
&#xD;
&#xD;
</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-TaskUse-selectedStep" name="selectedStep" type="MethodContent-Step" upper="*" lower="0" association="ProcessWithMethods-A_taskUse_selectedStep">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-TaskUse-selectedStep-_ownedComment.0" annotatedElement="ProcessWithMethods-TaskUse-selectedStep">
						<body>List the steps that have been selected to be performed for the instance of the Task Use.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-TaskUse-task" name="task" type="MethodContent-TaskDefinition" lower="0" association="ProcessWithMethods-A_taskUse_task">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-TaskUse-task-_ownedComment.0" annotatedElement="ProcessWithMethods-TaskUse-task">
						<body>This association represents the reference from the Method Content Use to the Method Content Element it refers to.  Every Task Use can reference only on Task Definition.  However, a Task Definition can be represented by many Task Uses.  In the SPEM 2.0 Profile this association is instantiated by a dependency relationship with a trace stereotype.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-TaskUse-ownedProcessParameter" name="ownedProcessParameter" type="ProcessStructure-ProcessParameter" isOrdered="true" upper="*" lower="0" isComposite="true" association="ProcessWithMethods-A_taskUse_ownedParameter"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-TaskUse-usedQualification" name="usedQualification" visibility="public" type="MethodContent-Qualification" upper="*" lower="0" association="ProcessWithMethods-A_taskUse_usedQualification"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-TeamProfile" name="TeamProfile" superClass="ProcessWithMethods-BreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-TeamProfile-_ownedComment.0" annotatedElement="ProcessWithMethods-TeamProfile">
					<body>A Team Profile is a Breakdown Element that groups Role Uses or Composite Roles defining a nested hierarchy of teams and team members.&#xD;
Work assignments and Work Product responsibilities can be different from Activity to Activity in a development project. Different phases require different staffing profiles, i.e. different skills and resources doing different types of work.  Therefore, a process needs to define such different profiles in a flexible manner.  Whereas Core Method Content defines standard responsibilities and assignments, a process expressed in breakdown structures needs to be able to refine and redefine these throughout its definition.  Role Uses, Composite Roles, as well as Team Profiles provide the data structure necessary to achieve this flexibility and to provide a process user with the capability to define different teams and role relationships for every Activity (including Activities on any nesting-level as well as Iterations or Phases).&#xD;
Hence, in addition to the work breakdown and work product breakdown structures defined so far, Team Profiles are used to define a third type of breakdown structure: team breakdown structures.  These are created as an Activity specific hierarchy of Team Profiles comprising of Role Uses and Composite Roles.  These structures can be presented as well-known Org-Charts.  The diagram shows three instances of Team Profile forming a hierarchy (the top-level node being just a logical node just grouping all the teams and roles defined for an Activity together).  Every Team Profile instance has a number of Roles associated which will be represented as Role Uses.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-TeamProfile-superTeam" name="superTeam" type="ProcessWithMethods-TeamProfile" lower="0" association="ProcessWithMethods-A_superTeam_subTeam"/>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-TeamProfile-teamRole" name="teamRole" type="ProcessWithMethods-RoleUse" upper="*" lower="0" association="ProcessWithMethods-A_teamProfile_teamRole">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-TeamProfile-teamRole-_ownedComment.0" annotatedElement="ProcessWithMethods-TeamProfile-teamRole">
						<body>This association specifies the roles of team members with Role Uses.</body>
					</ownedComment>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-TeamProfile-subTeam" name="subTeam" type="ProcessWithMethods-TeamProfile" upper="*" lower="0" isComposite="true" association="ProcessWithMethods-A_superTeam_subTeam"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-WorkBreakdownElement" name="WorkBreakdownElement" isAbstract="true" superClass="ProcessWithMethods-BreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-WorkBreakdownElement-_ownedComment.0" annotatedElement="ProcessWithMethods-WorkBreakdownElement">
					<body>A Work Breakdown Element is a special Breakdown Element that provides specific properties for Breakdown Elements that represent or refer to Work Definitions.  For example its subclass Activity defines work as it is also a subclass of Work Definition.  Its subclass Task Descriptor does not define work by itself, but refers to a Work Definition and therefore can have the same common properties and Work Breakdown Element has.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-WorkProductUse" name="WorkProductUse" superClass="ProcessWithMethods-MethodContentUse">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-WorkProductUse-_ownedComment.0" annotatedElement="ProcessWithMethods-WorkProductUse">
					<body>A Work Product Use represents a Work Product Definition in the context of one specific Activity.  Every breakdown structure can define different relationships of Work Product Uses to Task Uses and Role Uses.  Therefore one Work Product Definition can be represented by many Work Product Uses each within the context of an Activity with its own set of relationships.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-WorkProductUse-workProduct" name="workProduct" type="MethodContent-WorkProductDefinition" lower="0" association="ProcessWithMethods-A_workProductUse_workProduct"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-ProcessElement" name="ProcessElement" isAbstract="true" superClass="Core-ExtensibleElement ProcessWithMethods-ProcessPackageableElement">
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-ProcessElement-processKind" name="processKind" type="ProcessWithMethods-ProcessKind" lower="0" redefinedProperty="Core-ExtensibleElement-kind" association="ProcessWithMethods-A_processElement_processKind"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-MethodContentElement" name="MethodContentElement" isAbstract="true" superClass="Core-ExtensibleElement ProcessWithMethods-MethodContentPackageableElement">
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-MethodContentElement-methodContentKind" name="methodContentKind" type="ProcessWithMethods-MethodContentKind" lower="0" redefinedProperty="Core-ExtensibleElement-kind" association="ProcessWithMethods-A_methodContentElement_methodContentKind"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="ProcessWithMethods-ProcessPerformer" name="ProcessPerformer" superClass="ProcessWithMethods-BreakdownElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-ProcessPerformer-_ownedComment.0" annotatedElement="ProcessWithMethods-ProcessPerformer">
					<body>Process Performer in this meta-model package extends the Process Performer of defined the Process Structure meta-model package with an additional association to Task Use.  Process Performer can be used optionally to indicate performance of an Activity or a Task Use.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="ProcessWithMethods-ProcessPerformer-linkedTaskUse" name="linkedTaskUse" type="ProcessWithMethods-TaskUse" association="ProcessWithMethods-A_processPerformer_linkedTaskUse">
					<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-ProcessPerformer-linkedTaskUse-_ownedComment.0" annotatedElement="ProcessWithMethods-ProcessPerformer-linkedTaskUse">
						<body>This association links exactly one Task Use to a Process Performer.</body>
					</ownedComment>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_roleUse_appliedQualification" name="A_roleUse_appliedQualification" memberEnd="ProcessWithMethods-RoleUse-appliedQualification ProcessWithMethods-A_roleUse_appliedQualification-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-A_roleUse_appliedQualification-_ownedComment.0" annotatedElement="ProcessWithMethods-A_roleUse_appliedQualification">
					<body>A Role Use can select a sub-set of valid Qualifications defined for the Role Definition for this one use of the Role Definition in the context of a particular Activity.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessWithMethods-A_roleUse_appliedQualification-_ownedEnd.0" visibility="private" type="ProcessWithMethods-RoleUse" upper="*" lower="0" owningAssociation="ProcessWithMethods-A_roleUse_appliedQualification" association="ProcessWithMethods-A_roleUse_appliedQualification"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_processElement_processKind" name="A_processElement_processKind" general="Core-A_extendedElement_kind" memberEnd="ProcessWithMethods-ProcessElement-processKind ProcessWithMethods-A_processElement_processKind-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessWithMethods-A_processElement_processKind-_ownedEnd.0" type="ProcessWithMethods-ProcessElement" upper="*" lower="0" isDerived="true" owningAssociation="ProcessWithMethods-A_processElement_processKind" association="ProcessWithMethods-A_processElement_processKind"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_methodContentElement_methodContentKind" name="A_methodContentElement_methodContentKind" general="Core-A_extendedElement_kind" memberEnd="ProcessWithMethods-MethodContentElement-methodContentKind ProcessWithMethods-A_methodContentElement_methodContentKind-_ownedEnd.0">
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessWithMethods-A_methodContentElement_methodContentKind-_ownedEnd.0" type="ProcessWithMethods-MethodContentElement" upper="*" lower="0" owningAssociation="ProcessWithMethods-A_methodContentElement_methodContentKind" association="ProcessWithMethods-A_methodContentElement_methodContentKind"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_taskUse_selectedStep" name="A_taskUse_selectedStep" memberEnd="ProcessWithMethods-TaskUse-selectedStep ProcessWithMethods-A_taskUse_selectedStep-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-A_taskUse_selectedStep-_ownedComment.0" annotatedElement="ProcessWithMethods-A_taskUse_selectedStep">
					<body>List the steps that have been selected to be performed for the instance of the Task Use.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessWithMethods-A_taskUse_selectedStep-_ownedEnd.0" type="ProcessWithMethods-TaskUse" upper="*" lower="0" owningAssociation="ProcessWithMethods-A_taskUse_selectedStep" association="ProcessWithMethods-A_taskUse_selectedStep"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_compositeRole_aggregatedRole" name="A_compositeRole_aggregatedRole" memberEnd="ProcessWithMethods-CompositeRole-aggregatedRole ProcessWithMethods-A_compositeRole_aggregatedRole-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-A_compositeRole_aggregatedRole-_ownedComment.0" annotatedElement="ProcessWithMethods-A_compositeRole_aggregatedRole">
					<body>This association lists all the Roles Definitions represented by the Composite Role.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessWithMethods-A_compositeRole_aggregatedRole-_ownedEnd.0" type="ProcessWithMethods-CompositeRole" upper="*" lower="0" owningAssociation="ProcessWithMethods-A_compositeRole_aggregatedRole" association="ProcessWithMethods-A_compositeRole_aggregatedRole"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_roleUse_role" name="A_roleUse_role" memberEnd="ProcessWithMethods-A_roleUse_role-_ownedEnd.0 ProcessWithMethods-RoleUse-role">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-A_roleUse_role-_ownedComment.0" annotatedElement="ProcessWithMethods-A_roleUse_role">
					<body>This association represents the reference from the Method Content Use to the method content element it refers to.  Every Role Use can reference only one Role Definition.  However, a Role Definition can be represented by many Role Uses.  In the SPEM 2.0 Profile this association is instantiated by a dependency relationship with a trace stereotype.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessWithMethods-A_roleUse_role-_ownedEnd.0" type="ProcessWithMethods-RoleUse" upper="*" lower="0" owningAssociation="ProcessWithMethods-A_roleUse_role" association="ProcessWithMethods-A_roleUse_role"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_workProductUse_workProduct" name="A_workProductUse_workProduct" memberEnd="ProcessWithMethods-A_workProductUse_workProduct-_ownedEnd.0 ProcessWithMethods-WorkProductUse-workProduct">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-A_workProductUse_workProduct-_ownedComment.0" annotatedElement="ProcessWithMethods-A_workProductUse_workProduct">
					<body>This association represents the reference from the Method Content Use to the core content element it refers to.  Every Work Product Use can reference only one Work Product Definition.  However, a Work Product can be represented by many Work Product Uses.  In the SPEM 2.0 Profile this association is instantiated by a dependency relationship with a trace stereotype.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessWithMethods-A_workProductUse_workProduct-_ownedEnd.0" type="ProcessWithMethods-WorkProductUse" upper="*" lower="0" owningAssociation="ProcessWithMethods-A_workProductUse_workProduct" association="ProcessWithMethods-A_workProductUse_workProduct"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_taskUse_task" name="A_taskUse_task" memberEnd="ProcessWithMethods-A_taskUse_task-_ownedEnd.0 ProcessWithMethods-TaskUse-task">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-A_taskUse_task-_ownedComment.0" annotatedElement="ProcessWithMethods-A_taskUse_task">
					<body>This association represents the reference from the Method Content Use to the Method Content Element it refers to.  Every Task Use can reference only on Task Definition.  However, a Task Definition can be represented by many Task Uses.  In the SPEM 2.0 Profile this association is instantiated by a dependency relationship with a trace stereotype.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessWithMethods-A_taskUse_task-_ownedEnd.0" type="ProcessWithMethods-TaskUse" upper="*" lower="0" owningAssociation="ProcessWithMethods-A_taskUse_task" association="ProcessWithMethods-A_taskUse_task"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_superTeam_subTeam" name="A_superTeam_subTeam" memberEnd="ProcessWithMethods-TeamProfile-subTeam ProcessWithMethods-TeamProfile-superTeam">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-A_superTeam_subTeam-_ownedComment.0" annotatedElement="ProcessWithMethods-A_superTeam_subTeam">
					<body>This composition association relates a Sub-Team to its Super-Team, i.e. the Team that it is part of.</body>
				</ownedComment>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_teamProfile_teamRole" name="A_teamProfile_teamRole" memberEnd="ProcessWithMethods-A_teamProfile_teamRole-_ownedEnd.0 ProcessWithMethods-TeamProfile-teamRole">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-A_teamProfile_teamRole-_ownedComment.0" annotatedElement="ProcessWithMethods-A_teamProfile_teamRole">
					<body>This association specifies the roles of team members with Role Uses.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessWithMethods-A_teamProfile_teamRole-_ownedEnd.0" type="ProcessWithMethods-TeamProfile" upper="*" lower="0" owningAssociation="ProcessWithMethods-A_teamProfile_teamRole" association="ProcessWithMethods-A_teamProfile_teamRole"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_taskUse_ownedParameter" name="A_taskUse_ownedParameter" memberEnd="ProcessWithMethods-TaskUse-ownedProcessParameter ProcessWithMethods-A_taskUse_ownedParameter-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-A_taskUse_ownedParameter-_ownedComment.0" annotatedElement="ProcessWithMethods-A_taskUse_ownedParameter">
					<body>This ordered association links a Task Use to its Process Parameters.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessWithMethods-A_taskUse_ownedParameter-_ownedEnd.0" type="ProcessWithMethods-TaskUse" owningAssociation="ProcessWithMethods-A_taskUse_ownedParameter" association="ProcessWithMethods-A_taskUse_ownedParameter"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_breakdownElement_planningData" name="A_breakdownElement_planningData" memberEnd="ProcessWithMethods-BreakdownElement-planningData ProcessWithMethods-A_breakdownElement_planningData-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-A_breakdownElement_planningData-_ownedComment.0" annotatedElement="ProcessWithMethods-A_breakdownElement_planningData">
					<body>The PlanningData class factors out specific optional data needed for representing planning templates.  This association allows to access planning data if it is stored for the Breakdown Element.</body>
				</ownedComment>
				<general xmi:type="cmof:Association" href="Infrastructure.cmof#Core-Constructs-A_ownedElement_owner"/>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessWithMethods-A_breakdownElement_planningData-_ownedEnd.0" type="ProcessWithMethods-BreakdownElement" owningAssociation="ProcessWithMethods-A_breakdownElement_planningData" association="ProcessWithMethods-A_breakdownElement_planningData"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_owningProcessPackage_ownedProcessMember" name="A_owningProcessPackage_ownedProcessMember" memberEnd="ProcessWithMethods-ProcessPackage-ownedProcessMember ProcessWithMethods-A_owningProcessPackage_ownedProcessMember-owningProcessPackage">
				<general xmi:type="cmof:Association" href="Infrastructure.cmof#Core-Constructs-A_packagedElement_owningPackage"/>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessWithMethods-A_owningProcessPackage_ownedProcessMember-owningProcessPackage" name="owningProcessPackage" type="ProcessWithMethods-ProcessPackage" lower="0" owningAssociation="ProcessWithMethods-A_owningProcessPackage_ownedProcessMember" association="ProcessWithMethods-A_owningProcessPackage_ownedProcessMember"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_owningMethodContentPackage_ownedMethodContentMember" name="A_owningMethodContentPackage_ownedMethodContentMember" memberEnd="ProcessWithMethods-MethodContentPackage-ownedMethodContentMember ProcessWithMethods-A_owningMethodContentPackage_ownedMethodContentMember-owningMethodContentPackage">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-A_owningMethodContentPackage_ownedMethodContentMember-_ownedComment.0" annotatedElement="ProcessWithMethods-A_owningMethodContentPackage_ownedMethodContentMember">
					<body>A Method Content Package contains Method Content Packageable Elements.  A Method Content Element instance can be part of only one package instance.</body>
				</ownedComment>
				<general xmi:type="cmof:Association" href="Infrastructure.cmof#Core-Constructs-A_packagedElement_owningPackage"/>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessWithMethods-A_owningMethodContentPackage_ownedMethodContentMember-owningMethodContentPackage" name="owningMethodContentPackage" type="ProcessWithMethods-MethodContentPackage" lower="0" owningAssociation="ProcessWithMethods-A_owningMethodContentPackage_ownedMethodContentMember" association="ProcessWithMethods-A_owningMethodContentPackage_ownedMethodContentMember"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_processPerformer_linkedTaskUse" name="A_processPerformer_linkedTaskUse" memberEnd="ProcessWithMethods-ProcessPerformer-linkedTaskUse ProcessWithMethods-A_processPerformer_linkedTaskUse-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-A_processPerformer_linkedTaskUse-_ownedComment.0" annotatedElement="ProcessWithMethods-A_processPerformer_linkedTaskUse">
					<body>This association links exactly one Task Use to a Process Performer.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessWithMethods-A_processPerformer_linkedTaskUse-_ownedEnd.0" type="ProcessWithMethods-ProcessPerformer" upper="*" lower="0" owningAssociation="ProcessWithMethods-A_processPerformer_linkedTaskUse" association="ProcessWithMethods-A_processPerformer_linkedTaskUse"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="ProcessWithMethods-A_taskUse_usedQualification" name="A_taskUse_usedQualification" memberEnd="ProcessWithMethods-TaskUse-usedQualification ProcessWithMethods-A_taskUse_usedQualification-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="ProcessWithMethods-A_taskUse_usedQualification-_ownedComment.0" annotatedElement="ProcessWithMethods-A_taskUse_usedQualification">
					<body>A Task Use can select a sub-set of valid Qualifications defined for the Task Definition for this one use of the Task Definition in the context of a particular Activity.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="ProcessWithMethods-A_taskUse_usedQualification-_ownedEnd.0" name="" visibility="private" type="ProcessWithMethods-TaskUse" upper="*" lower="0" owningAssociation="ProcessWithMethods-A_taskUse_usedQualification" association="ProcessWithMethods-A_taskUse_usedQualification"/>
			</ownedMember>
		</ownedMember>
		<ownedMember xmi:type="cmof:Package" xmi:id="Core" name="Core">
			<ownedComment xmi:type="cmof:Comment" xmi:id="Core-_ownedComment.0" annotatedElement="Core">
				<body>The Core meta-model package contains that meta-model classes and abstractions that build the fundament for all other meta-model packages.  In other words, all the common classes amongst all compliance levels defining the core of SPEM 2.0 have been place here.  Core mainly defines classes for two SPEM 2.0 capabilities:  (1) The ability for a SPEM 2.0 user to create user-defined qualifications for a SPEM 2.0 classes allowing users to distinguish different 'kinds' SPEM 2.0 class instances. (2) A set of abstract classes to define work expressed as SPEM 2.0 processes.  All SPEM 2.0 classes that derive from these classes are intended to map to behavior classes of behavior models (e.g. can be assigned as stereotypes to UML 2.0 Activities or linked to behaviored classifiers).&#xD;
</body>
			</ownedComment>
			<ownedMember xmi:type="cmof:Class" xmi:id="Core-WorkDefinition" name="WorkDefinition" isAbstract="true">
				<ownedComment xmi:type="cmof:Comment" xmi:id="Core-WorkDefinition-_ownedComment.0" annotatedElement="Core-WorkDefinition">
					<body>Work Definition is an abstract Classifier that generalizes all definitions of work within SPEM 2.0.  Work Definition defines some default associations to Work Definition Parameter and Constraint. Work Definitions can contain sets of pre- and post-conditions defining constraints that need to be valid before the described work can begin or before it can be declared as finished.  Note that general UML constraints inherited via Classifier can be used to define additional constraints and rules for Work Definitions.&#xD;
Work Definitions represent the behavior for doing work.  In contrast to SPEM 1.1 the Work Definition behavior is not bound to one specific classifier as an operation, but is a performer independent definition of work represented as a classifier itself.  For example, a Work Definition could represent work that is being performed by one specific Role (e.g. a Role performing a specific Activity), by many Roles working in close collaboration (many Roles all working together on the same interdisciplinary Activity), or complex work that is performed throughout the lifecycle (e.g. a process defining a breakdown structure for organizing larger composite units of work performed by many Roles working in collaboration).&#xD;
Work Definitions can be modeled with behavior model representations such as UML 2.0 Activity diagrams by merging this UML 2.0 meta-model package into the Process Behavior package.  However, it is also a common practice to just textually describe the behavior of work definitions. Such descriptions can be added by merging this package into the Managed Content package.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="Core-WorkDefinition-postcondition" name="postcondition" upper="*" lower="0" isComposite="true" association="Core-A_workDefinition_postcondition">
					<ownedComment xmi:type="cmof:Comment" xmi:id="Core-WorkDefinition-postcondition-_ownedComment.0" annotatedElement="Core-WorkDefinition-postcondition">
						<body>This composition association adds an optional post-condition to a Work Definition.  A post-condition defines any kind of constraint that must evaluate to true before the work described for the Work Definition can be declared completed or finished and which other Work Definitions might depend upon (e.g. for their pre-conditions).  For example, a post-condition could define that a work product defined to be the output must be in a specific state before the Work Definition can end (e.g. ‘Use Case must be in state fully described and reviewed by System Analyst’).</body>
					</ownedComment>
					<type xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Constraint"/>
					<subsettedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-Namespace-ownedRule"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="Core-WorkDefinition-precondition" name="precondition" upper="*" lower="0" isComposite="true" association="Core-A_workDefinition_precondition">
					<ownedComment xmi:type="cmof:Comment" xmi:id="Core-WorkDefinition-precondition-_ownedComment.0" annotatedElement="Core-WorkDefinition-precondition">
						<body>This composition association adds an optional pre-condition to a Work Definition.  A pre-condition defines any kind of constraint that must evaluate to true before the work described for the Work Definition can start. For example, a pre-condition could define that an input Work Product needs to be in a specific state or that other related work must be in a certain state (e.g. ‘Input document X has been reviewed and signed by customer AND the work defined by Work Definition “Management Review” is complete’) before the work can begin.</body>
					</ownedComment>
					<type xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Constraint"/>
					<subsettedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-Namespace-ownedRule"/>
				</ownedAttribute>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="Core-WorkDefinition-ownedParameter" name="ownedParameter" type="Core-WorkDefinitionParameter" isOrdered="true" upper="*" lower="0" isReadOnly="true" isDerived="true" isDerivedUnion="true" isComposite="true" association="Core-A_workDefinition_ownedParameter">
					<ownedComment xmi:type="cmof:Comment" xmi:id="Core-WorkDefinition-ownedParameter-_ownedComment.0" annotatedElement="Core-WorkDefinition-ownedParameter">
						<body>Work Definition can define an ordered set of parameters to specify inputs and outputs.  The concrete subclasses of Work Definition need to define their own subclasses of Work Definition Parameter to add reference to concrete input/output meta types.</body>
					</ownedComment>
					<subsettedProperty xmi:type="cmof:Property" href="Infrastructure.cmof#Core-Constructs-Element-ownedElement"/>
				</ownedAttribute>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Classifier"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="Core-WorkDefinitionParameter" name="WorkDefinitionParameter" isAbstract="true">
				<ownedComment xmi:type="cmof:Comment" xmi:id="Core-WorkDefinitionParameter-_ownedComment.0" annotatedElement="Core-WorkDefinitionParameter">
					<body>A Work Definition Parameter is an abstract generalization for Process Elements that represent parameter for Work Definitions.  It is used for declarations of inputs and outputs.  The meta-classes for the input/output types are to be defined by Work Definition Parameters concrete subclasses.&#xD;
This class is to be specialized by a class defining an association to the class defining the input/output meta-class. SPEM 2.0 distinguishes between Work Product Definitions and Work Product Use.  The general parameter class Work Definition Parameter defines common properties used by Work Definition specialization that either use Work Product Definitions or Work Product Uses.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="Core-WorkDefinitionParameter-direction" name="direction" type="Core-ParameterDirectionKind" default="inout">
					<ownedComment xmi:type="cmof:Comment" xmi:id="Core-WorkDefinitionParameter-direction-_ownedComment.0" annotatedElement="Core-WorkDefinitionParameter-direction">
						<body>This attribute represents the kind of the input as specified by the enumeration Parameter Direction Kind.</body>
					</ownedComment>
				</ownedAttribute>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Classifier"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="Core-WorkDefinitionPerformer" name="WorkDefinitionPerformer" isAbstract="true">
				<ownedComment xmi:type="cmof:Comment" xmi:id="Core-WorkDefinitionPerformer-_ownedComment.0" annotatedElement="Core-WorkDefinitionPerformer">
					<body>Work Definition Performer is an abstract Classifier that represents the relationship of a work performer to a Work Definition.  Different specialization of Work Definition will introduce different kinds of performers.  Work Definition Performer is intended to be specialized adding the association to the concrete performer class.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="Core-WorkDefinitionPerformer-linkedWorkDefinition" name="linkedWorkDefinition" type="Core-WorkDefinition" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="Core-A_workDefinitionPerformer_WorkDefinition">
					<ownedComment xmi:type="cmof:Comment" xmi:id="Core-WorkDefinitionPerformer-linkedWorkDefinition-_ownedComment.0" annotatedElement="Core-WorkDefinitionPerformer-linkedWorkDefinition">
						<body>This derived union provides access to all the Work Definitions a Work Definition Performer instance is related to.</body>
					</ownedComment>
				</ownedAttribute>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Classifier"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="Core-Kind" name="Kind" superClass="Core-ExtensibleElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="Core-Kind-_ownedComment.0" annotatedElement="Core-Kind">
					<body>Kind is an Extensible Element which instances are used to qualify other SPEM 2.0 Extensible Element instances with a user-defined type or kind.&#xD;
As many methods and processes to be modeled with SPEM 2.0 need to define their own refined vocabulary, Kind provides the ability to a SPEM 2.0 modeler to expresses such user-defined qualifications for instances of Extensible Element.  Because Kind is an Extensible Element itself one can define Kinds for the Kind class itself as well.&#xD;
For example, a subclass of Extensible Elements that typically utilizes Kinds is the meta-model class Guidance. Typical Guidance kinds would be: White Paper, Guideline, Checklist, Template, Reports, etc.  Because of the Applicable MetaClass constraints, these Kinds can only be related to instances of the Guidance class as well as instances of any subclasses of Guidance such as Metric.&#xD;
Other examples are Kinds for Breakdown Elements such as Phase, Iteration, Sprint, or Increment; Kinds of Work Products such as Artifact, Deliverable, or Outcome; Kinds of Categories such as Classification, View, Grouping, Practice, Discipline, Domain, etc.  All of these allow SPEM 2.0 users to distinguish the special kinds of SPEM 2.0 elements that play important role in their method or process.</body>
				</ownedComment>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="Core-Kind-applicableMetaClass" name="applicableMetaClass" association="Core-A_kind_applicableMetaclass">
					<ownedComment xmi:type="cmof:Comment" xmi:id="Core-Kind-applicableMetaClass-_ownedComment.0" annotatedElement="Core-Kind-applicableMetaClass">
						<body>An instance of Kind can only be used for instances of exactly one SPEM 2.0 Extensible Element subclass or its subclasses.  This property specifies which one.</body>
					</ownedComment>
					<type xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Class"/>
				</ownedAttribute>
			</ownedMember>
			<ownedMember xmi:type="cmof:Class" xmi:id="Core-ExtensibleElement" name="ExtensibleElement" isAbstract="true">
				<ownedComment xmi:type="cmof:Comment" xmi:id="Core-ExtensibleElement-_ownedComment.0" annotatedElement="Core-ExtensibleElement">
					<body>Extensible Element is an abstract generalization that represents any SPEM 2.0 class for which it is possible to assign a Kind to its instances expressing a user-defined qualification.  Every SPEM 2.0 class that allows such a qualification derives directly or indirectly from Extensible Element.&#xD;
Extensible Element provides the property to relate a Kind class for its sub-classes.  Such Kinds cannot be reused for many different subtypes of Extensible Element and therefore can only be related to exactly one meta-model class.&#xD;
Extensible Element defines a constraint called Applicable MetaClass.  The constraint defines that the Kind an instance of Extensible Element links to has to link to an applicable Meta Class that is either of the same class as Extensible Element or a superclass of the Extensible Element class.  See Kind for more details.</body>
				</ownedComment>
				<ownedRule xmi:type="cmof:Constraint" xmi:id="Core-ExtensibleElement-ApplicableMetaClass" name="Applicable MetaClass" constrainedElement="Core-Kind" namespace="Core-ExtensibleElement">
					<specification xmi:type="cmof:OpaqueExpression" xmi:id="Core-ExtensibleElement-ApplicableMetaClass-_specification">
						<language>OCL</language>
						<body>self.conformsTo(self.kind.applicableMetaClass)</body>
					</specification>
				</ownedRule>
				<ownedAttribute xmi:type="cmof:Property" xmi:id="Core-ExtensibleElement-kind" name="kind" type="Core-Kind" lower="0" association="Core-A_extendedElement_kind">
					<ownedComment xmi:type="cmof:Comment" xmi:id="Core-ExtensibleElement-kind-_ownedComment.0" annotatedElement="Core-ExtensibleElement-kind">
						<body>An instance of Extensible Element can be linked to zero or one Kind in which the Kind instance expresses a specific user-defined qualification for that Extensible Element instance.</body>
					</ownedComment>
				</ownedAttribute>
				<superClass xmi:type="cmof:Class" href="Infrastructure.cmof#Core-Constructs-Classifier"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Enumeration" xmi:id="Core-ParameterDirectionKind" name="ParameterDirectionKind">
				<ownedComment xmi:type="cmof:Comment" xmi:id="Core-ParameterDirectionKind-_ownedComment.0" annotatedElement="Core-ParameterDirectionKind">
					<body>This enumeration defines for Work Definition Parameter instances whether the parameter represents an input, output, or input as well as output.</body>
				</ownedComment>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="Core-ParameterDirectionKind-in" name="in" enumeration="Core-ParameterDirectionKind">
					<ownedComment xmi:type="cmof:Comment" xmi:id="Core-ParameterDirectionKind-in-_ownedComment.0" annotatedElement="Core-ParameterDirectionKind-in">
						<body>A Work Definition Parameter instance with this direction value represents an input.</body>
					</ownedComment>
				</ownedLiteral>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="Core-ParameterDirectionKind-out" name="out" enumeration="Core-ParameterDirectionKind">
					<ownedComment xmi:type="cmof:Comment" xmi:id="Core-ParameterDirectionKind-out-_ownedComment.0" annotatedElement="Core-ParameterDirectionKind-out">
						<body>A Work Definition Parameter instance with this direction value represents an output.</body>
					</ownedComment>
				</ownedLiteral>
				<ownedLiteral xmi:type="cmof:EnumerationLiteral" xmi:id="Core-ParameterDirectionKind-inout" name="inout" enumeration="Core-ParameterDirectionKind">
					<ownedComment xmi:type="cmof:Comment" xmi:id="Core-ParameterDirectionKind-inout-_ownedComment.0" annotatedElement="Core-ParameterDirectionKind-inout">
						<body>A Work Definition Parameter instance with this direction value represents an input and output.</body>
					</ownedComment>
				</ownedLiteral>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="Core-A_kind_applicableMetaclass" name="A_kind_applicableMetaclass" memberEnd="Core-Kind-applicableMetaClass Core-A_kind_applicableMetaclass-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="Core-A_kind_applicableMetaclass-_ownedComment.0" annotatedElement="Core-A_kind_applicableMetaclass">
					<body>An instance of Kind can only be used for instances of exactly one SPEM 2.0 Extensible Element subclass or its subclasses.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="Core-A_kind_applicableMetaclass-_ownedEnd.0" visibility="private" type="Core-Kind" upper="*" lower="0" owningAssociation="Core-A_kind_applicableMetaclass" association="Core-A_kind_applicableMetaclass"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="Core-A_workDefinitionPerformer_WorkDefinition" name="A_workDefinitionPerformer_WorkDefinition" memberEnd="Core-WorkDefinitionPerformer-linkedWorkDefinition Core-A_workDefinitionPerformer_WorkDefinition-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="Core-A_workDefinitionPerformer_WorkDefinition-_ownedComment.0" annotatedElement="Core-A_workDefinitionPerformer_WorkDefinition">
					<body>This derived union provides access to all the Work Definitions a Work Definition Performer instance is related to.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="Core-A_workDefinitionPerformer_WorkDefinition-_ownedEnd.0" visibility="private" type="Core-WorkDefinitionPerformer" upper="*" lower="0" owningAssociation="Core-A_workDefinitionPerformer_WorkDefinition" association="Core-A_workDefinitionPerformer_WorkDefinition"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="Core-A_workDefinition_postcondition" name="A_workDefinition_postcondition" memberEnd="Core-WorkDefinition-postcondition Core-A_workDefinition_postcondition-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="Core-A_workDefinition_postcondition-_ownedComment.0" annotatedElement="Core-A_workDefinition_postcondition">
					<body>This composition association adds an optional post-condition to a Work Definition.  A post-condition defines any kind of constraint that must evaluate to true before the work described for the Work Definition can be declared completed or finished and which other Work Definitions might depend upon (e.g. for their pre-conditions).  For example, a post-condition could define that a work product defined to be the output must be in a specific state before the Work Definition can end (e.g. ‘Use Case must be in state fully described and reviewed by System Analyst’).</body>
				</ownedComment>
				<general xmi:type="cmof:Association" href="Infrastructure.cmof#Core-Constructs-A_ownedRule_context"/>
				<ownedEnd xmi:type="cmof:Property" xmi:id="Core-A_workDefinition_postcondition-_ownedEnd.0" type="Core-WorkDefinition" lower="0" owningAssociation="Core-A_workDefinition_postcondition" association="Core-A_workDefinition_postcondition"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="Core-A_workDefinition_precondition" name="A_workDefinition_precondition" memberEnd="Core-WorkDefinition-precondition Core-A_workDefinition_precondition-_ownedEnd.0">
				<ownedComment xmi:type="cmof:Comment" xmi:id="Core-A_workDefinition_precondition-_ownedComment.0" annotatedElement="Core-A_workDefinition_precondition">
					<body>This composition association adds an optional pre-condition to a Work Definition.  A pre-condition defines any kind of constraint that must evaluate to true before the work described for the Work Definition can start. For example, a pre-condition could define that an input Work Product needs to be in a specific state or that other related work must be in a certain state (e.g. ‘Input document X has been reviewed and signed by customer AND the work defined by Work Definition “Management Review” is complete’) before the work can begin.</body>
				</ownedComment>
				<general xmi:type="cmof:Association" href="Infrastructure.cmof#Core-Constructs-A_ownedRule_context"/>
				<ownedEnd xmi:type="cmof:Property" xmi:id="Core-A_workDefinition_precondition-_ownedEnd.0" type="Core-WorkDefinition" lower="0" owningAssociation="Core-A_workDefinition_precondition" association="Core-A_workDefinition_precondition"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="Core-A_workDefinition_ownedParameter" name="A_workDefinition_ownedParameter" memberEnd="Core-A_workDefinition_ownedParameter-_ownedEnd.0 Core-WorkDefinition-ownedParameter">
				<ownedComment xmi:type="cmof:Comment" xmi:id="Core-A_workDefinition_ownedParameter-_ownedComment.0" annotatedElement="Core-A_workDefinition_ownedParameter">
					<body>Work Definition can define an ordered set of parameters to specify inputs and outputs.  The concrete subclasses of Work Definition need to define their own subclasses of Work Definition Parameter to add reference to concrete input/output meta types.</body>
				</ownedComment>
				<general xmi:type="cmof:Association" href="Infrastructure.cmof#Core-Constructs-A_ownedElement_owner"/>
				<ownedEnd xmi:type="cmof:Property" xmi:id="Core-A_workDefinition_ownedParameter-_ownedEnd.0" type="Core-WorkDefinition" owningAssociation="Core-A_workDefinition_ownedParameter" association="Core-A_workDefinition_ownedParameter"/>
			</ownedMember>
			<ownedMember xmi:type="cmof:Association" xmi:id="Core-A_extendedElement_kind" name="A_extendedElement_kind" memberEnd="Core-ExtensibleElement-kind Core-A_extendedElement_kind-extendedElement">
				<ownedComment xmi:type="cmof:Comment" xmi:id="Core-A_extendedElement_kind-_ownedComment.0" annotatedElement="Core-A_extendedElement_kind">
					<body>An instance of Extensible Element can be linked to zero or one Kind in which the Kind instance expresses a specific user-defined qualification for that Extensible Element instance.</body>
				</ownedComment>
				<ownedEnd xmi:type="cmof:Property" xmi:id="Core-A_extendedElement_kind-extendedElement" name="extendedElement" type="Core-ExtensibleElement" upper="*" lower="0" isDerived="true" owningAssociation="Core-A_extendedElement_kind" association="Core-A_extendedElement_kind"/>
			</ownedMember>
		</ownedMember>
	</cmof:Package>
</xmi:XMI>
