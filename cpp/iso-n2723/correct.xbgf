<?xml version="1.0" encoding="UTF-8"?>
<xbgf:sequence xmlns:xbgf="http://planet-sl.org/xbgf" xmlns:bgf="http://planet-sl.org/bgf">
<!-- The extractor broke a valid nonterminal name to a sequence of two terminals and a nonterminal -->
	<xbgf:replace>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>static_assert</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>-</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>declaration</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
		<bgf:expression>
			<nonterminal>static_assert-declaration</nonterminal>
		</bgf:expression>
	</xbgf:replace>
<!-- The extractor cannot tell "operator" from operator -->
	<xbgf:redefine>
		<bgf:production>
			<nonterminal>operator-function-id</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>operator</terminal>
					</bgf:expression>
					<bgf:expression>
						<nonterminal>operator</nonterminal>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:redefine>
<!-- line continuation is not recognised -->
	<xbgf:redefine>
		<bgf:production>
			<nonterminal>lambda-parameter-declaration</nonterminal>
			<bgf:expression>
				<sequence>
					<bgf:expression>
						<terminal>(</terminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>lambda-parameter-declaration-list</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<terminal>)</terminal>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<terminal>mutable</terminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>exception-specification</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
					<bgf:expression>
						<optional>
							<bgf:expression>
								<nonterminal>lambda-return-type-clause</nonterminal>
							</bgf:expression>
						</optional>
					</bgf:expression>
				</sequence>
			</bgf:expression>
		</bgf:production>
	</xbgf:redefine>
<!-- Somehow the tilde was copy-pasted as a tilde plus a newline -->
	<xbgf:redefine>
		<bgf:production>
			<nonterminal>pseudo-destructor-name</nonterminal>
			<bgf:expression>
				<choice>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<terminal>::</terminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>nested-name-specifier</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>type-name</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>::</terminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>~</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>type-name</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<terminal>::</terminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>nested-name-specifier</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>template</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>simple-template-id</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>::</terminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>~</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>type-name</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<terminal>::</terminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>nested-name-specifier</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<terminal>~</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>type-name</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
				</choice>
			</bgf:expression>
		</bgf:production>
	</xbgf:redefine>
<!-- Somehow the double bar was copy-pasted as a double bar plus a newline -->
	<xbgf:redefine>
		<bgf:production>
			<nonterminal>logical-or-expression</nonterminal>
			<bgf:expression>
				<choice>
					<bgf:expression>
						<nonterminal>logical-and-expression</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>logical-or-expression</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>||</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>logical-and-expression</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
				</choice>
			</bgf:expression>
		</bgf:production>
	</xbgf:redefine>
<!-- Line continuations went undetected -->
	<xbgf:redefine>
		<bgf:production>
			<nonterminal>direct-declarator</nonterminal>
			<bgf:expression>
				<choice>
					<bgf:expression>
						<nonterminal>declarator-id</nonterminal>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>direct-declarator</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>(</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>parameter-declaration-clause</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>)</terminal>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>cv-qualifier-seq</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>ref-qualifier</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>exception-specification</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>direct-declarator</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>(</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>parameter-declaration-clause</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>)</terminal>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>cv-qualifier-seq</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>ref-qualifier</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>exception-specification</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<terminal>-&gt;</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>type-id</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<nonterminal>direct-declarator</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>[</terminal>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>constant-expression</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<terminal>]</terminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<terminal>(</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>declarator</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>)</terminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
				</choice>
			</bgf:expression>
		</bgf:production>
	</xbgf:redefine>
<!-- Line continuations went undetected -->
	<xbgf:redefine>
		<bgf:production>
			<nonterminal>direct-abstract-declarator</nonterminal>
			<bgf:expression>
				<choice>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>direct-abstract-declarator</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<terminal>(</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>parameter-declaration-clause</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>)</terminal>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>cv-qualifier-seq</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>ref-qualifier</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>exception-specification</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>direct-abstract-declarator</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<terminal>(</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>parameter-declaration-clause</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>)</terminal>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>cv-qualifier-seq</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>ref-qualifier</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>exception-specification</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<terminal>-&gt;</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>type-id</nonterminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>direct-abstract-declarator</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<terminal>[</terminal>
							</bgf:expression>
							<bgf:expression>
								<optional>
									<bgf:expression>
										<nonterminal>constant-expression</nonterminal>
									</bgf:expression>
								</optional>
							</bgf:expression>
							<bgf:expression>
								<terminal>]</terminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
					<bgf:expression>
						<sequence>
							<bgf:expression>
								<terminal>(</terminal>
							</bgf:expression>
							<bgf:expression>
								<nonterminal>abstract-declarator</nonterminal>
							</bgf:expression>
							<bgf:expression>
								<terminal>)</terminal>
							</bgf:expression>
						</sequence>
					</bgf:expression>
				</choice>
			</bgf:expression>
		</bgf:production>
	</xbgf:redefine>
<!-- The extractor cannot tell "operator" from operator -->
	<xbgf:replace>
		<bgf:expression>
			<nonterminal>operator</nonterminal>
		</bgf:expression>
		<bgf:expression>
			<terminal>operator</terminal>
		</bgf:expression>
		<in>
			<nonterminal>conversion-function-id</nonterminal>
		</in>
	</xbgf:replace>
</xbgf:sequence>
