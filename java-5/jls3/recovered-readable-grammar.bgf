<?xml version="1.0" encoding="UTF-8"?>
<bgf:grammar xmlns:bgf="http://planet-sl.org/bgf">
	<root>CompilationUnit</root>
	<bgf:production>
		<nonterminal>ClassBodyDeclarations</nonterminal>
		<bgf:expression>
			<nonterminal>ClassBodyDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassBodyDeclarations</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ClassBodyDeclarations</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ClassBodyDeclaration</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>NormalClassDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ClassModifiers</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>class</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>TypeParameters</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Super</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Interfaces</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ClassBody</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PostDecrementExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>PostfixExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>--</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ReferenceTypeList</nonterminal>
		<bgf:expression>
			<nonterminal>ReferenceType</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ReferenceTypeList</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ReferenceTypeList</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>,</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ReferenceType</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PrimitiveType</nonterminal>
		<bgf:expression>
			<nonterminal>NumericType</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PrimitiveType</nonterminal>
		<bgf:expression>
			<terminal>boolean</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceTypeList</nonterminal>
		<bgf:expression>
			<nonterminal>InterfaceType</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceTypeList</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>InterfaceTypeList</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>,</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>InterfaceType</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Statement</nonterminal>
		<bgf:expression>
			<nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Statement</nonterminal>
		<bgf:expression>
			<nonterminal>LabeledStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Statement</nonterminal>
		<bgf:expression>
			<nonterminal>IfThenStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Statement</nonterminal>
		<bgf:expression>
			<nonterminal>IfThenElseStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Statement</nonterminal>
		<bgf:expression>
			<nonterminal>WhileStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Statement</nonterminal>
		<bgf:expression>
			<nonterminal>ForStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AndExpression</nonterminal>
		<bgf:expression>
			<nonterminal>EqualityExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AndExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>AndExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>&amp;</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>EqualityExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Annotations</nonterminal>
		<bgf:expression>
			<nonterminal>Annotation</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Annotations</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>Annotations</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Annotation</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstructorBody</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>{</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ExplicitConstructorInvocation</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>BlockStatements</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>}</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeParameter</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>TypeVariable</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>TypeBound</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ArgumentList</nonterminal>
		<bgf:expression>
			<nonterminal>Expression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ArgumentList</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ArgumentList</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>,</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodName</nonterminal>
		<bgf:expression>
			<nonterminal>Identifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodName</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>AmbiguousName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassMemberDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>FieldDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassMemberDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>MethodDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassMemberDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>ClassDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassMemberDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>InterfaceDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassMemberDeclaration</nonterminal>
		<bgf:expression>
			<terminal>;</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Assignment</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>LeftHandSide</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>AssignmentOperator</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>AssignmentExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Interfaces</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>implements</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>InterfaceTypeList</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>CatchClause</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>catch</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>FormalParameter</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Block</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AbstractMethodModifiers</nonterminal>
		<bgf:expression>
			<nonterminal>AbstractMethodModifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AbstractMethodModifiers</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>AbstractMethodModifiers</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>AbstractMethodModifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassInstanceCreationExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>new</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>TypeArguments</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ClassOrInterfaceType</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ArgumentList</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ClassBody</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassInstanceCreationExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>Primary</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>new</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>TypeArguments</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>TypeArguments</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ArgumentList</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ClassBody</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeName</nonterminal>
		<bgf:expression>
			<nonterminal>Identifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeName</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>PackageOrTypeName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceType</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>TypeDeclSpecifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>TypeArguments</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>BlockStatement</nonterminal>
		<bgf:expression>
			<nonterminal>LocalVariableDeclarationStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>BlockStatement</nonterminal>
		<bgf:expression>
			<nonterminal>ClassDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>BlockStatement</nonterminal>
		<bgf:expression>
			<nonterminal>Statement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>IfThenStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>if</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Statement</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Annotation</nonterminal>
		<bgf:expression>
			<nonterminal>NormalAnnotation</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Annotation</nonterminal>
		<bgf:expression>
			<nonterminal>MarkerAnnotation</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Annotation</nonterminal>
		<bgf:expression>
			<nonterminal>SingleElementAnnotation</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>SwitchBlockStatementGroups</nonterminal>
		<bgf:expression>
			<nonterminal>SwitchBlockStatementGroup</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>SwitchBlockStatementGroups</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>SwitchBlockStatementGroups</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>SwitchBlockStatementGroup</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>EnumConstant</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>Annotations</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Arguments</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ClassBody</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassModifier</nonterminal>
		<bgf:expression>
			<nonterminal>Annotation</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassModifier</nonterminal>
		<bgf:expression>
			<terminal>public</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassModifier</nonterminal>
		<bgf:expression>
			<terminal>protected</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassModifier</nonterminal>
		<bgf:expression>
			<terminal>private</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassModifier</nonterminal>
		<bgf:expression>
			<terminal>abstract</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassModifier</nonterminal>
		<bgf:expression>
			<terminal>static</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassModifier</nonterminal>
		<bgf:expression>
			<terminal>final</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassModifier</nonterminal>
		<bgf:expression>
			<terminal>strictfp</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>EnumBodyDeclarations</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ClassBodyDeclarations</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>SingleTypeImportDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>import</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>TypeName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AnnotationTypeDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>InterfaceModifiers</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>@</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>interface</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>AnnotationTypeBody</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstantDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ConstantModifiers</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Type</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>VariableDeclarators</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PreIncrementExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>++</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>UnaryExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ExplicitConstructorInvocation</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>NonWildTypeArguments</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>this</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ArgumentList</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ExplicitConstructorInvocation</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>NonWildTypeArguments</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>super</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ArgumentList</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ExplicitConstructorInvocation</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>Primary</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>NonWildTypeArguments</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>super</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ArgumentList</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ActualTypeArgumentList</nonterminal>
		<bgf:expression>
			<nonterminal>ActualTypeArgument</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ActualTypeArgumentList</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ActualTypeArgumentList</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>,</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ActualTypeArgument</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>VariableInitializers</nonterminal>
		<bgf:expression>
			<nonterminal>VariableInitializer</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>VariableInitializers</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>VariableInitializers</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>,</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>VariableInitializer</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>DimExpr</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>[</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>]</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Throws</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>throws</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ExceptionTypeList</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>BlockStatements</nonterminal>
		<bgf:expression>
			<nonterminal>BlockStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>BlockStatements</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>BlockStatements</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>BlockStatement</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceModifiers</nonterminal>
		<bgf:expression>
			<nonterminal>InterfaceModifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceModifiers</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>InterfaceModifiers</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>InterfaceModifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PrimaryNoNewArray</nonterminal>
		<bgf:expression>
			<nonterminal>Literal</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PrimaryNoNewArray</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>Type</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>class</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PrimaryNoNewArray</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>void</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>class</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PrimaryNoNewArray</nonterminal>
		<bgf:expression>
			<terminal>this</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PrimaryNoNewArray</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ClassName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>this</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PrimaryNoNewArray</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PrimaryNoNewArray</nonterminal>
		<bgf:expression>
			<nonterminal>ClassInstanceCreationExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PrimaryNoNewArray</nonterminal>
		<bgf:expression>
			<nonterminal>FieldAccess</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PrimaryNoNewArray</nonterminal>
		<bgf:expression>
			<nonterminal>MethodInvocation</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PrimaryNoNewArray</nonterminal>
		<bgf:expression>
			<nonterminal>ArrayAccess</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssignmentOperator</nonterminal>
		<bgf:expression>
			<terminal>=</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssignmentOperator</nonterminal>
		<bgf:expression>
			<terminal>*=</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssignmentOperator</nonterminal>
		<bgf:expression>
			<terminal>/=</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssignmentOperator</nonterminal>
		<bgf:expression>
			<terminal>%=</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssignmentOperator</nonterminal>
		<bgf:expression>
			<terminal>+=</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssignmentOperator</nonterminal>
		<bgf:expression>
			<terminal>-=</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssignmentOperator</nonterminal>
		<bgf:expression>
			<terminal>&lt;&lt;=</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssignmentOperator</nonterminal>
		<bgf:expression>
			<terminal>&gt;&gt;=</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssignmentOperator</nonterminal>
		<bgf:expression>
			<terminal>&gt;&gt;&gt;=</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssignmentOperator</nonterminal>
		<bgf:expression>
			<terminal>&amp;=</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssignmentOperator</nonterminal>
		<bgf:expression>
			<terminal>^=</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssignmentOperator</nonterminal>
		<bgf:expression>
			<terminal>|=</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AnnotationTypeElementDeclarations</nonterminal>
		<bgf:expression>
			<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AnnotationTypeElementDeclarations</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>AnnotationTypeElementDeclarations</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
		<bgf:expression>
			<nonterminal>Block</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
		<bgf:expression>
			<nonterminal>EmptyStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
		<bgf:expression>
			<nonterminal>ExpressionStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
		<bgf:expression>
			<nonterminal>AssertStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
		<bgf:expression>
			<nonterminal>SwitchStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
		<bgf:expression>
			<nonterminal>DoStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
		<bgf:expression>
			<nonterminal>BreakStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
		<bgf:expression>
			<nonterminal>ContinueStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
		<bgf:expression>
			<nonterminal>ReturnStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
		<bgf:expression>
			<nonterminal>SynchronizedStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
		<bgf:expression>
			<nonterminal>ThrowStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
		<bgf:expression>
			<nonterminal>TryStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AdditionalBound</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>&amp;</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>InterfaceType</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FieldDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>FieldModifiers</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Type</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>VariableDeclarators</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeBound</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>extends</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ClassOrInterfaceType</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>AdditionalBoundList</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AdditionalBoundList</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>AdditionalBound</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>AdditionalBoundList</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AdditionalBoundList</nonterminal>
		<bgf:expression>
			<nonterminal>AdditionalBound</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>VariableDeclarator</nonterminal>
		<bgf:expression>
			<nonterminal>VariableDeclaratorId</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>VariableDeclarator</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>VariableDeclaratorId</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>=</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>VariableInitializer</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PostfixExpression</nonterminal>
		<bgf:expression>
			<nonterminal>Primary</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PostfixExpression</nonterminal>
		<bgf:expression>
			<nonterminal>ExpressionName</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PostfixExpression</nonterminal>
		<bgf:expression>
			<nonterminal>PostIncrementExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PostfixExpression</nonterminal>
		<bgf:expression>
			<nonterminal>PostDecrementExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>SwitchLabel</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>case</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ConstantExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>:</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>SwitchLabel</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>case</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>EnumConstantName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>:</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>SwitchLabel</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>default</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>:</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstantModifier</nonterminal>
		<bgf:expression>
			<nonterminal>Annotation</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstantModifier</nonterminal>
		<bgf:expression>
			<terminal>public</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstantModifier</nonterminal>
		<bgf:expression>
			<terminal>static</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstantModifier</nonterminal>
		<bgf:expression>
			<terminal>final</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FormalParameter</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>VariableModifiers</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Type</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>VariableDeclaratorId</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PackageName</nonterminal>
		<bgf:expression>
			<nonterminal>Identifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PackageName</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>PackageName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>VariableModifiers</nonterminal>
		<bgf:expression>
			<nonterminal>VariableModifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>VariableModifiers</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>VariableModifiers</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>VariableModifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConditionalAndExpression</nonterminal>
		<bgf:expression>
			<nonterminal>InclusiveOrExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConditionalAndExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ConditionalAndExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>&amp;&amp;</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>InclusiveOrExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodModifiers</nonterminal>
		<bgf:expression>
			<nonterminal>MethodModifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodModifiers</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>MethodModifiers</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>MethodModifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Type</nonterminal>
		<bgf:expression>
			<nonterminal>PrimitiveType</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Type</nonterminal>
		<bgf:expression>
			<nonterminal>ReferenceType</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>EqualityExpression</nonterminal>
		<bgf:expression>
			<nonterminal>RelationalExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>EqualityExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>EqualityExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>==</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>RelationalExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>EqualityExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>EqualityExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>!=</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>RelationalExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceMemberDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>ConstantDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceMemberDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>AbstractMethodDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceMemberDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>ClassDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceMemberDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>InterfaceDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceMemberDeclaration</nonterminal>
		<bgf:expression>
			<terminal>;</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MultiplicativeExpression</nonterminal>
		<bgf:expression>
			<nonterminal>UnaryExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MultiplicativeExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>MultiplicativeExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>*</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>UnaryExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MultiplicativeExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>MultiplicativeExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>/</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>UnaryExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MultiplicativeExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>MultiplicativeExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>%</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>UnaryExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ActualTypeArgument</nonterminal>
		<bgf:expression>
			<nonterminal>ReferenceType</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ActualTypeArgument</nonterminal>
		<bgf:expression>
			<nonterminal>Wildcard</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ExceptionType</nonterminal>
		<bgf:expression>
			<nonterminal>ClassType</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ExceptionType</nonterminal>
		<bgf:expression>
			<nonterminal>TypeVariable</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>BreakStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>break</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Identifier</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstructorModifier</nonterminal>
		<bgf:expression>
			<nonterminal>Annotation</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstructorModifier</nonterminal>
		<bgf:expression>
			<terminal>public</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstructorModifier</nonterminal>
		<bgf:expression>
			<terminal>protected</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstructorModifier</nonterminal>
		<bgf:expression>
			<terminal>private</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ElementValuePairs</nonterminal>
		<bgf:expression>
			<nonterminal>ElementValuePair</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ElementValuePairs</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ElementValuePairs</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>,</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ElementValuePair</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>SynchronizedStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>synchronized</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Block</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Literal</nonterminal>
		<bgf:expression>
			<nonterminal>IntegerLiteral</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Literal</nonterminal>
		<bgf:expression>
			<nonterminal>FloatingPointLiteral</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Literal</nonterminal>
		<bgf:expression>
			<nonterminal>BooleanLiteral</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Literal</nonterminal>
		<bgf:expression>
			<nonterminal>CharacterLiteral</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Literal</nonterminal>
		<bgf:expression>
			<nonterminal>StringLiteral</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Literal</nonterminal>
		<bgf:expression>
			<nonterminal>NullLiteral</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ElementValue</nonterminal>
		<bgf:expression>
			<nonterminal>ConditionalExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ElementValue</nonterminal>
		<bgf:expression>
			<nonterminal>Annotation</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ElementValue</nonterminal>
		<bgf:expression>
			<nonterminal>ElementValueArrayInitializer</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Super</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>extends</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ClassType</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ArrayCreationExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>new</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>PrimitiveType</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>DimExprs</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Dims</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ArrayCreationExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>new</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ClassOrInterfaceType</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>DimExprs</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Dims</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ArrayCreationExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>new</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>PrimitiveType</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Dims</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ArrayInitializer</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ArrayCreationExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>new</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ClassOrInterfaceType</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Dims</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ArrayInitializer</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ArrayInitializer</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>{</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>VariableInitializers</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<terminal>,</terminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>}</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceModifier</nonterminal>
		<bgf:expression>
			<nonterminal>Annotation</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceModifier</nonterminal>
		<bgf:expression>
			<terminal>public</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceModifier</nonterminal>
		<bgf:expression>
			<terminal>protected</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceModifier</nonterminal>
		<bgf:expression>
			<terminal>private</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceModifier</nonterminal>
		<bgf:expression>
			<terminal>abstract</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceModifier</nonterminal>
		<bgf:expression>
			<terminal>static</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceModifier</nonterminal>
		<bgf:expression>
			<terminal>strictfp</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>UnaryExpressionNotPlusMinus</nonterminal>
		<bgf:expression>
			<nonterminal>PostfixExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>UnaryExpressionNotPlusMinus</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>~</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>UnaryExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>UnaryExpressionNotPlusMinus</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>!</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>UnaryExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>UnaryExpressionNotPlusMinus</nonterminal>
		<bgf:expression>
			<nonterminal>CastExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>NonWildTypeArguments</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>&lt;</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ReferenceTypeList</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>&gt;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>SwitchBlock</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>{</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>SwitchBlockStatementGroups</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>SwitchLabels</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>}</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>EmptyStatement</nonterminal>
		<bgf:expression>
			<terminal>;</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>EnumConstants</nonterminal>
		<bgf:expression>
			<nonterminal>EnumConstant</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>EnumConstants</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>EnumConstants</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>,</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>EnumConstant</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>LastFormalParameter</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>VariableModifiers</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Type</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<terminal>...</terminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>VariableDeclaratorId</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>LastFormalParameter</nonterminal>
		<bgf:expression>
			<nonterminal>FormalParameter</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AbstractMethodDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>AbstractMethodModifiers</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>TypeParameters</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ResultType</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>MethodDeclarator</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Throws</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>IfThenElseStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>if</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>StatementNoShortIf</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>else</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Statement</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>EnhancedForStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>for</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>VariableModifiers</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Type</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>:</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Statement</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ReturnStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>return</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Expression</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Block</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>{</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>BlockStatements</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>}</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ForUpdate</nonterminal>
		<bgf:expression>
			<nonterminal>StatementExpressionList</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ForInit</nonterminal>
		<bgf:expression>
			<nonterminal>StatementExpressionList</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ForInit</nonterminal>
		<bgf:expression>
			<nonterminal>LocalVariableDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>EnumDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ClassModifiers</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>enum</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Interfaces</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>EnumBody</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>VariableDeclarators</nonterminal>
		<bgf:expression>
			<nonterminal>VariableDeclarator</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>VariableDeclarators</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>VariableDeclarators</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>,</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>VariableDeclarator</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ThrowStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>throw</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ExclusiveOrExpression</nonterminal>
		<bgf:expression>
			<nonterminal>AndExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ExclusiveOrExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ExclusiveOrExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>^</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>AndExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Primary</nonterminal>
		<bgf:expression>
			<nonterminal>PrimaryNoNewArray</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Primary</nonterminal>
		<bgf:expression>
			<nonterminal>ArrayCreationExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PackageDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Annotations</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>package</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>PackageName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>RelationalExpression</nonterminal>
		<bgf:expression>
			<nonterminal>ShiftExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>RelationalExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>RelationalExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>&lt;</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ShiftExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>RelationalExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>RelationalExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>&gt;</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ShiftExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>RelationalExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>RelationalExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>&lt;=</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ShiftExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>RelationalExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>RelationalExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>&gt;=</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ShiftExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>RelationalExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>RelationalExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>instanceof</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ReferenceType</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementNoShortIf</nonterminal>
		<bgf:expression>
			<nonterminal>StatementWithoutTrailingSubstatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementNoShortIf</nonterminal>
		<bgf:expression>
			<nonterminal>LabeledStatementNoShortIf</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementNoShortIf</nonterminal>
		<bgf:expression>
			<nonterminal>IfThenElseStatementNoShortIf</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementNoShortIf</nonterminal>
		<bgf:expression>
			<nonterminal>WhileStatementNoShortIf</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementNoShortIf</nonterminal>
		<bgf:expression>
			<nonterminal>ForStatementNoShortIf</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>WhileStatementNoShortIf</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>while</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>StatementNoShortIf</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ExtendsInterfaces</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>extends</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>InterfaceType</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ExtendsInterfaces</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ExtendsInterfaces</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>,</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>InterfaceType</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>WildcardBounds</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>extends</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ReferenceType</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>WildcardBounds</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>super</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ReferenceType</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AbstractMethodModifier</nonterminal>
		<bgf:expression>
			<nonterminal>Annotation</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AbstractMethodModifier</nonterminal>
		<bgf:expression>
			<terminal>public</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AbstractMethodModifier</nonterminal>
		<bgf:expression>
			<terminal>abstract</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodInvocation</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>MethodName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ArgumentList</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodInvocation</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>Primary</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>NonWildTypeArguments</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ArgumentList</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodInvocation</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>super</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>NonWildTypeArguments</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ArgumentList</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodInvocation</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ClassName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>super</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>NonWildTypeArguments</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ArgumentList</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodInvocation</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>TypeName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>NonWildTypeArguments</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ArgumentList</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstantExpression</nonterminal>
		<bgf:expression>
			<nonterminal>Expression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeDeclSpecifier</nonterminal>
		<bgf:expression>
			<nonterminal>TypeName</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeDeclSpecifier</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ClassOrInterfaceType</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ExceptionTypeList</nonterminal>
		<bgf:expression>
			<nonterminal>ExceptionType</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ExceptionTypeList</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ExceptionTypeList</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>,</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ExceptionType</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>VariableInitializer</nonterminal>
		<bgf:expression>
			<nonterminal>Expression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>VariableInitializer</nonterminal>
		<bgf:expression>
			<nonterminal>ArrayInitializer</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StaticInitializer</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>static</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Block</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Finally</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>finally</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Block</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MarkerAnnotation</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>@</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>TypeName</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstructorDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ConstructorModifiers</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ConstructorDeclarator</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Throws</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ConstructorBody</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ElementValuePair</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>=</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ElementValue</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeImportOnDemandDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>import</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>PackageOrTypeName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>*</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ArrayAccess</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ExpressionName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>[</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>]</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ArrayAccess</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>PrimaryNoNewArray</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>[</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>]</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceMemberDeclarations</nonterminal>
		<bgf:expression>
			<nonterminal>InterfaceMemberDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceMemberDeclarations</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>InterfaceMemberDeclarations</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>InterfaceMemberDeclaration</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ForStatement</nonterminal>
		<bgf:expression>
			<nonterminal>BasicForStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ForStatement</nonterminal>
		<bgf:expression>
			<nonterminal>EnhancedForStatement</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PostIncrementExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>PostfixExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>++</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PackageOrTypeName</nonterminal>
		<bgf:expression>
			<nonterminal>Identifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PackageOrTypeName</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>PackageOrTypeName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AmbiguousName</nonterminal>
		<bgf:expression>
			<nonterminal>Identifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AmbiguousName</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>AmbiguousName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ContinueStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>continue</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Identifier</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ImportDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>SingleTypeImportDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ImportDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>TypeImportOnDemandDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ImportDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>SingleStaticImportDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ImportDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>StaticImportOnDemandDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>CompilationUnit</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>PackageDeclaration</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ImportDeclarations</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>TypeDeclarations</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ElementValues</nonterminal>
		<bgf:expression>
			<nonterminal>ElementValue</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ElementValues</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ElementValues</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>,</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ElementValue</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>SwitchStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>switch</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>SwitchBlock</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Dims</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>[</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>]</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Dims</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>Dims</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>[</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>]</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassBody</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>{</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ClassBodyDeclarations</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>}</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssertStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>assert</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssertStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>assert</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>:</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassBodyDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>ClassMemberDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassBodyDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>InstanceInitializer</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassBodyDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>StaticInitializer</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassBodyDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>ConstructorDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>SwitchBlockStatementGroup</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>SwitchLabels</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>BlockStatements</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>MethodHeader</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>MethodBody</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>PreDecrementExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>--</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>UnaryExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodModifier</nonterminal>
		<bgf:expression>
			<nonterminal>Annotation</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodModifier</nonterminal>
		<bgf:expression>
			<terminal>public</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodModifier</nonterminal>
		<bgf:expression>
			<terminal>protected</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodModifier</nonterminal>
		<bgf:expression>
			<terminal>private</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodModifier</nonterminal>
		<bgf:expression>
			<terminal>abstract</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodModifier</nonterminal>
		<bgf:expression>
			<terminal>static</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodModifier</nonterminal>
		<bgf:expression>
			<terminal>final</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodModifier</nonterminal>
		<bgf:expression>
			<terminal>synchronized</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodModifier</nonterminal>
		<bgf:expression>
			<terminal>native</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodModifier</nonterminal>
		<bgf:expression>
			<terminal>strictfp</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>DoStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>do</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Statement</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>while</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeArguments</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>&lt;</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ActualTypeArgumentList</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>&gt;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConditionalExpression</nonterminal>
		<bgf:expression>
			<nonterminal>ConditionalOrExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConditionalExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ConditionalOrExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>?</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>:</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ConditionalExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassOrInterfaceType</nonterminal>
		<bgf:expression>
			<nonterminal>ClassType</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassOrInterfaceType</nonterminal>
		<bgf:expression>
			<nonterminal>InterfaceType</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InstanceInitializer</nonterminal>
		<bgf:expression>
			<nonterminal>Block</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TryStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>try</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Block</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Catches</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TryStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>try</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Block</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Catches</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Finally</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>SwitchLabels</nonterminal>
		<bgf:expression>
			<nonterminal>SwitchLabel</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>SwitchLabels</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>SwitchLabels</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>SwitchLabel</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Wildcard</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>?</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>WildcardBounds</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FormalParameterList</nonterminal>
		<bgf:expression>
			<nonterminal>LastFormalParameter</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FormalParameterList</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>FormalParameters</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>,</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>LastFormalParameter</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Expression</nonterminal>
		<bgf:expression>
			<nonterminal>AssignmentExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementExpressionList</nonterminal>
		<bgf:expression>
			<nonterminal>StatementExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementExpressionList</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>StatementExpressionList</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>,</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>StatementExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AdditiveExpression</nonterminal>
		<bgf:expression>
			<nonterminal>MultiplicativeExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AdditiveExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>AdditiveExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>+</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>MultiplicativeExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AdditiveExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>AdditiveExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>-</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>MultiplicativeExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FloatingPointType</nonterminal>
		<bgf:expression>
			<terminal>float</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FloatingPointType</nonterminal>
		<bgf:expression>
			<terminal>double</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ExpressionStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>StatementExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>LocalVariableDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>VariableModifiers</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Type</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>VariableDeclarators</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstructorDeclarator</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>TypeParameters</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>FormalParameterList</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InclusiveOrExpression</nonterminal>
		<bgf:expression>
			<nonterminal>ExclusiveOrExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InclusiveOrExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>InclusiveOrExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>|</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ExclusiveOrExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassType</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>TypeDeclSpecifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>TypeArguments</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>WhileStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>while</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Statement</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FormalParameters</nonterminal>
		<bgf:expression>
			<nonterminal>FormalParameter</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FormalParameters</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>FormalParameters</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>,</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>FormalParameter</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>VariableModifier</nonterminal>
		<bgf:expression>
			<terminal>final</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>VariableModifier</nonterminal>
		<bgf:expression>
			<nonterminal>Annotation</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>NormalClassDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>EnumDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FieldAccess</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>Primary</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FieldAccess</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>super</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FieldAccess</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ClassName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>super</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssignmentExpression</nonterminal>
		<bgf:expression>
			<nonterminal>ConditionalExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AssignmentExpression</nonterminal>
		<bgf:expression>
			<nonterminal>Assignment</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>BasicForStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>for</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ForInit</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Expression</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ForUpdate</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Statement</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConditionalOrExpression</nonterminal>
		<bgf:expression>
			<nonterminal>ConditionalAndExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConditionalOrExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ConditionalOrExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>||</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ConditionalAndExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>NormalAnnotation</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>@</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>TypeName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ElementValuePairs</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ImportDeclarations</nonterminal>
		<bgf:expression>
			<nonterminal>ImportDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ImportDeclarations</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ImportDeclarations</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ImportDeclaration</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>ClassDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>InterfaceDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeDeclaration</nonterminal>
		<bgf:expression>
			<terminal>;</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>LabeledStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>:</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Statement</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ExpressionName</nonterminal>
		<bgf:expression>
			<nonterminal>Identifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ExpressionName</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>AmbiguousName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ArrayType</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>Type</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>[</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>]</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementExpression</nonterminal>
		<bgf:expression>
			<nonterminal>Assignment</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementExpression</nonterminal>
		<bgf:expression>
			<nonterminal>PreIncrementExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementExpression</nonterminal>
		<bgf:expression>
			<nonterminal>PreDecrementExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementExpression</nonterminal>
		<bgf:expression>
			<nonterminal>PostIncrementExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementExpression</nonterminal>
		<bgf:expression>
			<nonterminal>PostDecrementExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementExpression</nonterminal>
		<bgf:expression>
			<nonterminal>MethodInvocation</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StatementExpression</nonterminal>
		<bgf:expression>
			<nonterminal>ClassInstanceCreationExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Arguments</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ArgumentList</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodDeclarator</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>FormalParameterList</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodDeclarator</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>MethodDeclarator</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>[</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>]</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>VariableDeclaratorId</nonterminal>
		<bgf:expression>
			<nonterminal>Identifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>VariableDeclaratorId</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>VariableDeclaratorId</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>[</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>]</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>IntegralType</nonterminal>
		<bgf:expression>
			<terminal>byte</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>IntegralType</nonterminal>
		<bgf:expression>
			<terminal>short</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>IntegralType</nonterminal>
		<bgf:expression>
			<terminal>int</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>IntegralType</nonterminal>
		<bgf:expression>
			<terminal>long</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>IntegralType</nonterminal>
		<bgf:expression>
			<terminal>char</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>UnaryExpression</nonterminal>
		<bgf:expression>
			<nonterminal>PreIncrementExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>UnaryExpression</nonterminal>
		<bgf:expression>
			<nonterminal>PreDecrementExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>UnaryExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>+</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>UnaryExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>UnaryExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>-</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>UnaryExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>UnaryExpression</nonterminal>
		<bgf:expression>
			<nonterminal>UnaryExpressionNotPlusMinus</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>NumericType</nonterminal>
		<bgf:expression>
			<nonterminal>IntegralType</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>NumericType</nonterminal>
		<bgf:expression>
			<nonterminal>FloatingPointType</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AnnotationTypeBody</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>{</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>AnnotationTypeElementDeclarations</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>}</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>LeftHandSide</nonterminal>
		<bgf:expression>
			<nonterminal>ExpressionName</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>LeftHandSide</nonterminal>
		<bgf:expression>
			<nonterminal>FieldAccess</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>LeftHandSide</nonterminal>
		<bgf:expression>
			<nonterminal>ArrayAccess</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>IfThenElseStatementNoShortIf</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>if</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Expression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>StatementNoShortIf</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>else</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>StatementNoShortIf</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>LocalVariableDeclarationStatement</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>LocalVariableDeclaration</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>CastExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>PrimitiveType</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Dims</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>UnaryExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>CastExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ReferenceType</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>UnaryExpressionNotPlusMinus</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ShiftExpression</nonterminal>
		<bgf:expression>
			<nonterminal>AdditiveExpression</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ShiftExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ShiftExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>&lt;&lt;</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>AdditiveExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ShiftExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ShiftExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>&gt;&gt;</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>AdditiveExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ShiftExpression</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ShiftExpression</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>&gt;&gt;&gt;</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>AdditiveExpression</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FieldModifiers</nonterminal>
		<bgf:expression>
			<nonterminal>FieldModifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FieldModifiers</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>FieldModifiers</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>FieldModifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodBody</nonterminal>
		<bgf:expression>
			<nonterminal>Block</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodBody</nonterminal>
		<bgf:expression>
			<terminal>;</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeVariable</nonterminal>
		<bgf:expression>
			<nonterminal>Identifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>DefaultValue</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>default</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ElementValue</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Catches</nonterminal>
		<bgf:expression>
			<nonterminal>CatchClause</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>Catches</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>Catches</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>CatchClause</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ResultType</nonterminal>
		<bgf:expression>
			<nonterminal>Type</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ResultType</nonterminal>
		<bgf:expression>
			<terminal>void</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstructorModifiers</nonterminal>
		<bgf:expression>
			<nonterminal>ConstructorModifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstructorModifiers</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ConstructorModifiers</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ConstructorModifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>StaticImportOnDemandDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>import</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>static</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>TypeName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>*</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>EnumBody</nonterminal>
		<bgf:expression>
			<star>
				<bgf:expression>
					<sequence>
						<bgf:expression>
							<optional>
								<bgf:expression>
									<nonterminal>EnumConstants</nonterminal>
								</bgf:expression>
							</optional>
						</bgf:expression>
						<bgf:expression>
							<optional>
								<bgf:expression>
									<terminal>,</terminal>
								</bgf:expression>
							</optional>
						</bgf:expression>
						<bgf:expression>
							<optional>
								<bgf:expression>
									<nonterminal>EnumBodyDeclarations</nonterminal>
								</bgf:expression>
							</optional>
						</bgf:expression>
					</sequence>
				</bgf:expression>
			</star>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ReferenceType</nonterminal>
		<bgf:expression>
			<nonterminal>ClassOrInterfaceType</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ReferenceType</nonterminal>
		<bgf:expression>
			<nonterminal>TypeVariable</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ReferenceType</nonterminal>
		<bgf:expression>
			<nonterminal>ArrayType</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassModifiers</nonterminal>
		<bgf:expression>
			<nonterminal>ClassModifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassModifiers</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ClassModifiers</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ClassModifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ForStatementNoShortIf</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>for</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ForInit</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Expression</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ForUpdate</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>StatementNoShortIf</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>MethodHeader</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>MethodModifiers</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>TypeParameters</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ResultType</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>MethodDeclarator</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Throws</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>LabeledStatementNoShortIf</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>:</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>StatementNoShortIf</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceBody</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>{</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>InterfaceMemberDeclarations</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>}</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstantModifiers</nonterminal>
		<bgf:expression>
			<nonterminal>ConstantModifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ConstantModifiers</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>ConstantModifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ConstantModifiers</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>SingleElementAnnotation</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>@</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>TypeName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>ElementValue</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>EnumConstantName</nonterminal>
		<bgf:expression>
			<nonterminal>Identifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeDeclarations</nonterminal>
		<bgf:expression>
			<nonterminal>TypeDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeDeclarations</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>TypeDeclarations</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>TypeDeclaration</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FieldModifier</nonterminal>
		<bgf:expression>
			<nonterminal>Annotation</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FieldModifier</nonterminal>
		<bgf:expression>
			<terminal>public</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FieldModifier</nonterminal>
		<bgf:expression>
			<terminal>protected</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FieldModifier</nonterminal>
		<bgf:expression>
			<terminal>private</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FieldModifier</nonterminal>
		<bgf:expression>
			<terminal>static</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FieldModifier</nonterminal>
		<bgf:expression>
			<terminal>final</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FieldModifier</nonterminal>
		<bgf:expression>
			<terminal>transient</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>FieldModifier</nonterminal>
		<bgf:expression>
			<terminal>volatile</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>AbstractMethodModifiers</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Type</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>(</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>)</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>Dims</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>DefaultValue</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>ConstantDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>ClassDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>InterfaceDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>EnumDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>AnnotationTypeDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>AnnotationTypeElementDeclaration</nonterminal>
		<bgf:expression>
			<terminal>;</terminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>DimExprs</nonterminal>
		<bgf:expression>
			<nonterminal>DimExpr</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>DimExprs</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>DimExprs</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>DimExpr</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>SingleStaticImportDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>import</terminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>static</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>TypeName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>NormalInterfaceDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>InterfaceDeclaration</nonterminal>
		<bgf:expression>
			<nonterminal>AnnotationTypeDeclaration</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>NormalInterfaceDeclaration</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>InterfaceModifiers</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>interface</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ExtendsInterfaces</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>InterfaceBody</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ElementValueArrayInitializer</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>{</terminal>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<nonterminal>ElementValues</nonterminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<optional>
						<bgf:expression>
							<terminal>,</terminal>
						</bgf:expression>
					</optional>
				</bgf:expression>
				<bgf:expression>
					<terminal>}</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeParameters</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<terminal>&lt;</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>TypeParameterList</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>&gt;</terminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeParameterList</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>TypeParameterList</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>,</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>TypeParameter</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>TypeParameterList</nonterminal>
		<bgf:expression>
			<nonterminal>TypeParameter</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassName</nonterminal>
		<bgf:expression>
			<nonterminal>Identifier</nonterminal>
		</bgf:expression>
	</bgf:production>
	<bgf:production>
		<nonterminal>ClassName</nonterminal>
		<bgf:expression>
			<sequence>
				<bgf:expression>
					<nonterminal>AmbiguousName</nonterminal>
				</bgf:expression>
				<bgf:expression>
					<terminal>.</terminal>
				</bgf:expression>
				<bgf:expression>
					<nonterminal>Identifier</nonterminal>
				</bgf:expression>
			</sequence>
		</bgf:expression>
	</bgf:production>
</bgf:grammar>
