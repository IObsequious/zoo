2.1: character ::= graphic_character I formaLeffector I otheLcontml__function
2.1:
graphic_character ::= identfieLletter I digit I space_character I specialcharacter
2.3: identifier ::=
identifieLletter {}underline] letter__or_digit}
2.3: letteLor_digit ::= identifleLletter I digit
2.4: numeric_literal ::= decimal_literal I based_literal
2.4.1: decimal_literal ::= numeral [.numeral] [exponent]
2.4.1: numeral ::= digit { [underline] digit}
2.4.]: exponent ::= E [+] numeral I E - numeral
2.4.2: based_literal ::=
base # based_numeral [.based_numeral] # [exponent]
2.4.2: base ::= numeral
2.4.2: based_numeral ::=
extended_digit {[underline] extended_digit}
2.4.2: extended_digit ::= digit IA IB IC ID IE IF
2.5:
characteLliteral ::= 'graphic_character'
2.6:
string_literal ::= "{string_element }"
2.6:
string_element ::= "" I non_quotation_mark__graphic_character A string_element is either a pair of quotation marks C"),
or a single graphic_character other than a quotation mark.
2.7: comment ::= -- {non_end_of_line_character}
2.8:
pragma ::= pragma identifier [(pragma_argumenLassociation {, pragma__argument_association])];
2.8: pragma_argumenLassociation ::=
[pragmo_arg~ent_identifier=>] name [ [pragma_arg~entidentifier=>] expression