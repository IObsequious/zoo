<?xml version="1.0" encoding="UTF-8"?>

<xns1:grammar xmlns:xns1="http://planet-sl.org/bgf">
  <xns1:production>
    <nonterminal>ref-or-out</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>ref</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>out</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>expression-unary-operator</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>lex-csharp-extra/plus</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp-extra/minus</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>increment-decrement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>!</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>~</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>*</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>increment-decrement</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>++</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>--</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>expression-shift-operator</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>&lt;&lt;</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>&gt;&gt;</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>expression-relational-operator</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>lex-csharp-extra/less-than</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp-extra/greater-than</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>&lt;=</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>&gt;=</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>is</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>as</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>expression-equality-operator</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>==</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>!=</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>conversion-kind</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>implicit</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>explicit</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>maybe-empty-block</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>{</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <star>
		<xns1:expression>
		  <nonterminal>statement</nonterminal>
		</xns1:expression>
	      </star>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>}</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <terminal>;</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>built-in-type</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>integral-type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>built-in-class-type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>bool</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>decimal</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>float</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>double</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>built-in-class-type</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>object</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>string</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>else-part</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>else</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>embedded-statement</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>qualified-identifier-list</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>qualified-identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <terminal>,</terminal>
		</xns1:expression>
		<xns1:expression>
		  <nonterminal>qualified-identifier</nonterminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </star>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>compilation-unit</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>using-directive</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>global-attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>namespace-member-declaration</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>type</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>non-array-type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>rank-specifier</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>integral-type</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>sbyte</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>byte</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>short</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>ushort</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>int</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>uint</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>long</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>ulong</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>char</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>argument-list</nonterminal>
    <xns1:expression>
      <optional>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>argument</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <star>
		<xns1:expression>
		  <sequence>
		    <xns1:expression>
		      <terminal>,</terminal>
		    </xns1:expression>
		    <xns1:expression>
		      <nonterminal>argument</nonterminal>
		    </xns1:expression>
		  </sequence>
		</xns1:expression>
	      </star>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </optional>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>argument</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>ref-or-out</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>expression</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>primary-expression</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>new</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>non-array-type</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>[</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression-list</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>]</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <star>
		<xns1:expression>
		  <nonterminal>rank-specifier</nonterminal>
		</xns1:expression>
	      </star>
	    </xns1:expression>
	    <xns1:expression>
	      <optional>
		<xns1:expression>
		  <nonterminal>array-initializer</nonterminal>
		</xns1:expression>
	      </optional>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>new</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>array-type</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>array-initializer</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/literal</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>(</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>)</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>primary-expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>.</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>lex-csharp/identifier</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>predefined-type</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>.</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>lex-csharp/identifier</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>primary-expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>(</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>argument-list</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>)</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>primary-expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>[</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression-list</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>]</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <terminal>this</terminal>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>base</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>.</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>lex-csharp/identifier</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>base</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>[</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression-list</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>]</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>primary-expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>increment-decrement</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>new</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>type</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>(</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>argument-list</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>)</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>typeof</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>(</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>type-or-void</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>)</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>checked</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>(</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>)</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>unchecked</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>(</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>)</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>predefined-type</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>bool</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>byte</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>char</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>decimal</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>double</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>float</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>int</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>long</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>object</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>sbyte</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>short</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>string</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>uint</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>ulong</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>ushort</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>expression-list</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>expression</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <terminal>,</terminal>
		</xns1:expression>
		<xns1:expression>
		  <nonterminal>expression</nonterminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </star>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>unary-expression</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression-unary-operator</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>unary-expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>(</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>type</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>)</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>unary-expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>primary-expression</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>assignment-operator</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>=</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>+=</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>-=</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>*=</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>/=</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>%=</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>&#38;=</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>|=</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>^=</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>&lt;&lt;=</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>&gt;&gt;=</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>expression</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>?</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>:</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>||</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>&#38;&#38;</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>lex-csharp-extra/bar</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>^</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>lex-csharp-extra/ampersand</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression-equality-operator</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression-relational-operator</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>is</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>built-in-type</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression-shift-operator</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>lex-csharp-extra/plus</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>lex-csharp-extra/minus</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>*</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>/</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>%</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>unary-expression</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>unary-expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>assignment-operator</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>statement</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>labeled-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>declaration-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>embedded-statement</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>embedded-statement</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>maybe-empty-block</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>statement-expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>;</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>selection-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>iteration-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>jump-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>try-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>checked</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>block</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>unchecked</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>block</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lock-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>using-statement</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>block</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>{</terminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>statement</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <terminal>}</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>labeled-statement</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>:</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>statement</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>declaration-statement</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>local-variable-declaration</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>;</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>local-constant-declaration</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>;</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>local-variable-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>variable-declarator</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <terminal>,</terminal>
		</xns1:expression>
		<xns1:expression>
		  <nonterminal>variable-declarator</nonterminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </star>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>local-constant-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>const</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>constant-declarator</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <terminal>,</terminal>
		</xns1:expression>
		<xns1:expression>
		  <nonterminal>constant-declarator</nonterminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </star>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>constant-declarator</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>=</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>expression</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>statement-expression</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>primary-expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>(</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>argument-list</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>)</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>new</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>type</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>(</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>argument-list</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>)</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>unary-expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>assignment-operator</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>primary-expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>increment-decrement</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>increment-decrement</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>primary-expression</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>selection-statement</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>if-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>switch-statement</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>if-statement</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>if</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>expression</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>embedded-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>else-part</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>switch-statement</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>switch</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>expression</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>{</terminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>switch-section</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <terminal>}</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>switch-section</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <plus>
	    <xns1:expression>
	      <nonterminal>switch-label</nonterminal>
	    </xns1:expression>
	  </plus>
	</xns1:expression>
	<xns1:expression>
	  <plus>
	    <xns1:expression>
	      <nonterminal>statement</nonterminal>
	    </xns1:expression>
	  </plus>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>switch-label</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>case</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>:</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>default</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>:</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>iteration-statement</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>while-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>do-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>for-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>foreach-statement</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>while-statement</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>while</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>expression</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>embedded-statement</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>do-statement</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>do</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>embedded-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>while</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>expression</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>;</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>for-statement</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>for</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>for-initializer</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <terminal>;</terminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <terminal>;</terminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>statement-expression-list</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>embedded-statement</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>for-initializer</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>local-variable-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>statement-expression-list</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>statement-expression-list</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>statement-expression</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <terminal>,</terminal>
		</xns1:expression>
		<xns1:expression>
		  <nonterminal>statement-expression</nonterminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </star>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>foreach-statement</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>foreach</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>in</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>expression</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>embedded-statement</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>jump-statement</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>break-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>continue-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>goto-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>return-statement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>throw-statement</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>break-statement</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>break</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>;</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>continue-statement</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>continue</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>;</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>goto-statement</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>goto</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>lex-csharp/identifier</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>;</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>goto</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>case</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>;</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>goto</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>default</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>;</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>return-statement</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>return</terminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <terminal>;</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>throw-statement</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>throw</terminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>expression</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <terminal>;</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>try-statement</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>try</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>block</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>catch-clauses</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <optional>
		<xns1:expression>
		  <nonterminal>finally-clause</nonterminal>
		</xns1:expression>
	      </optional>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>try</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>block</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>finally-clause</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>catch-clauses</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <plus>
		<xns1:expression>
		  <nonterminal>specific-catch-clause</nonterminal>
		</xns1:expression>
	      </plus>
	    </xns1:expression>
	    <xns1:expression>
	      <optional>
		<xns1:expression>
		  <nonterminal>general-catch-clause</nonterminal>
		</xns1:expression>
	      </optional>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <star>
		<xns1:expression>
		  <nonterminal>specific-catch-clause</nonterminal>
		</xns1:expression>
	      </star>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>general-catch-clause</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>specific-catch-clause</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>catch</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>(</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>built-in-class-type</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <optional>
		<xns1:expression>
		  <nonterminal>lex-csharp/identifier</nonterminal>
		</xns1:expression>
	      </optional>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>)</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>block</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>catch</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>(</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>qualified-identifier</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <optional>
		<xns1:expression>
		  <nonterminal>lex-csharp/identifier</nonterminal>
		</xns1:expression>
	      </optional>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>)</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>block</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>general-catch-clause</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>catch</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>block</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>finally-clause</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>finally</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>block</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>lock-statement</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>lock</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>expression</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>embedded-statement</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>using-statement</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>using</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>resource-acquisition</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>embedded-statement</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>resource-acquisition</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>local-variable-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>expression</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>namespace-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>namespace</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>qualified-identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>namespace-body</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <terminal>;</terminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>qualified-identifier</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <terminal>.</terminal>
		</xns1:expression>
		<xns1:expression>
		  <nonterminal>lex-csharp/identifier</nonterminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </star>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>namespace-body</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>{</terminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>using-directive</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>namespace-member-declaration</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <terminal>}</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>using-directive</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>using</terminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <nonterminal>lex-csharp/identifier</nonterminal>
		</xns1:expression>
		<xns1:expression>
		  <terminal>=</terminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>qualified-identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>;</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>namespace-member-declaration</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>namespace-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type-declaration</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>type-declaration</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>class-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>struct-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>interface-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>enum-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>delegate-declaration</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>class-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>class-modifier</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <terminal>class</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>class-base</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>class-body</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <terminal>;</terminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>class-modifier</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>new</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>public</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>protected</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>internal</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>private</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>abstract</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>sealed</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>class-base</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>:</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>qualified-identifier-list</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>:</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>built-in-class-type</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <optional>
		<xns1:expression>
		  <sequence>
		    <xns1:expression>
		      <terminal>,</terminal>
		    </xns1:expression>
		    <xns1:expression>
		      <nonterminal>qualified-identifier-list</nonterminal>
		    </xns1:expression>
		  </sequence>
		</xns1:expression>
	      </optional>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>class-body</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>{</terminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>class-member-declaration</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <terminal>}</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>class-member-declaration</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>constant-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>field-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>method-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>property-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>event-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>indexer-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>operator-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>constructor-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>destructor-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>static-constructor-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type-declaration</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>constant-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>constant-modifier</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <terminal>const</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>constant-declarator</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <terminal>,</terminal>
		</xns1:expression>
		<xns1:expression>
		  <nonterminal>constant-declarator</nonterminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <terminal>;</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>constant-modifier</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>new</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>public</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>protected</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>internal</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>private</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>field-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>field-modifier</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>variable-declarator</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <terminal>,</terminal>
		</xns1:expression>
		<xns1:expression>
		  <nonterminal>variable-declarator</nonterminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <terminal>;</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>field-modifier</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>new</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>public</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>protected</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>internal</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>private</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>static</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>readonly</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>volatile</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>variable-declarator</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>lex-csharp/identifier</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>=</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>variable-initializer</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>method-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>method-header</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>maybe-empty-block</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>method-header</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>method-modifier</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type-or-void</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>qualified-identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>formal-parameter-list</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>method-modifier</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>new</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>public</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>protected</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>internal</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>private</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>static</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>virtual</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>sealed</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>override</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>abstract</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>extern</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>type-or-void</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>void</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>formal-parameter-list</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>fixed-parameters</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>fixed-parameters</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>,</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>parameter-array</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>parameter-array</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>fixed-parameters</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>fixed-parameter</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <terminal>,</terminal>
		</xns1:expression>
		<xns1:expression>
		  <nonterminal>fixed-parameter</nonterminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </star>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>fixed-parameter</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>parameter-modifier</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>parameter-modifier</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>ref</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>out</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>parameter-array</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>params</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>array-type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>property-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>property-modifier</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>qualified-identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>{</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>accessor-declarations</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>}</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>property-modifier</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>new</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>public</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>protected</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>internal</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>private</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>static</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>virtual</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>sealed</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>override</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>abstract</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>extern</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>accessor-declarations</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>get-accessor-declaration</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <optional>
		<xns1:expression>
		  <nonterminal>set-accessor-declaration</nonterminal>
		</xns1:expression>
	      </optional>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>set-accessor-declaration</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <optional>
		<xns1:expression>
		  <nonterminal>get-accessor-declaration</nonterminal>
		</xns1:expression>
	      </optional>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>get-accessor-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>get</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>maybe-empty-block</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>set-accessor-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>set</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>maybe-empty-block</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>event-declaration</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>attributes</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <star>
		<xns1:expression>
		  <nonterminal>event-modifier</nonterminal>
		</xns1:expression>
	      </star>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>event</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>type</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>variable-declarator</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <star>
		<xns1:expression>
		  <sequence>
		    <xns1:expression>
		      <terminal>,</terminal>
		    </xns1:expression>
		    <xns1:expression>
		      <nonterminal>variable-declarator</nonterminal>
		    </xns1:expression>
		  </sequence>
		</xns1:expression>
	      </star>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>;</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>attributes</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <star>
		<xns1:expression>
		  <nonterminal>event-modifier</nonterminal>
		</xns1:expression>
	      </star>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>event</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>type</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>qualified-identifier</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>{</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>event-accessor-declarations</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>}</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>event-modifier</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>new</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>public</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>protected</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>internal</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>private</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>static</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>virtual</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>sealed</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>override</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>abstract</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>extern</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>event-accessor-declarations</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>add-accessor-declaration</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>remove-accessor-declaration</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>remove-accessor-declaration</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>add-accessor-declaration</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>add-accessor-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>add</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>block</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>remove-accessor-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>remove</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>block</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>indexer-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>indexer-modifier</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>indexer-declarator</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>{</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>accessor-declarations</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>}</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>indexer-modifier</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>new</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>public</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>protected</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>internal</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>private</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>virtual</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>sealed</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>override</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>abstract</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>extern</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>indexer-declarator</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>type</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>this</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>[</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>formal-parameter-list</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>]</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>type</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>qualified-identifier</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>.</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>this</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>[</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>formal-parameter-list</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>]</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>operator-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <plus>
	    <xns1:expression>
	      <nonterminal>operator-modifier</nonterminal>
	    </xns1:expression>
	  </plus>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>operator-declarator</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>maybe-empty-block</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>operator-modifier</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>public</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>static</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>extern</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>operator-declarator</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>unary-operator-declarator</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>binary-operator-declarator</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>conversion-operator-declarator</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>unary-operator-declarator</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>operator</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>overloadable-unary-operator</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>overloadable-unary-operator</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>lex-csharp-extra/plus</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp-extra/minus</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>increment-decrement</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>!</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>~</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>true</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>false</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>binary-operator-declarator</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>operator</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>overloadable-binary-operator</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>,</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>overloadable-binary-operator</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>lex-csharp-extra/plus</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp-extra/minus</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>*</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>/</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>%</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp-extra/ampersand</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp-extra/bar</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>^</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>&lt;&lt;</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>&gt;&gt;</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>==</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>!=</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp-extra/greater-than</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp-extra/less-than</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>&gt;=</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>&lt;=</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>conversion-operator-declarator</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>conversion-kind</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>operator</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>constructor-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>constructor-modifier</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>constructor-declarator</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>maybe-empty-block</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>constructor-modifier</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>public</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>protected</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>internal</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>private</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>extern</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>constructor-declarator</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>formal-parameter-list</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>constructor-initializer</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>constructor-initializer</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>:</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>base</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>(</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>argument-list</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>)</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>:</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>this</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>(</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>argument-list</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>)</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>static-constructor-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>static-constructor-modifiers</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>maybe-empty-block</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>static-constructor-modifiers</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <optional>
		<xns1:expression>
		  <terminal>extern</terminal>
		</xns1:expression>
	      </optional>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>static</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>static</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>extern</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>destructor-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <terminal>extern</terminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <terminal>~</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>maybe-empty-block</nonterminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>struct-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>struct-modifier</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <terminal>struct</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <terminal>:</terminal>
		</xns1:expression>
		<xns1:expression>
		  <nonterminal>qualified-identifier-list</nonterminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>struct-body</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <terminal>;</terminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>struct-modifier</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>new</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>public</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>protected</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>internal</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>private</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>struct-body</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>{</terminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>struct-member-declaration</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <terminal>}</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>struct-member-declarations</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>struct-member-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>struct-member-declarations</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>struct-member-declaration</nonterminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>struct-member-declaration</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>constant-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>field-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>method-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>property-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>event-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>indexer-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>operator-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>constructor-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>static-constructor-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type-declaration</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>array-type</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>non-array-type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <plus>
	    <xns1:expression>
	      <nonterminal>rank-specifier</nonterminal>
	    </xns1:expression>
	  </plus>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>non-array-type</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>qualified-identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>built-in-type</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>rank-specifier</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>[</terminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <terminal>,</terminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <terminal>]</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>array-initializer</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>{</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>}</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>{</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>variable-initializer</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <star>
		<xns1:expression>
		  <sequence>
		    <xns1:expression>
		      <terminal>,</terminal>
		    </xns1:expression>
		    <xns1:expression>
		      <nonterminal>variable-initializer</nonterminal>
		    </xns1:expression>
		  </sequence>
		</xns1:expression>
	      </star>
	    </xns1:expression>
	    <xns1:expression>
	      <optional>
		<xns1:expression>
		  <terminal>,</terminal>
		</xns1:expression>
	      </optional>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>}</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>variable-initializer</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>expression</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>array-initializer</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>interface-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>interface-modifier</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <terminal>interface</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <terminal>:</terminal>
		</xns1:expression>
		<xns1:expression>
		  <nonterminal>qualified-identifier-list</nonterminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>interface-body</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <terminal>;</terminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>interface-modifier</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>new</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>public</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>protected</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>internal</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>private</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>interface-body</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>{</terminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>interface-member-declaration</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <terminal>}</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>interface-member-declaration</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <nonterminal>interface-method-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>interface-property-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>interface-event-declaration</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>interface-indexer-declaration</nonterminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>interface-method-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <terminal>new</terminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type-or-void</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>formal-parameter-list</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>;</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>interface-property-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <terminal>new</terminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>{</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>interface-accessors</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>}</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>interface-accessors</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>attributes</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>get</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>;</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <optional>
		<xns1:expression>
		  <sequence>
		    <xns1:expression>
		      <nonterminal>attributes</nonterminal>
		    </xns1:expression>
		    <xns1:expression>
		      <terminal>set</terminal>
		    </xns1:expression>
		    <xns1:expression>
		      <terminal>;</terminal>
		    </xns1:expression>
		  </sequence>
		</xns1:expression>
	      </optional>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <nonterminal>attributes</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>set</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>;</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <optional>
		<xns1:expression>
		  <sequence>
		    <xns1:expression>
		      <nonterminal>attributes</nonterminal>
		    </xns1:expression>
		    <xns1:expression>
		      <terminal>get</terminal>
		    </xns1:expression>
		    <xns1:expression>
		      <terminal>;</terminal>
		    </xns1:expression>
		  </sequence>
		</xns1:expression>
	      </optional>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>interface-event-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <terminal>new</terminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <terminal>event</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>;</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>interface-indexer-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <terminal>new</terminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>this</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>[</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>formal-parameter-list</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>]</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>{</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>interface-accessors</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>}</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>enum-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>enum-modifier</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <terminal>enum</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <terminal>:</terminal>
		</xns1:expression>
		<xns1:expression>
		  <nonterminal>integral-type</nonterminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>enum-body</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <terminal>;</terminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>enum-body</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>{</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>}</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
	<xns1:expression>
	  <sequence>
	    <xns1:expression>
	      <terminal>{</terminal>
	    </xns1:expression>
	    <xns1:expression>
	      <nonterminal>enum-member-declaration</nonterminal>
	    </xns1:expression>
	    <xns1:expression>
	      <star>
		<xns1:expression>
		  <sequence>
		    <xns1:expression>
		      <terminal>,</terminal>
		    </xns1:expression>
		    <xns1:expression>
		      <nonterminal>enum-member-declaration</nonterminal>
		    </xns1:expression>
		  </sequence>
		</xns1:expression>
	      </star>
	    </xns1:expression>
	    <xns1:expression>
	      <optional>
		<xns1:expression>
		  <terminal>,</terminal>
		</xns1:expression>
	      </optional>
	    </xns1:expression>
	    <xns1:expression>
	      <terminal>}</terminal>
	    </xns1:expression>
	  </sequence>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>enum-modifier</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>new</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>public</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>protected</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>internal</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>private</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>enum-member-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <terminal>=</terminal>
		</xns1:expression>
		<xns1:expression>
		  <nonterminal>expression</nonterminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>delegate-declaration</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attributes</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <nonterminal>delegate-modifier</nonterminal>
	    </xns1:expression>
	  </star>
	</xns1:expression>
	<xns1:expression>
	  <terminal>delegate</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>type-or-void</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>lex-csharp/identifier</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>formal-parameter-list</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>;</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>delegate-modifier</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>new</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>public</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>protected</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>internal</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>private</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>global-attributes</nonterminal>
    <xns1:expression>
      <star>
	<xns1:expression>
	  <nonterminal>global-attribute-section</nonterminal>
	</xns1:expression>
      </star>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>global-attribute-section</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>[</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>assembly</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>:</terminal>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>attribute-list</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <terminal>,</terminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <terminal>]</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>attributes</nonterminal>
    <xns1:expression>
      <star>
	<xns1:expression>
	  <nonterminal>attribute-section</nonterminal>
	</xns1:expression>
      </star>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>attribute-section</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>[</terminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <nonterminal>attribute-target</nonterminal>
		</xns1:expression>
		<xns1:expression>
		  <terminal>:</terminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <nonterminal>attribute-list</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <terminal>,</terminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <terminal>]</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>attribute-target</nonterminal>
    <xns1:expression>
      <choice>
	<xns1:expression>
	  <terminal>field</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>event</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>method</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>module</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>param</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>property</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>return</terminal>
	</xns1:expression>
	<xns1:expression>
	  <terminal>type</terminal>
	</xns1:expression>
      </choice>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>attribute-list</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attribute</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <star>
	    <xns1:expression>
	      <sequence>
		<xns1:expression>
		  <terminal>,</terminal>
		</xns1:expression>
		<xns1:expression>
		  <nonterminal>attribute</nonterminal>
		</xns1:expression>
	      </sequence>
	    </xns1:expression>
	  </star>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>attribute</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <nonterminal>attribute-name</nonterminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>attribute-arguments</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>attribute-name</nonterminal>
    <xns1:expression>
      <nonterminal>qualified-identifier</nonterminal>
    </xns1:expression>
  </xns1:production>
  <xns1:production>
    <nonterminal>attribute-arguments</nonterminal>
    <xns1:expression>
      <sequence>
	<xns1:expression>
	  <terminal>(</terminal>
	</xns1:expression>
	<xns1:expression>
	  <optional>
	    <xns1:expression>
	      <nonterminal>expression-list</nonterminal>
	    </xns1:expression>
	  </optional>
	</xns1:expression>
	<xns1:expression>
	  <terminal>)</terminal>
	</xns1:expression>
      </sequence>
    </xns1:expression>
  </xns1:production>
</xns1:grammar>